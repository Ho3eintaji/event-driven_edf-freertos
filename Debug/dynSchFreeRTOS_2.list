
dynSchFreeRTOS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ebc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a338  0800a338  00020430  2**0
                  CONTENTS
  4 .ARM          00000000  0800a338  0800a338  00020430  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a338  0800a338  00020430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  0800a340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008544  20000430  0800a770  00020430  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008974  0800a770  00028974  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d7f  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d7  00000000  00000000  000411d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  000455b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00046f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f4b  00000000  00000000  00048b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c253  00000000  00000000  00062a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a27c7  00000000  00000000  0007ecd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012149d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006488  00000000  00000000  001214f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000430 	.word	0x20000430
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009f64 	.word	0x08009f64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000434 	.word	0x20000434
 8000104:	08009f64 	.word	0x08009f64

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <main>:


int main(void)


{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//=======================
	launch_comm();
 800040c:	f000 f808 	bl	8000420 <launch_comm>
	init_hw();
 8000410:	f000 f8f2 	bl	80005f8 <init_hw>
	launch_ssAll();
 8000414:	f000 fef0 	bl	80011f8 <launch_ssAll>


//	xTaskCreate	(task1, (const char *) "task1", configMINIMAL_STACK_SIZE, (void *) NULL, 3, &task1_handler, portMAX_DELAY-1);


	vTaskStartScheduler();
 8000418:	f007 fb0c 	bl	8007a34 <vTaskStartScheduler>

	while (1);
 800041c:	e7fe      	b.n	800041c <main+0x14>
	...

08000420 <launch_comm>:
#include "nsprs_comm.h"
#include "nsprs_params.h"
#include "nsprs_common.h"

void launch_comm(void){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	//== mutexes
//	xLogMutex = xSemaphoreCreateMutex();
//	configASSERT(xLogMutex);
//	//== queues
	ssHeatPump_qh = 		xQueueCreate(1, sizeof(struct ssHeatPump_d *));
 8000424:	2200      	movs	r2, #0
 8000426:	2104      	movs	r1, #4
 8000428:	2001      	movs	r0, #1
 800042a:	f006 fc84 	bl	8006d36 <xQueueGenericCreate>
 800042e:	0002      	movs	r2, r0
 8000430:	4b5a      	ldr	r3, [pc, #360]	; (800059c <launch_comm+0x17c>)
 8000432:	601a      	str	r2, [r3, #0]
	ssTrgPump_qh = 			xQueueCreate(1, sizeof(struct ssTrgPump_d *));
 8000434:	2200      	movs	r2, #0
 8000436:	2104      	movs	r1, #4
 8000438:	2001      	movs	r0, #1
 800043a:	f006 fc7c 	bl	8006d36 <xQueueGenericCreate>
 800043e:	0002      	movs	r2, r0
 8000440:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <launch_comm+0x180>)
 8000442:	601a      	str	r2, [r3, #0]
	ssTrgHeater_qh = 		xQueueCreate(1, sizeof(struct ssTrgHeater_d *));
 8000444:	2200      	movs	r2, #0
 8000446:	2104      	movs	r1, #4
 8000448:	2001      	movs	r0, #1
 800044a:	f006 fc74 	bl	8006d36 <xQueueGenericCreate>
 800044e:	0002      	movs	r2, r0
 8000450:	4b54      	ldr	r3, [pc, #336]	; (80005a4 <launch_comm+0x184>)
 8000452:	601a      	str	r2, [r3, #0]
	ssTimer_qh = 			xQueueCreate(1, sizeof(struct ssTimer_d *));
 8000454:	2200      	movs	r2, #0
 8000456:	2104      	movs	r1, #4
 8000458:	2001      	movs	r0, #1
 800045a:	f006 fc6c 	bl	8006d36 <xQueueGenericCreate>
 800045e:	0002      	movs	r2, r0
 8000460:	4b51      	ldr	r3, [pc, #324]	; (80005a8 <launch_comm+0x188>)
 8000462:	601a      	str	r2, [r3, #0]
	ssTimer2_qh = 			xQueueCreate(1, sizeof(struct ssTimer_d *));
 8000464:	2200      	movs	r2, #0
 8000466:	2104      	movs	r1, #4
 8000468:	2001      	movs	r0, #1
 800046a:	f006 fc64 	bl	8006d36 <xQueueGenericCreate>
 800046e:	0002      	movs	r2, r0
 8000470:	4b4e      	ldr	r3, [pc, #312]	; (80005ac <launch_comm+0x18c>)
 8000472:	601a      	str	r2, [r3, #0]
	ssTimer3_qh = 			xQueueCreate(1, sizeof(struct ssTimer_d *));
 8000474:	2200      	movs	r2, #0
 8000476:	2104      	movs	r1, #4
 8000478:	2001      	movs	r0, #1
 800047a:	f006 fc5c 	bl	8006d36 <xQueueGenericCreate>
 800047e:	0002      	movs	r2, r0
 8000480:	4b4b      	ldr	r3, [pc, #300]	; (80005b0 <launch_comm+0x190>)
 8000482:	601a      	str	r2, [r3, #0]
	ssTimer4_qh = 			xQueueCreate(1, sizeof(struct ssTimer_d *));
 8000484:	2200      	movs	r2, #0
 8000486:	2104      	movs	r1, #4
 8000488:	2001      	movs	r0, #1
 800048a:	f006 fc54 	bl	8006d36 <xQueueGenericCreate>
 800048e:	0002      	movs	r2, r0
 8000490:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <launch_comm+0x194>)
 8000492:	601a      	str	r2, [r3, #0]
	ssTimer5_qh = 			xQueueCreate(1, sizeof(struct ssTimer_d *));
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	2001      	movs	r0, #1
 800049a:	f006 fc4c 	bl	8006d36 <xQueueGenericCreate>
 800049e:	0002      	movs	r2, r0
 80004a0:	4b45      	ldr	r3, [pc, #276]	; (80005b8 <launch_comm+0x198>)
 80004a2:	601a      	str	r2, [r3, #0]
	ssHMI_qh = 				xQueueCreate(1, sizeof(struct ssHMI_d *));
 80004a4:	2200      	movs	r2, #0
 80004a6:	2104      	movs	r1, #4
 80004a8:	2001      	movs	r0, #1
 80004aa:	f006 fc44 	bl	8006d36 <xQueueGenericCreate>
 80004ae:	0002      	movs	r2, r0
 80004b0:	4b42      	ldr	r3, [pc, #264]	; (80005bc <launch_comm+0x19c>)
 80004b2:	601a      	str	r2, [r3, #0]
	ssFlow_qh = 			xQueueCreate(1, sizeof(struct ssFlow_d *));
 80004b4:	2200      	movs	r2, #0
 80004b6:	2104      	movs	r1, #4
 80004b8:	2001      	movs	r0, #1
 80004ba:	f006 fc3c 	bl	8006d36 <xQueueGenericCreate>
 80004be:	0002      	movs	r2, r0
 80004c0:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <launch_comm+0x1a0>)
 80004c2:	601a      	str	r2, [r3, #0]
	ssTemp_qh =				xQueueCreate(1, sizeof(struct ssTemp_d *));
 80004c4:	2200      	movs	r2, #0
 80004c6:	2104      	movs	r1, #4
 80004c8:	2001      	movs	r0, #1
 80004ca:	f006 fc34 	bl	8006d36 <xQueueGenericCreate>
 80004ce:	0002      	movs	r2, r0
 80004d0:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <launch_comm+0x1a4>)
 80004d2:	601a      	str	r2, [r3, #0]
	ssHeatAlg_qh = 			xQueueCreate(1, sizeof(struct ssHeatAlg_d *));
 80004d4:	2200      	movs	r2, #0
 80004d6:	2104      	movs	r1, #4
 80004d8:	2001      	movs	r0, #1
 80004da:	f006 fc2c 	bl	8006d36 <xQueueGenericCreate>
 80004de:	0002      	movs	r2, r0
 80004e0:	4b39      	ldr	r3, [pc, #228]	; (80005c8 <launch_comm+0x1a8>)
 80004e2:	601a      	str	r2, [r3, #0]
	intr2ssHeatPump_qh = 	xQueueCreate(1, sizeof(char));
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	2001      	movs	r0, #1
 80004ea:	f006 fc24 	bl	8006d36 <xQueueGenericCreate>
 80004ee:	0002      	movs	r2, r0
 80004f0:	4b36      	ldr	r3, [pc, #216]	; (80005cc <launch_comm+0x1ac>)
 80004f2:	601a      	str	r2, [r3, #0]
	intr2ssTrgPump_qh = 	xQueueCreate(1, sizeof(char));
 80004f4:	2200      	movs	r2, #0
 80004f6:	2101      	movs	r1, #1
 80004f8:	2001      	movs	r0, #1
 80004fa:	f006 fc1c 	bl	8006d36 <xQueueGenericCreate>
 80004fe:	0002      	movs	r2, r0
 8000500:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <launch_comm+0x1b0>)
 8000502:	601a      	str	r2, [r3, #0]
	intr2ssTrgHeater_qh = 	xQueueCreate(1, sizeof(char));
 8000504:	2200      	movs	r2, #0
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f006 fc14 	bl	8006d36 <xQueueGenericCreate>
 800050e:	0002      	movs	r2, r0
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <launch_comm+0x1b4>)
 8000512:	601a      	str	r2, [r3, #0]
	intr2ssTimer_sh  = 		xSemaphoreCreateBinary();
 8000514:	2203      	movs	r2, #3
 8000516:	2100      	movs	r1, #0
 8000518:	2001      	movs	r0, #1
 800051a:	f006 fc0c 	bl	8006d36 <xQueueGenericCreate>
 800051e:	0002      	movs	r2, r0
 8000520:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <launch_comm+0x1b8>)
 8000522:	601a      	str	r2, [r3, #0]
	intr2ssTimer2_sh  = 	xSemaphoreCreateBinary();
 8000524:	2203      	movs	r2, #3
 8000526:	2100      	movs	r1, #0
 8000528:	2001      	movs	r0, #1
 800052a:	f006 fc04 	bl	8006d36 <xQueueGenericCreate>
 800052e:	0002      	movs	r2, r0
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <launch_comm+0x1bc>)
 8000532:	601a      	str	r2, [r3, #0]
	intr2ssTimer3_sh  = 	xSemaphoreCreateBinary();
 8000534:	2203      	movs	r2, #3
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f006 fbfc 	bl	8006d36 <xQueueGenericCreate>
 800053e:	0002      	movs	r2, r0
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <launch_comm+0x1c0>)
 8000542:	601a      	str	r2, [r3, #0]
	intr2ssTimer4_sh  = 	xSemaphoreCreateBinary();
 8000544:	2203      	movs	r2, #3
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f006 fbf4 	bl	8006d36 <xQueueGenericCreate>
 800054e:	0002      	movs	r2, r0
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <launch_comm+0x1c4>)
 8000552:	601a      	str	r2, [r3, #0]
	intr2ssTimer5_sh  = 	xSemaphoreCreateBinary();
 8000554:	2203      	movs	r2, #3
 8000556:	2100      	movs	r1, #0
 8000558:	2001      	movs	r0, #1
 800055a:	f006 fbec 	bl	8006d36 <xQueueGenericCreate>
 800055e:	0002      	movs	r2, r0
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <launch_comm+0x1c8>)
 8000562:	601a      	str	r2, [r3, #0]
	intr2ssHMI_qh = 		xQueueCreate(1, sizeof(char));
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	2001      	movs	r0, #1
 800056a:	f006 fbe4 	bl	8006d36 <xQueueGenericCreate>
 800056e:	0002      	movs	r2, r0
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <launch_comm+0x1cc>)
 8000572:	601a      	str	r2, [r3, #0]
	intr2ssFlow_qh = 		xQueueCreate(1, sizeof(char));
 8000574:	2200      	movs	r2, #0
 8000576:	2101      	movs	r1, #1
 8000578:	2001      	movs	r0, #1
 800057a:	f006 fbdc 	bl	8006d36 <xQueueGenericCreate>
 800057e:	0002      	movs	r2, r0
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <launch_comm+0x1d0>)
 8000582:	601a      	str	r2, [r3, #0]
	intr2ssUart_qh = 		xQueueCreate(1, sizeof(char));
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	2001      	movs	r0, #1
 800058a:	f006 fbd4 	bl	8006d36 <xQueueGenericCreate>
 800058e:	0002      	movs	r2, r0
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <launch_comm+0x1d4>)
 8000592:	601a      	str	r2, [r3, #0]

	//== test queues
//	intr2ssDS_qh = 		xQueueCreate(2, sizeof(char));
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	2000044c 	.word	0x2000044c
 80005a0:	20000450 	.word	0x20000450
 80005a4:	20000454 	.word	0x20000454
 80005a8:	20000458 	.word	0x20000458
 80005ac:	2000045c 	.word	0x2000045c
 80005b0:	20000460 	.word	0x20000460
 80005b4:	20000464 	.word	0x20000464
 80005b8:	20000468 	.word	0x20000468
 80005bc:	2000046c 	.word	0x2000046c
 80005c0:	20000470 	.word	0x20000470
 80005c4:	20000474 	.word	0x20000474
 80005c8:	20000478 	.word	0x20000478
 80005cc:	2000047c 	.word	0x2000047c
 80005d0:	20000480 	.word	0x20000480
 80005d4:	20000484 	.word	0x20000484
 80005d8:	20000494 	.word	0x20000494
 80005dc:	20000498 	.word	0x20000498
 80005e0:	2000049c 	.word	0x2000049c
 80005e4:	200004a0 	.word	0x200004a0
 80005e8:	200004a4 	.word	0x200004a4
 80005ec:	20000488 	.word	0x20000488
 80005f0:	2000048c 	.word	0x2000048c
 80005f4:	20000490 	.word	0x20000490

080005f8 <init_hw>:
#elif PLATFORM == NUCLEO_G070RB
#include "nsprs_platform_nucleo_g070rb.h"
#endif

//all the hw initializations
void init_hw(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	_platform_init_hw();
 80005fc:	f000 fab0 	bl	8000b60 <_platform_init_hw>
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <timer_readFreqKHz>:

//timer functions
unsigned int timer_readFreqKHz(int timer_id){
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	return _platform_timer_readFreqKHz(timer_id);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	0018      	movs	r0, r3
 8000612:	f000 f8b7 	bl	8000784 <_platform_timer_readFreqKHz>
 8000616:	0003      	movs	r3, r0
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}

08000620 <timer_count>:
}

void timer_stopReset(int timer_id){
	_platform_timer_stopReset(timer_id);
}
void timer_count(int timer_id, unsigned int count_val){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	_platform_timer_count(timer_id, count_val);
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f8bb 	bl	80007ac <_platform_timer_count>
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b002      	add	sp, #8
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b7f      	cmp	r3, #127	; 0x7f
 8000652:	d809      	bhi.n	8000668 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	001a      	movs	r2, r3
 800065a:	231f      	movs	r3, #31
 800065c:	401a      	ands	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_EnableIRQ+0x30>)
 8000660:	2101      	movs	r1, #1
 8000662:	4091      	lsls	r1, r2
 8000664:	000a      	movs	r2, r1
 8000666:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b002      	add	sp, #8
 800066e:	bd80      	pop	{r7, pc}
 8000670:	e000e100 	.word	0xe000e100

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	0002      	movs	r2, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b7f      	cmp	r3, #127	; 0x7f
 8000688:	d828      	bhi.n	80006dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800068a:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <__NVIC_SetPriority+0xd4>)
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b25b      	sxtb	r3, r3
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	33c0      	adds	r3, #192	; 0xc0
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	589b      	ldr	r3, [r3, r2]
 800069a:	1dfa      	adds	r2, r7, #7
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	0011      	movs	r1, r2
 80006a0:	2203      	movs	r2, #3
 80006a2:	400a      	ands	r2, r1
 80006a4:	00d2      	lsls	r2, r2, #3
 80006a6:	21ff      	movs	r1, #255	; 0xff
 80006a8:	4091      	lsls	r1, r2
 80006aa:	000a      	movs	r2, r1
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	401a      	ands	r2, r3
 80006b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	019b      	lsls	r3, r3, #6
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	401a      	ands	r2, r3
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	0018      	movs	r0, r3
 80006c0:	2303      	movs	r3, #3
 80006c2:	4003      	ands	r3, r0
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c8:	481f      	ldr	r0, [pc, #124]	; (8000748 <__NVIC_SetPriority+0xd4>)
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	430a      	orrs	r2, r1
 80006d4:	33c0      	adds	r3, #192	; 0xc0
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006da:	e031      	b.n	8000740 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <__NVIC_SetPriority+0xd8>)
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	0019      	movs	r1, r3
 80006e4:	230f      	movs	r3, #15
 80006e6:	400b      	ands	r3, r1
 80006e8:	3b08      	subs	r3, #8
 80006ea:	089b      	lsrs	r3, r3, #2
 80006ec:	3306      	adds	r3, #6
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	18d3      	adds	r3, r2, r3
 80006f2:	3304      	adds	r3, #4
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1dfa      	adds	r2, r7, #7
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	0011      	movs	r1, r2
 80006fc:	2203      	movs	r2, #3
 80006fe:	400a      	ands	r2, r1
 8000700:	00d2      	lsls	r2, r2, #3
 8000702:	21ff      	movs	r1, #255	; 0xff
 8000704:	4091      	lsls	r1, r2
 8000706:	000a      	movs	r2, r1
 8000708:	43d2      	mvns	r2, r2
 800070a:	401a      	ands	r2, r3
 800070c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	22ff      	movs	r2, #255	; 0xff
 8000714:	401a      	ands	r2, r3
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	0018      	movs	r0, r3
 800071c:	2303      	movs	r3, #3
 800071e:	4003      	ands	r3, r0
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <__NVIC_SetPriority+0xd8>)
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	001c      	movs	r4, r3
 800072c:	230f      	movs	r3, #15
 800072e:	4023      	ands	r3, r4
 8000730:	3b08      	subs	r3, #8
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	430a      	orrs	r2, r1
 8000736:	3306      	adds	r3, #6
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	18c3      	adds	r3, r0, r3
 800073c:	3304      	adds	r3, #4
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b003      	add	sp, #12
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_SetVector>:
           If VTOR is not present address 0 must be mapped to SRAM.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	0002      	movs	r2, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	701a      	strb	r2, [r3, #0]
#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  uint32_t vectors = SCB->VTOR;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <__NVIC_SetVector+0x30>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	60fb      	str	r3, [r7, #12]
#else
  uint32_t vectors = 0x0U;
#endif
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25b      	sxtb	r3, r3
 800076a:	3310      	adds	r3, #16
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	001a      	movs	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	18d3      	adds	r3, r2, r3
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	601a      	str	r2, [r3, #0]
  /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bd80      	pop	{r7, pc}
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <_platform_timer_readFreqKHz>:
}

//======================================================
//============= Timers ==============================
//======================================================
unsigned int _platform_timer_readFreqKHz(timer_id){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	unsigned int freq_khz;
	if (timer_id == 1){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <_platform_timer_readFreqKHz+0x14>
		freq_khz = 100;	//todo: wrong, its 0.1
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e004      	b.n	80007a2 <_platform_timer_readFreqKHz+0x1e>
	}
	else if(timer_id == 2){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d101      	bne.n	80007a2 <_platform_timer_readFreqKHz+0x1e>
		freq_khz = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
	}
	return freq_khz;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b004      	add	sp, #16
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_platform_timer_count>:
		HAL_TIM_Base_Stop_IT(&htim7); //stop
		__TIM7_CLK_DISABLE();
	}
}

void _platform_timer_count(int timer_id, unsigned int count_val){ //todo: change higher level function, put all the conversions here in low level :)
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	if (timer_id == 1){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d116      	bne.n	80007ea <_platform_timer_count+0x3e>
		__TIM6_CLK_ENABLE();
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <_platform_timer_count+0x78>)
 80007be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <_platform_timer_count+0x78>)
 80007c2:	2110      	movs	r1, #16
 80007c4:	430a      	orrs	r2, r1
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <_platform_timer_count+0x78>)
 80007ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007cc:	2210      	movs	r2, #16
 80007ce:	4013      	ands	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
		TIM6->CNT = 0;	//reset
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <_platform_timer_count+0x7c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
		TIM6->ARR = count_val; //set it up
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <_platform_timer_count+0x7c>)
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start_IT(&htim6); //start it
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <_platform_timer_count+0x80>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f004 feea 	bl	80055bc <HAL_TIM_Base_Start_IT>
		__TIM7_CLK_ENABLE();
		TIM7->CNT = 0;	//reset
		TIM7->ARR = count_val; //set it up
		HAL_TIM_Base_Start_IT(&htim7); //start it
	}
}
 80007e8:	e018      	b.n	800081c <_platform_timer_count+0x70>
	else if(timer_id == 2){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d115      	bne.n	800081c <_platform_timer_count+0x70>
		__TIM7_CLK_ENABLE();
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <_platform_timer_count+0x78>)
 80007f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <_platform_timer_count+0x78>)
 80007f6:	2120      	movs	r1, #32
 80007f8:	430a      	orrs	r2, r1
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <_platform_timer_count+0x78>)
 80007fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000800:	2220      	movs	r2, #32
 8000802:	4013      	ands	r3, r2
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
		TIM7->CNT = 0;	//reset
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <_platform_timer_count+0x84>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM7->ARR = count_val; //set it up
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_platform_timer_count+0x84>)
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start_IT(&htim7); //start it
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <_platform_timer_count+0x88>)
 8000816:	0018      	movs	r0, r3
 8000818:	f004 fed0 	bl	80055bc <HAL_TIM_Base_Start_IT>
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b004      	add	sp, #16
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	40001000 	.word	0x40001000
 800082c:	200087b8 	.word	0x200087b8
 8000830:	40001400 	.word	0x40001400
 8000834:	20008894 	.word	0x20008894

08000838 <HAL_TIM_PeriodElapsedCallback>:
//======================================================
//============= Interrupt Callbacks ====================
//======================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
// if (htim->Instance == TIM1) {
//   HAL_IncTick();
// }
 if (htim->Instance == TIM6){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d111      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x36>
	 if (data_timer.en == 1){		//now it should check before putting in ready
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d10d      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x36>
		 BaseType_t xYieldRequired = xTaskResumeFromISR(ssTimer_task_handler);	//changed
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	0018      	movs	r0, r3
 8000858:	f007 f87c 	bl	8007954 <xTaskResumeFromISR>
 800085c:	0003      	movs	r3, r0
 800085e:	60fb      	str	r3, [r7, #12]
		 portYIELD_FROM_ISR(xYieldRequired);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <HAL_TIM_PeriodElapsedCallback+0x36>
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0552      	lsls	r2, r2, #21
 800086c:	601a      	str	r2, [r3, #0]
	 }
 }
 if (htim->Instance == TIM7){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x4e>
	 xSemaphoreGive(intr2ssTimer2_sh);
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	2300      	movs	r3, #0
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	f006 faa8 	bl	8006dd6 <xQueueGenericSend>
 }
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b004      	add	sp, #16
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40001000 	.word	0x40001000
 8000894:	2000038c 	.word	0x2000038c
 8000898:	200085e0 	.word	0x200085e0
 800089c:	e000ed04 	.word	0xe000ed04
 80008a0:	40001400 	.word	0x40001400
 80008a4:	20000498 	.word	0x20000498

080008a8 <EXTI0_1_IRQHandler>:



void EXTI0_1_IRQHandler(void) // interrupt routine
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	//TODO: I should put xYieldRequired check for everything
	//Nespresso
	char p_data;
	  if ((EXTI->RPR1 & (in_nespresso_Pin)) != 0x00u){
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <EXTI0_1_IRQHandler+0x5c>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2201      	movs	r2, #1
 80008b2:	4013      	ands	r3, r2
 80008b4:	d00f      	beq.n	80008d6 <EXTI0_1_IRQHandler+0x2e>
		EXTI->RPR1 = (in_nespresso_Pin);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <EXTI0_1_IRQHandler+0x5c>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
		// printf("nsprs release\r\n");
		if (data_hmi.en == 1){
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <EXTI0_1_IRQHandler+0x60>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d11c      	bne.n	80008fe <EXTI0_1_IRQHandler+0x56>
			data_hmi.data_from_isr = 1<<NSPRS_RELEASED;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <EXTI0_1_IRQHandler+0x60>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_nsprs_task_handler);
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <EXTI0_1_IRQHandler+0x64>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f007 f840 	bl	8007954 <xTaskResumeFromISR>
			xTaskResumeFromISR(ssHMI_b_nsprs_task_handler);
		}
	  }


}
 80008d4:	e013      	b.n	80008fe <EXTI0_1_IRQHandler+0x56>
	  else if ((EXTI->FPR1 & (in_nespresso_Pin)) != 0x00u){
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <EXTI0_1_IRQHandler+0x5c>)
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	d00e      	beq.n	80008fe <EXTI0_1_IRQHandler+0x56>
		EXTI->FPR1 = (in_nespresso_Pin);
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <EXTI0_1_IRQHandler+0x5c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	611a      	str	r2, [r3, #16]
		if (data_hmi.en == 1){
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <EXTI0_1_IRQHandler+0x60>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d107      	bne.n	80008fe <EXTI0_1_IRQHandler+0x56>
			data_hmi.data_from_isr = 1<<NSPRS_PRESSED;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <EXTI0_1_IRQHandler+0x60>)
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_nsprs_task_handler);
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <EXTI0_1_IRQHandler+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	0018      	movs	r0, r3
 80008fa:	f007 f82b 	bl	8007954 <xTaskResumeFromISR>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021800 	.word	0x40021800
 8000908:	2000039c 	.word	0x2000039c
 800090c:	200084a4 	.word	0x200084a4

08000910 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) // interrupt routine
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	//espresso
	char p_data;
	  if ((EXTI->RPR1 & (in_corto_Pin)) != 0x00u){
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	2204      	movs	r2, #4
 800091a:	4013      	ands	r3, r2
 800091c:	d00f      	beq.n	800093e <EXTI2_3_IRQHandler+0x2e>
		EXTI->RPR1 = (in_corto_Pin);
 800091e:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 8000920:	2204      	movs	r2, #4
 8000922:	60da      	str	r2, [r3, #12]
		// printf("esprs r\r\n");
		if (data_hmi.en == 1){
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d11c      	bne.n	8000966 <EXTI2_3_IRQHandler+0x56>
			data_hmi.data_from_isr = 1<<ESPRS_RELEASED;
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 800092e:	2202      	movs	r2, #2
 8000930:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_esprs_task_handler);
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <EXTI2_3_IRQHandler+0xb8>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	0018      	movs	r0, r3
 8000938:	f007 f80c 	bl	8007954 <xTaskResumeFromISR>
 800093c:	e013      	b.n	8000966 <EXTI2_3_IRQHandler+0x56>
		}

	  }
	  else if ((EXTI->FPR1 & (in_corto_Pin)) != 0x00u){
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	2204      	movs	r2, #4
 8000944:	4013      	ands	r3, r2
 8000946:	d00e      	beq.n	8000966 <EXTI2_3_IRQHandler+0x56>
		EXTI->FPR1 = (in_corto_Pin);
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 800094a:	2204      	movs	r2, #4
 800094c:	611a      	str	r2, [r3, #16]
		// printf("esprs p\r\n");
		if (data_hmi.en == 1){
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d107      	bne.n	8000966 <EXTI2_3_IRQHandler+0x56>
			data_hmi.data_from_isr = 1<<ESPRS_PRESSED;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 8000958:	2201      	movs	r2, #1
 800095a:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_esprs_task_handler);
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <EXTI2_3_IRQHandler+0xb8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	0018      	movs	r0, r3
 8000962:	f006 fff7 	bl	8007954 <xTaskResumeFromISR>
		}
	  }
//LUNGO
	  if ((EXTI->RPR1 & (in_lungo_Pin)) != 0x00u){
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	2208      	movs	r2, #8
 800096c:	4013      	ands	r3, r2
 800096e:	d00f      	beq.n	8000990 <EXTI2_3_IRQHandler+0x80>
		EXTI->RPR1 = (in_lungo_Pin);
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 8000972:	2208      	movs	r2, #8
 8000974:	60da      	str	r2, [r3, #12]
		// printf("lungo r\r\n");
		if (data_hmi.en == 1){
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d11c      	bne.n	80009b8 <EXTI2_3_IRQHandler+0xa8>
			data_hmi.data_from_isr = 1<<LUNGO_RELEASED;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 8000980:	2208      	movs	r2, #8
 8000982:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_lungo_task_handler);
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <EXTI2_3_IRQHandler+0xbc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	0018      	movs	r0, r3
 800098a:	f006 ffe3 	bl	8007954 <xTaskResumeFromISR>
			data_hmi.data_from_isr = 1<<LUNGO_PRESSED;
			xTaskResumeFromISR(ssHMI_b_lungo_task_handler);
		}
	  }

}
 800098e:	e013      	b.n	80009b8 <EXTI2_3_IRQHandler+0xa8>
	  else if ((EXTI->FPR1 & (in_lungo_Pin)) != 0x00u){
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2208      	movs	r2, #8
 8000996:	4013      	ands	r3, r2
 8000998:	d00e      	beq.n	80009b8 <EXTI2_3_IRQHandler+0xa8>
		EXTI->FPR1 = (in_lungo_Pin);
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <EXTI2_3_IRQHandler+0xb0>)
 800099c:	2208      	movs	r2, #8
 800099e:	611a      	str	r2, [r3, #16]
		if (data_hmi.en == 1){
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d107      	bne.n	80009b8 <EXTI2_3_IRQHandler+0xa8>
			data_hmi.data_from_isr = 1<<LUNGO_PRESSED;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <EXTI2_3_IRQHandler+0xb4>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_lungo_task_handler);
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <EXTI2_3_IRQHandler+0xbc>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	f006 ffce 	bl	8007954 <xTaskResumeFromISR>
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40021800 	.word	0x40021800
 80009c4:	2000039c 	.word	0x2000039c
 80009c8:	20008548 	.word	0x20008548
 80009cc:	20008568 	.word	0x20008568

080009d0 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void) // interrupt routine
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	char p_data;
	  if ((EXTI->RPR1 & (in_line_Pin)) != 0x00u){
 80009d6:	4b53      	ldr	r3, [pc, #332]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	4013      	ands	r3, r2
 80009de:	d027      	beq.n	8000a30 <EXTI4_15_IRQHandler+0x60>
		EXTI->RPR1 = (in_line_Pin);
 80009e0:	4b50      	ldr	r3, [pc, #320]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	60da      	str	r2, [r3, #12]
		// p_data = 1;
		// xQueueOverwrite(intr2ssTrgPump_qh, &(p_data));
		// xQueueOverwrite(intr2ssTrgHeater_qh, &(p_data));
		printf("zc: rise\r\n");
 80009e6:	4b50      	ldr	r3, [pc, #320]	; (8000b28 <EXTI4_15_IRQHandler+0x158>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f008 fb2d 	bl	8009048 <puts>
		if(data_trgpump.en == 1){
 80009ee:	4b4f      	ldr	r3, [pc, #316]	; (8000b2c <EXTI4_15_IRQHandler+0x15c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d107      	bne.n	8000a06 <EXTI4_15_IRQHandler+0x36>
			data_trgpump.zc_edge = 1;
 80009f6:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <EXTI4_15_IRQHandler+0x15c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	705a      	strb	r2, [r3, #1]
			xTaskResumeFromISR(ssTrgPump_task_handler);
 80009fc:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <EXTI4_15_IRQHandler+0x160>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	0018      	movs	r0, r3
 8000a02:	f006 ffa7 	bl	8007954 <xTaskResumeFromISR>
		}
		printf("zc: rise after pump\r\n");
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <EXTI4_15_IRQHandler+0x164>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f008 fb1d 	bl	8009048 <puts>
		if(data_trgheater.en == 1){
 8000a0e:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <EXTI4_15_IRQHandler+0x168>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <EXTI4_15_IRQHandler+0x56>
			data_trgheater.zc_edge = 1;
 8000a16:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <EXTI4_15_IRQHandler+0x168>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	705a      	strb	r2, [r3, #1]
			xTaskResumeFromISR(ssTrgHeater_task_handler);
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <EXTI4_15_IRQHandler+0x16c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	0018      	movs	r0, r3
 8000a22:	f006 ff97 	bl	8007954 <xTaskResumeFromISR>
		}
		printf("zc: rise after heater\r\n");
 8000a26:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <EXTI4_15_IRQHandler+0x170>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f008 fb0d 	bl	8009048 <puts>
 8000a2e:	e02b      	b.n	8000a88 <EXTI4_15_IRQHandler+0xb8>

	  }
	  else if ((EXTI->FPR1 & (in_line_Pin)) != 0x00u){
 8000a30:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	4013      	ands	r3, r2
 8000a38:	d026      	beq.n	8000a88 <EXTI4_15_IRQHandler+0xb8>
		EXTI->FPR1 = (in_line_Pin);
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	611a      	str	r2, [r3, #16]
		// p_data = 0;
		printf("zc: fall\r\n");
 8000a40:	4b40      	ldr	r3, [pc, #256]	; (8000b44 <EXTI4_15_IRQHandler+0x174>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f008 fb00 	bl	8009048 <puts>
		if(data_trgpump.en == 1){
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <EXTI4_15_IRQHandler+0x15c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d107      	bne.n	8000a60 <EXTI4_15_IRQHandler+0x90>
			data_trgpump.zc_edge = 0;
 8000a50:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <EXTI4_15_IRQHandler+0x15c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	705a      	strb	r2, [r3, #1]
			xTaskResumeFromISR(ssTrgPump_task_handler);
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <EXTI4_15_IRQHandler+0x160>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f006 ff7a 	bl	8007954 <xTaskResumeFromISR>
		}
		printf("zc: fall after pump\r\n");
 8000a60:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <EXTI4_15_IRQHandler+0x178>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f008 faf0 	bl	8009048 <puts>
		if(data_trgheater.en == 1){
 8000a68:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <EXTI4_15_IRQHandler+0x168>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d107      	bne.n	8000a80 <EXTI4_15_IRQHandler+0xb0>
			data_trgheater.zc_edge = 0;
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <EXTI4_15_IRQHandler+0x168>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	705a      	strb	r2, [r3, #1]
			xTaskResumeFromISR(ssTrgHeater_task_handler);
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <EXTI4_15_IRQHandler+0x16c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f006 ff6a 	bl	8007954 <xTaskResumeFromISR>
		}
		printf("zc: fall after heater\r\n");
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <EXTI4_15_IRQHandler+0x17c>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f008 fae0 	bl	8009048 <puts>
	  }


	  if ((EXTI->RPR1 & (in_fm_Pin)) != 0x00u){
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2240      	movs	r2, #64	; 0x40
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d00c      	beq.n	8000aac <EXTI4_15_IRQHandler+0xdc>
		EXTI->RPR1 = (in_fm_Pin);
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000a94:	2240      	movs	r2, #64	; 0x40
 8000a96:	60da      	str	r2, [r3, #12]
		if (data_flow.en == 1){		//now it should check before putting in ready
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <EXTI4_15_IRQHandler+0x180>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d110      	bne.n	8000ac2 <EXTI4_15_IRQHandler+0xf2>
			xTaskResumeFromISR(ssFlow_task_handler); //p_data = 1; xQueueOverwrite(intr2ssFlow_qh, &(p_data));	//changed
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <EXTI4_15_IRQHandler+0x184>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f006 ff55 	bl	8007954 <xTaskResumeFromISR>
 8000aaa:	e00a      	b.n	8000ac2 <EXTI4_15_IRQHandler+0xf2>
		}
	  }
	  else if ((EXTI->FPR1 & (in_fm_Pin)) != 0x00u){
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	2240      	movs	r2, #64	; 0x40
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d005      	beq.n	8000ac2 <EXTI4_15_IRQHandler+0xf2>
		EXTI->FPR1 = (in_fm_Pin);
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000ab8:	2240      	movs	r2, #64	; 0x40
 8000aba:	611a      	str	r2, [r3, #16]
		p_data = 0;
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
//		xQueueOverwrite(intr2ssFlow_qh, &(p_data));
	  }

	  if ((EXTI->RPR1 & (in_hot_water_Pin)) != 0x00u){
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	d010      	beq.n	8000af0 <EXTI4_15_IRQHandler+0x120>
		EXTI->RPR1 = (in_hot_water_Pin);
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	60da      	str	r2, [r3, #12]
		// printf("hw r\r\n");
		if (data_hmi.en == 1){
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <EXTI4_15_IRQHandler+0x188>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d11e      	bne.n	8000b1c <EXTI4_15_IRQHandler+0x14c>
			data_hmi.data_from_isr = 1<<HW_RELEASED;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <EXTI4_15_IRQHandler+0x188>)
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_hw_task_handler);
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <EXTI4_15_IRQHandler+0x18c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f006 ff33 	bl	8007954 <xTaskResumeFromISR>
			data_hmi.data_from_isr = 1<<HW_PRESSED;
			xTaskResumeFromISR(ssHMI_b_hw_task_handler);
		}
	  }

}
 8000aee:	e015      	b.n	8000b1c <EXTI4_15_IRQHandler+0x14c>
	  else if ((EXTI->FPR1 & (in_hot_water_Pin)) != 0x00u){
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	d00f      	beq.n	8000b1c <EXTI4_15_IRQHandler+0x14c>
		EXTI->FPR1 = (in_hot_water_Pin);
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <EXTI4_15_IRQHandler+0x154>)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	0052      	lsls	r2, r2, #1
 8000b02:	611a      	str	r2, [r3, #16]
		if (data_hmi.en == 1){
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <EXTI4_15_IRQHandler+0x188>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d107      	bne.n	8000b1c <EXTI4_15_IRQHandler+0x14c>
			data_hmi.data_from_isr = 1<<HW_PRESSED;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <EXTI4_15_IRQHandler+0x188>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	75da      	strb	r2, [r3, #23]
			xTaskResumeFromISR(ssHMI_b_hw_task_handler);
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <EXTI4_15_IRQHandler+0x18c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f006 ff1c 	bl	8007954 <xTaskResumeFromISR>
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021800 	.word	0x40021800
 8000b28:	08009f7c 	.word	0x08009f7c
 8000b2c:	200003b4 	.word	0x200003b4
 8000b30:	200085ac 	.word	0x200085ac
 8000b34:	08009f88 	.word	0x08009f88
 8000b38:	200003b8 	.word	0x200003b8
 8000b3c:	200085b0 	.word	0x200085b0
 8000b40:	08009fa0 	.word	0x08009fa0
 8000b44:	08009fb8 	.word	0x08009fb8
 8000b48:	08009fc4 	.word	0x08009fc4
 8000b4c:	08009fdc 	.word	0x08009fdc
 8000b50:	20000380 	.word	0x20000380
 8000b54:	200085f8 	.word	0x200085f8
 8000b58:	2000039c 	.word	0x2000039c
 8000b5c:	20008570 	.word	0x20008570

08000b60 <_platform_init_hw>:

//======================================================
//============= HW Initialization ======================
//======================================================

void _platform_init_hw(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	 HAL_Init();
 8000b64:	f002 fe30 	bl	80037c8 <HAL_Init>
	 SystemClock_Config();
 8000b68:	f000 f8bc 	bl	8000ce4 <SystemClock_Config>
	  MX_GPIO_Init();
 8000b6c:	f000 f810 	bl	8000b90 <MX_GPIO_Init>
	  MX_TIM6_Init();
 8000b70:	f000 f9f0 	bl	8000f54 <MX_TIM6_Init>
	  MX_TIM7_Init();
 8000b74:	f000 fa2a 	bl	8000fcc <MX_TIM7_Init>
	  MX_ADC1_Init();
 8000b78:	f000 fa66 	bl	8001048 <MX_ADC1_Init>
	  MX_USART1_UART_Init();
 8000b7c:	f000 f91a 	bl	8000db4 <MX_USART1_UART_Init>
	  MX_USART2_UART_Init();
 8000b80:	f000 f966 	bl	8000e50 <MX_USART2_UART_Init>
	  MX_USART3_UART_Init();
 8000b84:	f000 f9b2 	bl	8000eec <MX_USART3_UART_Init>
//	  RetargetInit(&huart2);
//	  HAL_UART_Receive_IT (&huart3, &UART_rxChar, 1); //todo: remove?!

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	2414      	movs	r4, #20
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2314      	movs	r3, #20
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f008 f9bc 	bl	8008f1e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000baa:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bac:	2104      	movs	r1, #4
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc2:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2220      	movs	r2, #32
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bda:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	430a      	orrs	r2, r1
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2201      	movs	r2, #1
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf2:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f003 fe1e 	bl	8004850 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = in_nespresso_Pin|in_corto_Pin|in_lungo_Pin|in_hot_water_Pin;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	220e      	movs	r2, #14
 8000c18:	32ff      	adds	r2, #255	; 0xff
 8000c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <MX_GPIO_Init+0x140>)
 8000c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2201      	movs	r2, #1
 8000c26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0x144>)
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	0010      	movs	r0, r2
 8000c30:	f003 fcaa 	bl	8004588 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin =  in_fm_Pin|in_line_Pin;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	22c0      	movs	r2, #192	; 0xc0
 8000c38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	4a24      	ldr	r2, [pc, #144]	; (8000cd0 <MX_GPIO_Init+0x140>)
 8000c3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2202      	movs	r2, #2
 8000c44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0x144>)
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	0010      	movs	r0, r2
 8000c4e:	f003 fc9b 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c52:	0021      	movs	r1, r4
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2220      	movs	r2, #32
 8000c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	187a      	adds	r2, r7, r1
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f003 fc87 	bl	8004588 <HAL_GPIO_Init>


  NVIC_SetPriority(EXTI4_15_IRQn, 3);
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	2007      	movs	r0, #7
 8000c7e:	f7ff fcf9 	bl	8000674 <__NVIC_SetPriority>
  NVIC_SetVector(EXTI4_15_IRQn, (uint32_t)&EXTI4_15_IRQHandler);
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_GPIO_Init+0x148>)
 8000c84:	0019      	movs	r1, r3
 8000c86:	2007      	movs	r0, #7
 8000c88:	f7ff fd62 	bl	8000750 <__NVIC_SetVector>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c8c:	2007      	movs	r0, #7
 8000c8e:	f7ff fcd7 	bl	8000640 <__NVIC_EnableIRQ>

  NVIC_SetPriority(EXTI2_3_IRQn, 3);
 8000c92:	2103      	movs	r1, #3
 8000c94:	2006      	movs	r0, #6
 8000c96:	f7ff fced 	bl	8000674 <__NVIC_SetPriority>
  NVIC_SetVector(EXTI2_3_IRQn, (uint32_t)&EXTI2_3_IRQHandler);
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_GPIO_Init+0x14c>)
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	2006      	movs	r0, #6
 8000ca0:	f7ff fd56 	bl	8000750 <__NVIC_SetVector>
  NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000ca4:	2006      	movs	r0, #6
 8000ca6:	f7ff fccb 	bl	8000640 <__NVIC_EnableIRQ>

  NVIC_SetPriority(EXTI0_1_IRQn, 3);
 8000caa:	2103      	movs	r1, #3
 8000cac:	2005      	movs	r0, #5
 8000cae:	f7ff fce1 	bl	8000674 <__NVIC_SetPriority>
  NVIC_SetVector(EXTI0_1_IRQn, (uint32_t)&EXTI0_1_IRQHandler);
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_GPIO_Init+0x150>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	2005      	movs	r0, #5
 8000cb8:	f7ff fd4a 	bl	8000750 <__NVIC_SetVector>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f7ff fcbf 	bl	8000640 <__NVIC_EnableIRQ>

}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b00b      	add	sp, #44	; 0x2c
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	10310000 	.word	0x10310000
 8000cd4:	50000800 	.word	0x50000800
 8000cd8:	080009d1 	.word	0x080009d1
 8000cdc:	08000911 	.word	0x08000911
 8000ce0:	080008a9 	.word	0x080008a9

08000ce4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b099      	sub	sp, #100	; 0x64
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	242c      	movs	r4, #44	; 0x2c
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2334      	movs	r3, #52	; 0x34
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f008 f912 	bl	8008f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfa:	231c      	movs	r3, #28
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2310      	movs	r3, #16
 8000d02:	001a      	movs	r2, r3
 8000d04:	2100      	movs	r1, #0
 8000d06:	f008 f90a 	bl	8008f1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0a:	003b      	movs	r3, r7
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	231c      	movs	r3, #28
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f008 f903 	bl	8008f1e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f003 fdb5 	bl	800488c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2202      	movs	r2, #2
 8000d26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	0052      	lsls	r2, r2, #1
 8000d2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2240      	movs	r2, #64	; 0x40
 8000d3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f003 fded 	bl	8004924 <HAL_RCC_OscConfig>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 f9f9 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	211c      	movs	r1, #28
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2207      	movs	r2, #7
 8000d58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2100      	movs	r1, #0
 8000d70:	0018      	movs	r0, r3
 8000d72:	f004 f8ed 	bl	8004f50 <HAL_RCC_ClockConfig>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d7a:	f000 f9e3 	bl	8001144 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d7e:	003b      	movs	r3, r7
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d82:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d90:	003b      	movs	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	003b      	movs	r3, r7
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f004 fa83 	bl	80052a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000da2:	f000 f9cf 	bl	8001144 <Error_Handler>
  }
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b019      	add	sp, #100	; 0x64
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	00004003 	.word	0x00004003

08000db4 <MX_USART1_UART_Init>:



static void MX_USART1_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_USART1_UART_Init+0x98>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dc0:	22e1      	movs	r2, #225	; 0xe1
 8000dc2:	0252      	lsls	r2, r2, #9
 8000dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f004 fe7a 	bl	8005af8 <HAL_UART_Init>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e08:	f000 f99c 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	0018      	movs	r0, r3
 8000e12:	f005 fda7 	bl	8006964 <HAL_UARTEx_SetTxFifoThreshold>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e1a:	f000 f993 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f005 fdde 	bl	80069e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f000 f98a 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <MX_USART1_UART_Init+0x94>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f005 fd5c 	bl	80068f0 <HAL_UARTEx_DisableFifoMode>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e3c:	f000 f982 	bl	8001144 <Error_Handler>
  }


}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20008724 	.word	0x20008724
 8000e4c:	40013800 	.word	0x40013800

08000e50 <MX_USART2_UART_Init>:
static void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e56:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <MX_USART2_UART_Init+0x98>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e5c:	22e1      	movs	r2, #225	; 0xe1
 8000e5e:	0252      	lsls	r2, r2, #9
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f004 fe2c 	bl	8005af8 <HAL_UART_Init>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ea4:	f000 f94e 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	0018      	movs	r0, r3
 8000eae:	f005 fd59 	bl	8006964 <HAL_UARTEx_SetTxFifoThreshold>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000eb6:	f000 f945 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f005 fd90 	bl	80069e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec8:	f000 f93c 	bl	8001144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MX_USART2_UART_Init+0x94>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f005 fd0e 	bl	80068f0 <HAL_UARTEx_DisableFifoMode>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed8:	f000 f934 	bl	8001144 <Error_Handler>
  }

}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20008804 	.word	0x20008804
 8000ee8:	40004400 	.word	0x40004400

08000eec <MX_USART3_UART_Init>:
static void MX_USART3_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <MX_USART3_UART_Init+0x64>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000ef8:	22e1      	movs	r2, #225	; 0xe1
 8000efa:	0252      	lsls	r2, r2, #9
 8000efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <MX_USART3_UART_Init+0x60>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f004 fdde 	bl	8005af8 <HAL_UART_Init>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f40:	f000 f900 	bl	8001144 <Error_Handler>
  }

}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20008630 	.word	0x20008630
 8000f50:	40004800 	.word	0x40004800

08000f54 <MX_TIM6_Init>:



static void MX_TIM6_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	230c      	movs	r3, #12
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f007 ffdb 	bl	8008f1e <memset>
  htim6.Instance = TIM6;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <MX_TIM6_Init+0x70>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 159;		//100Khz
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000f70:	229f      	movs	r2, #159	; 0x9f
 8000f72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_TIM6_Init+0x74>)
 8000f7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f004 fabf 	bl	800550c <HAL_TIM_Base_Init>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f92:	f000 f8d7 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3a      	adds	r2, r7, #4
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_TIM6_Init+0x6c>)
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f004 fd25 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000fb2:	f000 f8c7 	bl	8001144 <Error_Handler>
  }

}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b004      	add	sp, #16
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	200087b8 	.word	0x200087b8
 8000fc4:	40001000 	.word	0x40001000
 8000fc8:	0000ffff 	.word	0x0000ffff

08000fcc <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f007 ff9f 	bl	8008f1e <memset>
  htim7.Instance = TIM7;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM7_Init+0x6c>)
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <MX_TIM7_Init+0x70>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15999;		//1KHz
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_TIM7_Init+0x6c>)
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <MX_TIM7_Init+0x74>)
 8000fea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_TIM7_Init+0x6c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_TIM7_Init+0x6c>)
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <MX_TIM7_Init+0x78>)
 8000ff6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_TIM7_Init+0x6c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_TIM7_Init+0x6c>)
 8001000:	0018      	movs	r0, r3
 8001002:	f004 fa83 	bl	800550c <HAL_TIM_Base_Init>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800100a:	f000 f89b 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800101a:	1d3a      	adds	r2, r7, #4
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_TIM7_Init+0x6c>)
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f004 fce9 	bl	80059f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800102a:	f000 f88b 	bl	8001144 <Error_Handler>
  }

}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	20008894 	.word	0x20008894
 800103c:	40001400 	.word	0x40001400
 8001040:	00003e7f 	.word	0x00003e7f
 8001044:	0000ffff 	.word	0x0000ffff

08001048 <MX_ADC1_Init>:


static void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	0018      	movs	r0, r3
 8001052:	230c      	movs	r3, #12
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f007 ff61 	bl	8008f1e <memset>

  hadc1.Instance = ADC1;
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_ADC1_Init+0xcc>)
 800105e:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <MX_ADC1_Init+0xd0>)
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <MX_ADC1_Init+0xcc>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	05d2      	lsls	r2, r2, #23
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_ADC1_Init+0xcc>)
 800106c:	2208      	movs	r2, #8
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_ADC1_Init+0xcc>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <MX_ADC1_Init+0xcc>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC1_Init+0xcc>)
 800107e:	2204      	movs	r2, #4
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <MX_ADC1_Init+0xcc>)
 8001084:	2200      	movs	r2, #0
 8001086:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_ADC1_Init+0xcc>)
 800108a:	2200      	movs	r2, #0
 800108c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC1_Init+0xcc>)
 8001090:	2200      	movs	r2, #0
 8001092:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_ADC1_Init+0xcc>)
 8001096:	2201      	movs	r2, #1
 8001098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC1_Init+0xcc>)
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010b0:	222c      	movs	r2, #44	; 0x2c
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010ca:	223c      	movs	r2, #60	; 0x3c
 80010cc:	2100      	movs	r1, #0
 80010ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010d8:	0018      	movs	r0, r3
 80010da:	f002 fcf9 	bl	8003ad0 <HAL_ADC_Init>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010e2:	f000 f82f 	bl	8001144 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	1d3a      	adds	r2, r7, #4
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_ADC1_Init+0xcc>)
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f002 febe 	bl	8003e80 <HAL_ADC_ConfigChannel>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001108:	f000 f81c 	bl	8001144 <Error_Handler>
  }

}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b004      	add	sp, #16
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200086c0 	.word	0x200086c0
 8001118:	40012400 	.word	0x40012400

0800111c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <__io_putchar+0x20>)
 8001126:	1d39      	adds	r1, r7, #4
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <__io_putchar+0x24>)
 800112a:	2201      	movs	r2, #1
 800112c:	f004 fd3a 	bl	8005ba4 <HAL_UART_Transmit>

return ch;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	0000ffff 	.word	0x0000ffff
 8001140:	20008804 	.word	0x20008804

08001144 <Error_Handler>:



void Error_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	while (1);
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <launch_ssTimer>:




//============= launch tasks ====================
void launch_ssTimer (void){
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af04      	add	r7, sp, #16
	xTaskCreate	(ssTimer_t, (const char *) "sys srvc, timer",configMINIMAL_STACK_SIZE, (void *) NULL, configMAX_PRIORITIES, &ssTimer_task_handler, 2);
 8001156:	4907      	ldr	r1, [pc, #28]	; (8001174 <launch_ssTimer+0x24>)
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <launch_ssTimer+0x28>)
 800115a:	2302      	movs	r3, #2
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <launch_ssTimer+0x2c>)
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	230f      	movs	r3, #15
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2300      	movs	r3, #0
 8001168:	22c8      	movs	r2, #200	; 0xc8
 800116a:	f006 f98a 	bl	8007482 <xTaskCreate>
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08009ff4 	.word	0x08009ff4
 8001178:	08001221 	.word	0x08001221
 800117c:	200085e0 	.word	0x200085e0

08001180 <launch_dummy_tasks>:
}
void launch_ssTemp (void){
	xTaskCreate	(ssTemp_t, (const char *) "sys srvc, Temperature", configMINIMAL_STACK_SIZE, (void *) NULL, HIGH_PRIORITY, &ssTemp_task_handler, 100);
}

void launch_dummy_tasks(void){
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b087      	sub	sp, #28
 8001184:	af04      	add	r7, sp, #16
	// xTaskCreate	(dummy6, (const char *) "6",configMINIMAL_STACK_SIZE, (void *) NULL, priority[6], &dummy_task_handler[6], rel_deadline_ms[6]);
	// xTaskCreate	(dummy7, (const char *) "7",configMINIMAL_STACK_SIZE, (void *) NULL, priority[7], &dummy_task_handler[7], rel_deadline_ms[7]);
	// xTaskCreate	(dummy8, (const char *) "8",configMINIMAL_STACK_SIZE, (void *) NULL, priority[8], &dummy_task_handler[8], rel_deadline_ms[8]);
	// xTaskCreate	(dummy9, (const char *) "9",configMINIMAL_STACK_SIZE, (void *) NULL, priority[9], &dummy_task_handler[9], rel_deadline_ms[9]);
	
	for (int i=0; i< number_of_tasks; i++){
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	e021      	b.n	80011d0 <launch_dummy_tasks+0x50>
		xTaskCreate	(task_general, (const char *) "",configMINIMAL_STACK_SIZE, (void*)&ids[i], priority[i], &dummy_task_handler[i], 10*rel_deadline_ms[i]);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	009a      	lsls	r2, r3, #2
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <launch_dummy_tasks+0x60>)
 8001192:	18d5      	adds	r5, r2, r3
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <launch_dummy_tasks+0x64>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	58d3      	ldr	r3, [r2, r3]
 800119c:	001e      	movs	r6, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	009a      	lsls	r2, r3, #2
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <launch_dummy_tasks+0x68>)
 80011a4:	18d1      	adds	r1, r2, r3
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <launch_dummy_tasks+0x6c>)
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	58d2      	ldr	r2, [r2, r3]
 80011ae:	0013      	movs	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	189b      	adds	r3, r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4c0e      	ldr	r4, [pc, #56]	; (80011f0 <launch_dummy_tasks+0x70>)
 80011b8:	480e      	ldr	r0, [pc, #56]	; (80011f4 <launch_dummy_tasks+0x74>)
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	9101      	str	r1, [sp, #4]
 80011be:	9600      	str	r6, [sp, #0]
 80011c0:	002b      	movs	r3, r5
 80011c2:	22c8      	movs	r2, #200	; 0xc8
 80011c4:	0021      	movs	r1, r4
 80011c6:	f006 f95c 	bl	8007482 <xTaskCreate>
	for (int i=0; i< number_of_tasks; i++){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3301      	adds	r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	ddda      	ble.n	800118c <launch_dummy_tasks+0xc>
	}
	

}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b003      	add	sp, #12
 80011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000048 	.word	0x20000048
 80011e8:	2000850c 	.word	0x2000850c
 80011ec:	20000030 	.word	0x20000030
 80011f0:	0800a0c4 	.word	0x0800a0c4
 80011f4:	08001401 	.word	0x08001401

080011f8 <launch_ssAll>:





void launch_ssAll(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	// launch_ssFlow();
	launch_ssTimer();
 80011fc:	f7ff ffa8 	bl	8001150 <launch_ssTimer>
	// launch_ssHMI_b_hw();
	// launch_ssTrgPump();
	// launch_ssTrgHeater();
	// launch_ssTemp();

	 launch_dummy_tasks();
 8001200:	f7ff ffbe 	bl	8001180 <launch_dummy_tasks>
//	launch_ssHeatAlg();
//	launch_ssHMI();



}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <reset_timer>:
 * ================================================================
 * ================= Timer Task ===================================
 * ================================================================
 * ================================================================
 */
void reset_timer (void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	data_timer.time = 0;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <reset_timer+0x10>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000038c 	.word	0x2000038c

08001220 <ssTimer_t>:
	.tick_freq = 1000,
	.reset = reset_timer
};


void ssTimer_t( void *pvParameters ){
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]

	int timer_id = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
	unsigned int cnt_val = (1000*timer_readFreqKHz(timer_id))/(data_timer.tick_freq); //why should I multiply by
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff f9e9 	bl	8000606 <timer_readFreqKHz>
 8001234:	0002      	movs	r2, r0
 8001236:	0013      	movs	r3, r2
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	189b      	adds	r3, r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	001a      	movs	r2, r3
 8001244:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <ssTimer_t+0x1b4>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	0019      	movs	r1, r3
 800124a:	0010      	movs	r0, r2
 800124c:	f7fe ff66 	bl	800011c <__udivsi3>
 8001250:	0003      	movs	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
	timer_count(timer_id, cnt_val);
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff f9e0 	bl	8000620 <timer_count>
	printf("\r\n");
 8001260:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <ssTimer_t+0x1b8>)
 8001262:	0018      	movs	r0, r3
 8001264:	f007 fef0 	bl	8009048 <puts>
	for (int i=0; i<number_of_tasks; i++){
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e00d      	b.n	800128a <ssTimer_t+0x6a>
		test_parameters.finished[i]=1;
 800126e:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <ssTimer_t+0x1bc>)
 8001270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001272:	3206      	adds	r2, #6
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	2101      	movs	r1, #1
 8001278:	50d1      	str	r1, [r2, r3]
		test_parameters.missed[i]=0;
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <ssTimer_t+0x1bc>)
 800127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	2100      	movs	r1, #0
 8001282:	50d1      	str	r1, [r2, r3]
	for (int i=0; i<number_of_tasks; i++){
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	3301      	adds	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	2b05      	cmp	r3, #5
 800128e:	ddee      	ble.n	800126e <ssTimer_t+0x4e>
	}
	// int counter = 0;
	// int period_after_last = 10000;
	int id_time = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
	int id_task;
	
	vTaskSuspend( ssTimer_task_handler );
 8001294:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <ssTimer_t+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0018      	movs	r0, r3
 800129a:	f006 fa6f 	bl	800777c <vTaskSuspend>

	

	while(1){
		data_timer.time = data_timer.time + 1;
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <ssTimer_t+0x1b4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <ssTimer_t+0x1b4>)
 80012a6:	601a      	str	r2, [r3, #0]

		if (data_timer.time%20==0){
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <ssTimer_t+0x1b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2114      	movs	r1, #20
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7fe ffba 	bl	8000228 <__aeabi_uidivmod>
 80012b4:	1e0b      	subs	r3, r1, #0
 80012b6:	d126      	bne.n	8001306 <ssTimer_t+0xe6>
			//heater, id=0, pump, id=1
			for (int i=0; i<2; i++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	e020      	b.n	8001300 <ssTimer_t+0xe0>
				if (test_parameters.finished[i] == 0){	//issueing the task
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <ssTimer_t+0x1bc>)
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	3206      	adds	r2, #6
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	58d3      	ldr	r3, [r2, r3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d109      	bne.n	80012e0 <ssTimer_t+0xc0>
						test_parameters.missed[i]++;
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <ssTimer_t+0x1bc>)
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	58d3      	ldr	r3, [r2, r3]
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <ssTimer_t+0x1bc>)
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	50d1      	str	r1, [r2, r3]
 80012de:	e00c      	b.n	80012fa <ssTimer_t+0xda>
				}
				else{
					test_parameters.finished[i] = 0;
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <ssTimer_t+0x1bc>)
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	3206      	adds	r2, #6
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	2100      	movs	r1, #0
 80012ea:	50d1      	str	r1, [r2, r3]
					vTaskResume(dummy_task_handler[i]);
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <ssTimer_t+0x1c4>)
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	58d3      	ldr	r3, [r2, r3]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f006 facd 	bl	8007894 <vTaskResume>
			for (int i=0; i<2; i++){
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b01      	cmp	r3, #1
 8001304:	dddb      	ble.n	80012be <ssTimer_t+0x9e>
		// 	if (data_temp.en == 1){		
		// 		vTaskResume(ssTemp_task_handler );
		// 	}
		// }			

		if (data_timer.time == issue_ms[id_time]){
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <ssTimer_t+0x1b4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a37      	ldr	r2, [pc, #220]	; (80013e8 <ssTimer_t+0x1c8>)
 800130c:	6a39      	ldr	r1, [r7, #32]
 800130e:	0089      	lsls	r1, r1, #2
 8001310:	588a      	ldr	r2, [r1, r2]
 8001312:	4293      	cmp	r3, r2
 8001314:	d128      	bne.n	8001368 <ssTimer_t+0x148>
			id_task = issue_id[id_time];					//getting the task
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <ssTimer_t+0x1cc>)
 8001318:	6a3a      	ldr	r2, [r7, #32]
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	58d3      	ldr	r3, [r2, r3]
 800131e:	60bb      	str	r3, [r7, #8]
			if (test_parameters.finished[id_task] == 0){	//issueing the task
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <ssTimer_t+0x1bc>)
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	3206      	adds	r2, #6
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	58d3      	ldr	r3, [r2, r3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <ssTimer_t+0x122>
					test_parameters.missed[id_task]++;
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <ssTimer_t+0x1bc>)
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	58d3      	ldr	r3, [r2, r3]
 8001336:	1c59      	adds	r1, r3, #1
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <ssTimer_t+0x1bc>)
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	50d1      	str	r1, [r2, r3]
 8001340:	e00c      	b.n	800135c <ssTimer_t+0x13c>
			}
			else{
				test_parameters.finished[id_task] = 0;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <ssTimer_t+0x1bc>)
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	3206      	adds	r2, #6
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	2100      	movs	r1, #0
 800134c:	50d1      	str	r1, [r2, r3]
				vTaskResume(dummy_task_handler[id_task]);
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <ssTimer_t+0x1c4>)
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	58d3      	ldr	r3, [r2, r3]
 8001356:	0018      	movs	r0, r3
 8001358:	f006 fa9c 	bl	8007894 <vTaskResume>
			}
			if (id_time < number_of_issues-1){			//checking for last one
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	2b62      	cmp	r3, #98	; 0x62
 8001360:	dc02      	bgt.n	8001368 <ssTimer_t+0x148>
				id_time++;
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	3301      	adds	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
			}

		}

		if (data_timer.time == test_duration_ms){
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <ssTimer_t+0x1b4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <ssTimer_t+0x1d0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d129      	bne.n	80013c6 <ssTimer_t+0x1a6>
			printf("======= test duration: %d, dynmaic scheduler: %d, number of issues: %d, number of tasks: %d\r\n", 
 8001372:	491f      	ldr	r1, [pc, #124]	; (80013f0 <ssTimer_t+0x1d0>)
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <ssTimer_t+0x1d4>)
 8001376:	2306      	movs	r3, #6
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2364      	movs	r3, #100	; 0x64
 800137c:	2200      	movs	r2, #0
 800137e:	f007 fdd7 	bl	8008f30 <iprintf>
				test_duration_ms, configDYNAMIC_SCHEDULING, number_of_issues, number_of_tasks);
				int totall=0;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i<number_of_tasks; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e012      	b.n	80013b2 <ssTimer_t+0x192>
					printf("task %d, number of misses: %d\r\n", i, test_parameters.missed[i]);
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <ssTimer_t+0x1bc>)
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	58d2      	ldr	r2, [r2, r3]
 8001394:	6979      	ldr	r1, [r7, #20]
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <ssTimer_t+0x1d8>)
 8001398:	0018      	movs	r0, r3
 800139a:	f007 fdc9 	bl	8008f30 <iprintf>
					totall += test_parameters.missed[i];
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <ssTimer_t+0x1bc>)
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	58d3      	ldr	r3, [r2, r3]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	61bb      	str	r3, [r7, #24]
				for (int i = 0; i<number_of_tasks; i++){
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	dde9      	ble.n	800138c <ssTimer_t+0x16c>
				}
				printf ("totall misses: %d\r\n", totall);
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <ssTimer_t+0x1dc>)
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f007 fdb6 	bl	8008f30 <iprintf>
				while(1);
 80013c4:	e7fe      	b.n	80013c4 <ssTimer_t+0x1a4>
//			}
//			printf ("totall misses: %d\r\n", totall);
//			while(1);
//		}
		
		vTaskSuspend( ssTimer_task_handler );
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <ssTimer_t+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f006 f9d6 	bl	800777c <vTaskSuspend>
		data_timer.time = data_timer.time + 1;
 80013d0:	e765      	b.n	800129e <ssTimer_t+0x7e>
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	2000038c 	.word	0x2000038c
 80013d8:	0800a0dc 	.word	0x0800a0dc
 80013dc:	200088e0 	.word	0x200088e0
 80013e0:	200085e0 	.word	0x200085e0
 80013e4:	2000850c 	.word	0x2000850c
 80013e8:	20000060 	.word	0x20000060
 80013ec:	200001f0 	.word	0x200001f0
 80013f0:	000042b1 	.word	0x000042b1
 80013f4:	0800a0e0 	.word	0x0800a0e0
 80013f8:	0800a140 	.word	0x0800a140
 80013fc:	0800a160 	.word	0x0800a160

08001400 <task_general>:
 * ================================================================
 * ================= General Tasks =============================
 * ================================================================
 * ================================================================
 */
void task_general(void *pvParameters){
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	// TASK_PARAMETERS * parameters = (TASK_PARAMETERS *) pvParameters;
	int * p_id =  (int *) pvParameters;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	617b      	str	r3, [r7, #20]
	int id = *p_id;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	613b      	str	r3, [r7, #16]
	// printf("initialize\tid:%d, exe:%d\r\n", id, exe_time_ms[id]);
	// int inner = 1029;//1000;
	// int outer = (exe_time_ms[id]*500)/(400);		//500 equal to 400ms
	int outer = exe_time_ms[id];
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <task_general+0xa0>)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	58d3      	ldr	r3, [r2, r3]
 800141a:	60fb      	str	r3, [r7, #12]
	unsigned int finish_time;
	unsigned int start, end; //r
	vTaskSuspend(dummy_task_handler[id]); 
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <task_general+0xa4>)
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	58d3      	ldr	r3, [r2, r3]
 8001424:	0018      	movs	r0, r3
 8001426:	f006 f9a9 	bl	800777c <vTaskSuspend>

	while(1){
		// start = xTaskGetTickCount(); //r
		for (int j=0; j<outer; j++){
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e00c      	b.n	800144a <task_general+0x4a>
			for (int i =0; i<1070; i++){
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	e002      	b.n	800143c <task_general+0x3c>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	3301      	adds	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	4a1a      	ldr	r2, [pc, #104]	; (80014a8 <task_general+0xa8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	ddf8      	ble.n	8001436 <task_general+0x36>
		for (int j=0; j<outer; j++){
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3301      	adds	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbee      	blt.n	8001430 <task_general+0x30>

			}
		}	
		finish_time = xTaskGetTickCount(); //r
 8001452:	f006 fbd9 	bl	8007c08 <xTaskGetTickCount>
 8001456:	0003      	movs	r3, r0
 8001458:	60bb      	str	r3, [r7, #8]
		// printxf("id: %d, exe: %d\r\n", id, finish_time-start);

		// for (int i =0; i<outer; i++)
		// 	for (int j=0; j<inner; j++);
		// finish_time = xTaskGetTickCount();
		if(finish_time>uxTaskDeadlineAbsGet(dummy_task_handler[id])){
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <task_general+0xa4>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	58d3      	ldr	r3, [r2, r3]
 8001462:	0018      	movs	r0, r3
 8001464:	f006 f970 	bl	8007748 <uxTaskDeadlineAbsGet>
 8001468:	0002      	movs	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	4293      	cmp	r3, r2
 800146e:	d908      	bls.n	8001482 <task_general+0x82>
			test_parameters.missed[id]++;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <task_general+0xac>)
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	58d3      	ldr	r3, [r2, r3]
 8001478:	1c59      	adds	r1, r3, #1
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <task_general+0xac>)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	50d1      	str	r1, [r2, r3]
			// printf("task%d, missed, deadline=%lu, finished=%lu\r\n", id, uxTaskDeadlineAbsGet(dummy_task_handler[id]), finish_time);
		}
		else{
			// printf("task%d, passed, deadline=%lu, finished=%lu\r\n", id, uxTaskDeadlineAbsGet(dummy_task_handler[id]), finish_time);
		}
		test_parameters.finished[id] = 1;
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <task_general+0xac>)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	3206      	adds	r2, #6
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	2101      	movs	r1, #1
 800148c:	50d1      	str	r1, [r2, r3]

		vTaskSuspend(dummy_task_handler[id]);
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <task_general+0xa4>)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	58d3      	ldr	r3, [r2, r3]
 8001496:	0018      	movs	r0, r3
 8001498:	f006 f970 	bl	800777c <vTaskSuspend>
		for (int j=0; j<outer; j++){
 800149c:	e7c5      	b.n	800142a <task_general+0x2a>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000018 	.word	0x20000018
 80014a4:	2000850c 	.word	0x2000850c
 80014a8:	0000042d 	.word	0x0000042d
 80014ac:	200088e0 	.word	0x200088e0

080014b0 <TIM16_IRQHandler>:
   NVIC_EnableIRQ(TIM16_IRQn); // Enable interrupt from TIM3 (NVIC level)
}


void TIM16_IRQHandler(void) // interrupt routine
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	  if(TIM16->SR & TIM_SR_UIF) // if UIF flag is set
 80014b4:	4bd5      	ldr	r3, [pc, #852]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <TIM16_IRQHandler+0x10>
 80014be:	e377      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
	  {
	    TIM16->SR &= ~TIM_SR_UIF; // clear UIF flag
 80014c0:	4bd2      	ldr	r3, [pc, #840]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	4bd1      	ldr	r3, [pc, #836]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	438a      	bics	r2, r1
 80014ca:	611a      	str	r2, [r3, #16]


		if (mode_tmr16 == TRG_MODE_LOW){
 80014cc:	4bd0      	ldr	r3, [pc, #832]	; (8001810 <TIM16_IRQHandler+0x360>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d100      	bne.n	80014d6 <TIM16_IRQHandler+0x26>
 80014d4:	e36c      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
			//do nothing
		}
		else if(mode_tmr16 == TRG_MODE_HIGH){
 80014d6:	4bce      	ldr	r3, [pc, #824]	; (8001810 <TIM16_IRQHandler+0x360>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d100      	bne.n	80014e0 <TIM16_IRQHandler+0x30>
 80014de:	e367      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
			//do nothing
		}
		else if (mode_tmr16 == TRG_MODE_T1HIGH_LOW){
 80014e0:	4bcb      	ldr	r3, [pc, #812]	; (8001810 <TIM16_IRQHandler+0x360>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d124      	bne.n	8001532 <TIM16_IRQHandler+0x82>
			//==when recieve intr(t1 done), put low
			//put low
		 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80014e8:	4bc8      	ldr	r3, [pc, #800]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014ea:	699a      	ldr	r2, [r3, #24]
 80014ec:	4bc7      	ldr	r3, [pc, #796]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014ee:	2110      	movs	r1, #16
 80014f0:	438a      	bics	r2, r1
 80014f2:	619a      	str	r2, [r3, #24]
		 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80014f4:	4bc5      	ldr	r3, [pc, #788]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	4bc4      	ldr	r3, [pc, #784]	; (800180c <TIM16_IRQHandler+0x35c>)
 80014fa:	2120      	movs	r1, #32
 80014fc:	438a      	bics	r2, r1
 80014fe:	619a      	str	r2, [r3, #24]
		 	TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001500:	4bc2      	ldr	r3, [pc, #776]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	4bc1      	ldr	r3, [pc, #772]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	430a      	orrs	r2, r1
 800150a:	619a      	str	r2, [r3, #24]
		 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800150c:	4bbf      	ldr	r3, [pc, #764]	; (800180c <TIM16_IRQHandler+0x35c>)
 800150e:	699a      	ldr	r2, [r3, #24]
 8001510:	4bbe      	ldr	r3, [pc, #760]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001512:	49c0      	ldr	r1, [pc, #768]	; (8001814 <TIM16_IRQHandler+0x364>)
 8001514:	400a      	ands	r2, r1
 8001516:	619a      	str	r2, [r3, #24]
		   TIM16->EGR |= TIM_EGR_UG;
 8001518:	4bbc      	ldr	r3, [pc, #752]	; (800180c <TIM16_IRQHandler+0x35c>)
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	4bbb      	ldr	r3, [pc, #748]	; (800180c <TIM16_IRQHandler+0x35c>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	615a      	str	r2, [r3, #20]
		   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 8001524:	4bb9      	ldr	r3, [pc, #740]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4bb8      	ldr	r3, [pc, #736]	; (800180c <TIM16_IRQHandler+0x35c>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
				}
			}
		}

	  }
}
 8001530:	e33e      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == TRG_MODE_T1LOW_HIGH){
 8001532:	4bb7      	ldr	r3, [pc, #732]	; (8001810 <TIM16_IRQHandler+0x360>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d124      	bne.n	8001584 <TIM16_IRQHandler+0xd4>
			TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 800153a:	4bb4      	ldr	r3, [pc, #720]	; (800180c <TIM16_IRQHandler+0x35c>)
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	4bb3      	ldr	r3, [pc, #716]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001540:	2110      	movs	r1, #16
 8001542:	430a      	orrs	r2, r1
 8001544:	619a      	str	r2, [r3, #24]
			TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001546:	4bb1      	ldr	r3, [pc, #708]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	4bb0      	ldr	r3, [pc, #704]	; (800180c <TIM16_IRQHandler+0x35c>)
 800154c:	2120      	movs	r1, #32
 800154e:	438a      	bics	r2, r1
 8001550:	619a      	str	r2, [r3, #24]
			TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001552:	4bae      	ldr	r3, [pc, #696]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	4bad      	ldr	r3, [pc, #692]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	430a      	orrs	r2, r1
 800155c:	619a      	str	r2, [r3, #24]
			TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800155e:	4bab      	ldr	r3, [pc, #684]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	4baa      	ldr	r3, [pc, #680]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001564:	49ab      	ldr	r1, [pc, #684]	; (8001814 <TIM16_IRQHandler+0x364>)
 8001566:	400a      	ands	r2, r1
 8001568:	619a      	str	r2, [r3, #24]
			TIM16->EGR |= TIM_EGR_UG;
 800156a:	4ba8      	ldr	r3, [pc, #672]	; (800180c <TIM16_IRQHandler+0x35c>)
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	4ba7      	ldr	r3, [pc, #668]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	615a      	str	r2, [r3, #20]
		   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 8001576:	4ba5      	ldr	r3, [pc, #660]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4ba4      	ldr	r3, [pc, #656]	; (800180c <TIM16_IRQHandler+0x35c>)
 800157c:	2101      	movs	r1, #1
 800157e:	438a      	bics	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	e315      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 4){
 8001584:	4ba2      	ldr	r3, [pc, #648]	; (8001810 <TIM16_IRQHandler+0x360>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d159      	bne.n	8001640 <TIM16_IRQHandler+0x190>
			if (mode4_cntr == 0){
 800158c:	4ba2      	ldr	r3, [pc, #648]	; (8001818 <TIM16_IRQHandler+0x368>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d12d      	bne.n	80015f0 <TIM16_IRQHandler+0x140>
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001594:	4b9d      	ldr	r3, [pc, #628]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	4b9c      	ldr	r3, [pc, #624]	; (800180c <TIM16_IRQHandler+0x35c>)
 800159a:	2110      	movs	r1, #16
 800159c:	430a      	orrs	r2, r1
 800159e:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80015a0:	4b9a      	ldr	r3, [pc, #616]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015a2:	699a      	ldr	r2, [r3, #24]
 80015a4:	4b99      	ldr	r3, [pc, #612]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015a6:	2120      	movs	r1, #32
 80015a8:	438a      	bics	r2, r1
 80015aa:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 80015ac:	4b97      	ldr	r3, [pc, #604]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	4b96      	ldr	r3, [pc, #600]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	430a      	orrs	r2, r1
 80015b6:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	4b93      	ldr	r3, [pc, #588]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015be:	4995      	ldr	r1, [pc, #596]	; (8001814 <TIM16_IRQHandler+0x364>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	619a      	str	r2, [r3, #24]
				TIM16->ARR = (uint32_t)t2_tmr16;
 80015c4:	4a91      	ldr	r2, [pc, #580]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015c6:	4b95      	ldr	r3, [pc, #596]	; (800181c <TIM16_IRQHandler+0x36c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM16->EGR |= TIM_EGR_UG;
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	4b8e      	ldr	r3, [pc, #568]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 |= TIM_CR1_CEN;
 80015d8:	4b8c      	ldr	r3, [pc, #560]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b8b      	ldr	r3, [pc, #556]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015de:	2101      	movs	r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
			   mode4_cntr++;
 80015e4:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <TIM16_IRQHandler+0x368>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <TIM16_IRQHandler+0x368>)
 80015ec:	601a      	str	r2, [r3, #0]
}
 80015ee:	e2df      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80015f0:	4b86      	ldr	r3, [pc, #536]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	4b85      	ldr	r3, [pc, #532]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015f6:	2110      	movs	r1, #16
 80015f8:	438a      	bics	r2, r1
 80015fa:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80015fc:	4b83      	ldr	r3, [pc, #524]	; (800180c <TIM16_IRQHandler+0x35c>)
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	4b82      	ldr	r3, [pc, #520]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001602:	2120      	movs	r1, #32
 8001604:	438a      	bics	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001608:	4b80      	ldr	r3, [pc, #512]	; (800180c <TIM16_IRQHandler+0x35c>)
 800160a:	699a      	ldr	r2, [r3, #24]
 800160c:	4b7f      	ldr	r3, [pc, #508]	; (800180c <TIM16_IRQHandler+0x35c>)
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	430a      	orrs	r2, r1
 8001612:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001614:	4b7d      	ldr	r3, [pc, #500]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001616:	699a      	ldr	r2, [r3, #24]
 8001618:	4b7c      	ldr	r3, [pc, #496]	; (800180c <TIM16_IRQHandler+0x35c>)
 800161a:	497e      	ldr	r1, [pc, #504]	; (8001814 <TIM16_IRQHandler+0x364>)
 800161c:	400a      	ands	r2, r1
 800161e:	619a      	str	r2, [r3, #24]
			   TIM16->EGR |= TIM_EGR_UG;
 8001620:	4b7a      	ldr	r3, [pc, #488]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001626:	2101      	movs	r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 800162c:	4b77      	ldr	r3, [pc, #476]	; (800180c <TIM16_IRQHandler+0x35c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
				mode4_cntr = 0;
 8001638:	4b77      	ldr	r3, [pc, #476]	; (8001818 <TIM16_IRQHandler+0x368>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	e2b7      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 5){
 8001640:	4b73      	ldr	r3, [pc, #460]	; (8001810 <TIM16_IRQHandler+0x360>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d159      	bne.n	80016fc <TIM16_IRQHandler+0x24c>
			if (mode5_cntr == 0){
 8001648:	4b75      	ldr	r3, [pc, #468]	; (8001820 <TIM16_IRQHandler+0x370>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d12d      	bne.n	80016ac <TIM16_IRQHandler+0x1fc>
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001650:	4b6e      	ldr	r3, [pc, #440]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	4b6d      	ldr	r3, [pc, #436]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001656:	2110      	movs	r1, #16
 8001658:	438a      	bics	r2, r1
 800165a:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <TIM16_IRQHandler+0x35c>)
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001662:	2120      	movs	r1, #32
 8001664:	438a      	bics	r2, r1
 8001666:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <TIM16_IRQHandler+0x35c>)
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	4b67      	ldr	r3, [pc, #412]	; (800180c <TIM16_IRQHandler+0x35c>)
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	430a      	orrs	r2, r1
 8001672:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001674:	4b65      	ldr	r3, [pc, #404]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <TIM16_IRQHandler+0x35c>)
 800167a:	4966      	ldr	r1, [pc, #408]	; (8001814 <TIM16_IRQHandler+0x364>)
 800167c:	400a      	ands	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
				TIM16->ARR = (uint32_t)t2_tmr16;
 8001680:	4a62      	ldr	r2, [pc, #392]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001682:	4b66      	ldr	r3, [pc, #408]	; (800181c <TIM16_IRQHandler+0x36c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM16->EGR |= TIM_EGR_UG;
 8001688:	4b60      	ldr	r3, [pc, #384]	; (800180c <TIM16_IRQHandler+0x35c>)
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	4b5f      	ldr	r3, [pc, #380]	; (800180c <TIM16_IRQHandler+0x35c>)
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 |= TIM_CR1_CEN;
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b5c      	ldr	r3, [pc, #368]	; (800180c <TIM16_IRQHandler+0x35c>)
 800169a:	2101      	movs	r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
			   mode5_cntr++;
 80016a0:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <TIM16_IRQHandler+0x370>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <TIM16_IRQHandler+0x370>)
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	e281      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 80016ac:	4b57      	ldr	r3, [pc, #348]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016b2:	2110      	movs	r1, #16
 80016b4:	430a      	orrs	r2, r1
 80016b6:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80016b8:	4b54      	ldr	r3, [pc, #336]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016be:	2120      	movs	r1, #32
 80016c0:	438a      	bics	r2, r1
 80016c2:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016ca:	2140      	movs	r1, #64	; 0x40
 80016cc:	430a      	orrs	r2, r1
 80016ce:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80016d0:	4b4e      	ldr	r3, [pc, #312]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016d6:	494f      	ldr	r1, [pc, #316]	; (8001814 <TIM16_IRQHandler+0x364>)
 80016d8:	400a      	ands	r2, r1
 80016da:	619a      	str	r2, [r3, #24]
			   TIM16->EGR |= TIM_EGR_UG;
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	4b4a      	ldr	r3, [pc, #296]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b47      	ldr	r3, [pc, #284]	; (800180c <TIM16_IRQHandler+0x35c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	438a      	bics	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
				mode5_cntr = 0;
 80016f4:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <TIM16_IRQHandler+0x370>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
}
 80016fa:	e259      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 6){
 80016fc:	4b44      	ldr	r3, [pc, #272]	; (8001810 <TIM16_IRQHandler+0x360>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b06      	cmp	r3, #6
 8001702:	d134      	bne.n	800176e <TIM16_IRQHandler+0x2be>
			if(mode6_cntr<num_pulse_pwm_tmr16){
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <TIM16_IRQHandler+0x374>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	001a      	movs	r2, r3
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <TIM16_IRQHandler+0x378>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d205      	bcs.n	800171e <TIM16_IRQHandler+0x26e>
				mode6_cntr++;
 8001712:	4b44      	ldr	r3, [pc, #272]	; (8001824 <TIM16_IRQHandler+0x374>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <TIM16_IRQHandler+0x374>)
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	e248      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001724:	2110      	movs	r1, #16
 8001726:	438a      	bics	r2, r1
 8001728:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <TIM16_IRQHandler+0x35c>)
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001730:	2120      	movs	r1, #32
 8001732:	438a      	bics	r2, r1
 8001734:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <TIM16_IRQHandler+0x35c>)
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	430a      	orrs	r2, r1
 8001740:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001748:	4932      	ldr	r1, [pc, #200]	; (8001814 <TIM16_IRQHandler+0x364>)
 800174a:	400a      	ands	r2, r1
 800174c:	619a      	str	r2, [r3, #24]
			   TIM16->EGR |= TIM_EGR_UG;
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <TIM16_IRQHandler+0x35c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001760:	2101      	movs	r1, #1
 8001762:	438a      	bics	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
				mode6_cntr=0;
 8001766:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <TIM16_IRQHandler+0x374>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	e220      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 7){
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <TIM16_IRQHandler+0x360>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b07      	cmp	r3, #7
 8001774:	d134      	bne.n	80017e0 <TIM16_IRQHandler+0x330>
			if(mode7_cntr<num_pulse_pwm_tmr16){
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <TIM16_IRQHandler+0x37c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	001a      	movs	r2, r3
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <TIM16_IRQHandler+0x378>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d205      	bcs.n	8001790 <TIM16_IRQHandler+0x2e0>
				mode7_cntr++;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <TIM16_IRQHandler+0x37c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <TIM16_IRQHandler+0x37c>)
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	e20f      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <TIM16_IRQHandler+0x35c>)
 8001796:	2110      	movs	r1, #16
 8001798:	430a      	orrs	r2, r1
 800179a:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <TIM16_IRQHandler+0x35c>)
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017a2:	2120      	movs	r1, #32
 80017a4:	438a      	bics	r2, r1
 80017a6:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	430a      	orrs	r2, r1
 80017b2:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017ba:	4916      	ldr	r1, [pc, #88]	; (8001814 <TIM16_IRQHandler+0x364>)
 80017bc:	400a      	ands	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
			   TIM16->EGR |= TIM_EGR_UG;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <TIM16_IRQHandler+0x35c>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	438a      	bics	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
				mode7_cntr=0;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <TIM16_IRQHandler+0x37c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	e1e7      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 8){
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <TIM16_IRQHandler+0x360>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d000      	beq.n	80017ea <TIM16_IRQHandler+0x33a>
 80017e8:	e082      	b.n	80018f0 <TIM16_IRQHandler+0x440>
			if(mode8_cntr1 == 0){ //state 1
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <TIM16_IRQHandler+0x380>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d153      	bne.n	800189a <TIM16_IRQHandler+0x3ea>
				if(mode8_cntr2<num_pulse_pwm_tmr16){ //pwm counter
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <TIM16_IRQHandler+0x384>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	001a      	movs	r2, r3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <TIM16_IRQHandler+0x378>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d21b      	bcs.n	8001838 <TIM16_IRQHandler+0x388>
					mode8_cntr2++;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <TIM16_IRQHandler+0x384>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <TIM16_IRQHandler+0x384>)
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	e1d1      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
 800180c:	40014400 	.word	0x40014400
 8001810:	2000849c 	.word	0x2000849c
 8001814:	fffeffff 	.word	0xfffeffff
 8001818:	200004a8 	.word	0x200004a8
 800181c:	20008580 	.word	0x20008580
 8001820:	200004ac 	.word	0x200004ac
 8001824:	200004b0 	.word	0x200004b0
 8001828:	200085e8 	.word	0x200085e8
 800182c:	200004b4 	.word	0x200004b4
 8001830:	200004b8 	.word	0x200004b8
 8001834:	200004bc 	.word	0x200004bc
					TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001838:	4bdf      	ldr	r3, [pc, #892]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800183a:	699a      	ldr	r2, [r3, #24]
 800183c:	4bde      	ldr	r3, [pc, #888]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800183e:	2110      	movs	r1, #16
 8001840:	430a      	orrs	r2, r1
 8001842:	619a      	str	r2, [r3, #24]
					TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001844:	4bdc      	ldr	r3, [pc, #880]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	4bdb      	ldr	r3, [pc, #876]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800184a:	2120      	movs	r1, #32
 800184c:	438a      	bics	r2, r1
 800184e:	619a      	str	r2, [r3, #24]
					TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001850:	4bd9      	ldr	r3, [pc, #868]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	4bd8      	ldr	r3, [pc, #864]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	430a      	orrs	r2, r1
 800185a:	619a      	str	r2, [r3, #24]
					TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800185c:	4bd6      	ldr	r3, [pc, #856]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	4bd5      	ldr	r3, [pc, #852]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001862:	49d6      	ldr	r1, [pc, #856]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 8001864:	400a      	ands	r2, r1
 8001866:	619a      	str	r2, [r3, #24]
					TIM16->ARR = (uint32_t)t2_tmr16;
 8001868:	4ad3      	ldr	r2, [pc, #844]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800186a:	4bd5      	ldr	r3, [pc, #852]	; (8001bc0 <TIM16_IRQHandler+0x710>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM16->EGR |= TIM_EGR_UG;
 8001870:	4bd1      	ldr	r3, [pc, #836]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4bd0      	ldr	r3, [pc, #832]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001876:	2101      	movs	r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
				   TIM16->CR1 |= TIM_CR1_CEN;
 800187c:	4bce      	ldr	r3, [pc, #824]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4bcd      	ldr	r3, [pc, #820]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
				   mode8_cntr2=0;
 8001888:	4bce      	ldr	r3, [pc, #824]	; (8001bc4 <TIM16_IRQHandler+0x714>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
				   mode8_cntr1++;
 800188e:	4bce      	ldr	r3, [pc, #824]	; (8001bc8 <TIM16_IRQHandler+0x718>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	4bcc      	ldr	r3, [pc, #816]	; (8001bc8 <TIM16_IRQHandler+0x718>)
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	e18a      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
			 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 800189a:	4bc7      	ldr	r3, [pc, #796]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800189c:	699a      	ldr	r2, [r3, #24]
 800189e:	4bc6      	ldr	r3, [pc, #792]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018a0:	2110      	movs	r1, #16
 80018a2:	438a      	bics	r2, r1
 80018a4:	619a      	str	r2, [r3, #24]
			 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80018a6:	4bc4      	ldr	r3, [pc, #784]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	4bc3      	ldr	r3, [pc, #780]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018ac:	2120      	movs	r1, #32
 80018ae:	438a      	bics	r2, r1
 80018b0:	619a      	str	r2, [r3, #24]
			 	TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 80018b2:	4bc1      	ldr	r3, [pc, #772]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	4bc0      	ldr	r3, [pc, #768]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018b8:	2140      	movs	r1, #64	; 0x40
 80018ba:	430a      	orrs	r2, r1
 80018bc:	619a      	str	r2, [r3, #24]
			 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80018be:	4bbe      	ldr	r3, [pc, #760]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	4bbd      	ldr	r3, [pc, #756]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018c4:	49bd      	ldr	r1, [pc, #756]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	619a      	str	r2, [r3, #24]
			   TIM16->EGR |= TIM_EGR_UG;
 80018ca:	4bbb      	ldr	r3, [pc, #748]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	4bba      	ldr	r3, [pc, #744]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 80018d6:	4bb8      	ldr	r3, [pc, #736]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4bb7      	ldr	r3, [pc, #732]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80018dc:	2101      	movs	r1, #1
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
			   mode8_cntr2=0;
 80018e2:	4bb8      	ldr	r3, [pc, #736]	; (8001bc4 <TIM16_IRQHandler+0x714>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
			   mode8_cntr1=0;
 80018e8:	4bb7      	ldr	r3, [pc, #732]	; (8001bc8 <TIM16_IRQHandler+0x718>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	e15f      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 9){
 80018f0:	4bb6      	ldr	r3, [pc, #728]	; (8001bcc <TIM16_IRQHandler+0x71c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d16c      	bne.n	80019d2 <TIM16_IRQHandler+0x522>
			if(mode9_cntr1 == 0){ //state 1
 80018f8:	4bb5      	ldr	r3, [pc, #724]	; (8001bd0 <TIM16_IRQHandler+0x720>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d13d      	bne.n	800197c <TIM16_IRQHandler+0x4cc>
				if(mode9_cntr2<num_pulse_pwm_tmr16){ //pwm counter
 8001900:	4bb4      	ldr	r3, [pc, #720]	; (8001bd4 <TIM16_IRQHandler+0x724>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	001a      	movs	r2, r3
 8001906:	4bb4      	ldr	r3, [pc, #720]	; (8001bd8 <TIM16_IRQHandler+0x728>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d205      	bcs.n	800191a <TIM16_IRQHandler+0x46a>
					mode9_cntr2++;
 800190e:	4bb1      	ldr	r3, [pc, #708]	; (8001bd4 <TIM16_IRQHandler+0x724>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	4baf      	ldr	r3, [pc, #700]	; (8001bd4 <TIM16_IRQHandler+0x724>)
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	e14a      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 800191a:	4ba7      	ldr	r3, [pc, #668]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	4ba6      	ldr	r3, [pc, #664]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001920:	2110      	movs	r1, #16
 8001922:	438a      	bics	r2, r1
 8001924:	619a      	str	r2, [r3, #24]
				 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001926:	4ba4      	ldr	r3, [pc, #656]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	4ba3      	ldr	r3, [pc, #652]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800192c:	2120      	movs	r1, #32
 800192e:	438a      	bics	r2, r1
 8001930:	619a      	str	r2, [r3, #24]
				 	TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001932:	4ba1      	ldr	r3, [pc, #644]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	4ba0      	ldr	r3, [pc, #640]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	430a      	orrs	r2, r1
 800193c:	619a      	str	r2, [r3, #24]
				 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800193e:	4b9e      	ldr	r3, [pc, #632]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	4b9d      	ldr	r3, [pc, #628]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001944:	499d      	ldr	r1, [pc, #628]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 8001946:	400a      	ands	r2, r1
 8001948:	619a      	str	r2, [r3, #24]
					TIM16->ARR = (uint32_t)t2_tmr16;
 800194a:	4a9b      	ldr	r2, [pc, #620]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800194c:	4b9c      	ldr	r3, [pc, #624]	; (8001bc0 <TIM16_IRQHandler+0x710>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM16->EGR |= TIM_EGR_UG;
 8001952:	4b99      	ldr	r3, [pc, #612]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	4b98      	ldr	r3, [pc, #608]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	615a      	str	r2, [r3, #20]
				   TIM16->CR1 |= TIM_CR1_CEN;
 800195e:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b95      	ldr	r3, [pc, #596]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
				   mode9_cntr2=0;
 800196a:	4b9a      	ldr	r3, [pc, #616]	; (8001bd4 <TIM16_IRQHandler+0x724>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
				   mode9_cntr1++;
 8001970:	4b97      	ldr	r3, [pc, #604]	; (8001bd0 <TIM16_IRQHandler+0x720>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	4b96      	ldr	r3, [pc, #600]	; (8001bd0 <TIM16_IRQHandler+0x720>)
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	e119      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 800197c:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	4b8d      	ldr	r3, [pc, #564]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001982:	2110      	movs	r1, #16
 8001984:	430a      	orrs	r2, r1
 8001986:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001988:	4b8b      	ldr	r3, [pc, #556]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800198e:	2120      	movs	r1, #32
 8001990:	438a      	bics	r2, r1
 8001992:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001994:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001996:	699a      	ldr	r2, [r3, #24]
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 800199a:	2140      	movs	r1, #64	; 0x40
 800199c:	430a      	orrs	r2, r1
 800199e:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80019a0:	4b85      	ldr	r3, [pc, #532]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019a6:	4985      	ldr	r1, [pc, #532]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	619a      	str	r2, [r3, #24]
			   TIM16->EGR |= TIM_EGR_UG;
 80019ac:	4b82      	ldr	r3, [pc, #520]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 80019b8:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019be:	2101      	movs	r1, #1
 80019c0:	438a      	bics	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
			   mode9_cntr2=0;
 80019c4:	4b83      	ldr	r3, [pc, #524]	; (8001bd4 <TIM16_IRQHandler+0x724>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
			   mode9_cntr1=0;
 80019ca:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <TIM16_IRQHandler+0x720>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	e0ee      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 10){
 80019d2:	4b7e      	ldr	r3, [pc, #504]	; (8001bcc <TIM16_IRQHandler+0x71c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b0a      	cmp	r3, #10
 80019d8:	d173      	bne.n	8001ac2 <TIM16_IRQHandler+0x612>
			if (mode10_cntr1 == 0){ //state1: t1 finished, set the t2
 80019da:	4b80      	ldr	r3, [pc, #512]	; (8001bdc <TIM16_IRQHandler+0x72c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d137      	bne.n	8001a52 <TIM16_IRQHandler+0x5a2>
				TIM16->ARR = (uint32_t)(h_pwm_tmr16+l_pwm_tmr16);
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <TIM16_IRQHandler+0x730>)
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <TIM16_IRQHandler+0x734>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019ec:	188a      	adds	r2, r1, r2
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM16->CCR1 = (uint32_t)h_pwm_tmr16;
 80019f0:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019f2:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <TIM16_IRQHandler+0x730>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6353      	str	r3, [r2, #52]	; 0x34
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019fa:	699a      	ldr	r2, [r3, #24]
 80019fc:	4b6e      	ldr	r3, [pc, #440]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 80019fe:	2110      	movs	r1, #16
 8001a00:	438a      	bics	r2, r1
 8001a02:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_1;
 8001a04:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001a10:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a12:	699a      	ldr	r2, [r3, #24]
 8001a14:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a16:	2140      	movs	r1, #64	; 0x40
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a22:	4966      	ldr	r1, [pc, #408]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	619a      	str	r2, [r3, #24]
				TIM16->EGR |= TIM_EGR_UG;
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 |= TIM_CR1_CEN;
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
				mode10_cntr1++; //go to next state
 8001a40:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <TIM16_IRQHandler+0x72c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	4b65      	ldr	r3, [pc, #404]	; (8001bdc <TIM16_IRQHandler+0x72c>)
 8001a48:	601a      	str	r2, [r3, #0]
				mode10_cntr2 = 0;
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <TIM16_IRQHandler+0x738>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	e0ae      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				if(mode10_cntr2<num_pulse_pwm_tmr16){ //pwm counter
 8001a52:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <TIM16_IRQHandler+0x738>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	001a      	movs	r2, r3
 8001a58:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <TIM16_IRQHandler+0x728>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d205      	bcs.n	8001a6c <TIM16_IRQHandler+0x5bc>
					mode10_cntr2++;
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <TIM16_IRQHandler+0x738>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <TIM16_IRQHandler+0x738>)
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	e0a1      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a72:	2110      	movs	r1, #16
 8001a74:	438a      	bics	r2, r1
 8001a76:	619a      	str	r2, [r3, #24]
				 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001a78:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a7a:	699a      	ldr	r2, [r3, #24]
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a7e:	2120      	movs	r1, #32
 8001a80:	438a      	bics	r2, r1
 8001a82:	619a      	str	r2, [r3, #24]
				 	TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001a84:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a8a:	2140      	movs	r1, #64	; 0x40
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	619a      	str	r2, [r3, #24]
				 	TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001a90:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a96:	4949      	ldr	r1, [pc, #292]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	619a      	str	r2, [r3, #24]
					TIM16->EGR |= TIM_EGR_UG;
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	615a      	str	r2, [r3, #20]
					TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
				   mode10_cntr2=0;
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <TIM16_IRQHandler+0x738>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
				   mode10_cntr1=0;
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <TIM16_IRQHandler+0x72c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	e076      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
		else if (mode_tmr16 == 11){
 8001ac2:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <TIM16_IRQHandler+0x71c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b0b      	cmp	r3, #11
 8001ac8:	d172      	bne.n	8001bb0 <TIM16_IRQHandler+0x700>
			if (mode11_cntr1 == 0){ //state1: t1 finished, set the t2
 8001aca:	4b48      	ldr	r3, [pc, #288]	; (8001bec <TIM16_IRQHandler+0x73c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d137      	bne.n	8001b42 <TIM16_IRQHandler+0x692>
				TIM16->ARR = (uint32_t)(h_pwm_tmr16+l_pwm_tmr16);
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <TIM16_IRQHandler+0x730>)
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <TIM16_IRQHandler+0x734>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001adc:	188a      	adds	r2, r1, r2
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM16->CCR1 = (uint32_t)h_pwm_tmr16;
 8001ae0:	4a35      	ldr	r2, [pc, #212]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <TIM16_IRQHandler+0x730>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6353      	str	r3, [r2, #52]	; 0x34
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001aee:	2110      	movs	r1, #16
 8001af0:	438a      	bics	r2, r1
 8001af2:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_1;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001afa:	2120      	movs	r1, #32
 8001afc:	430a      	orrs	r2, r1
 8001afe:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	619a      	str	r2, [r3, #24]
				TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b12:	492a      	ldr	r1, [pc, #168]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	619a      	str	r2, [r3, #24]
				TIM16->EGR |= TIM_EGR_UG;
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	615a      	str	r2, [r3, #20]
			   TIM16->CR1 |= TIM_CR1_CEN;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
				mode11_cntr1++; //go to next state
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <TIM16_IRQHandler+0x73c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <TIM16_IRQHandler+0x73c>)
 8001b38:	601a      	str	r2, [r3, #0]
				mode11_cntr2 = 0;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <TIM16_IRQHandler+0x740>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
}
 8001b40:	e036      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
				if(mode11_cntr2<num_pulse_pwm_tmr16){ //pwm counter
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <TIM16_IRQHandler+0x740>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	001a      	movs	r2, r3
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <TIM16_IRQHandler+0x728>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d205      	bcs.n	8001b5c <TIM16_IRQHandler+0x6ac>
					mode11_cntr2++;
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <TIM16_IRQHandler+0x740>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <TIM16_IRQHandler+0x740>)
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	e029      	b.n	8001bb0 <TIM16_IRQHandler+0x700>
					TIM16->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b62:	2110      	movs	r1, #16
 8001b64:	430a      	orrs	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
					TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b6e:	2120      	movs	r1, #32
 8001b70:	438a      	bics	r2, r1
 8001b72:	619a      	str	r2, [r3, #24]
					TIM16->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
					TIM16->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b86:	490d      	ldr	r1, [pc, #52]	; (8001bbc <TIM16_IRQHandler+0x70c>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	619a      	str	r2, [r3, #24]
					TIM16->EGR |= TIM_EGR_UG;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	615a      	str	r2, [r3, #20]
					TIM16->CR1 &= ~TIM_CR1_CEN; //disable
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <TIM16_IRQHandler+0x708>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
				   mode11_cntr2=0;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <TIM16_IRQHandler+0x740>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
				   mode11_cntr1=0;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <TIM16_IRQHandler+0x73c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	fffeffff 	.word	0xfffeffff
 8001bc0:	20008580 	.word	0x20008580
 8001bc4:	200004bc 	.word	0x200004bc
 8001bc8:	200004b8 	.word	0x200004b8
 8001bcc:	2000849c 	.word	0x2000849c
 8001bd0:	200004c0 	.word	0x200004c0
 8001bd4:	200004c4 	.word	0x200004c4
 8001bd8:	200085e8 	.word	0x200085e8
 8001bdc:	200004c8 	.word	0x200004c8
 8001be0:	2000858c 	.word	0x2000858c
 8001be4:	20008574 	.word	0x20008574
 8001be8:	200004cc 	.word	0x200004cc
 8001bec:	200004d0 	.word	0x200004d0
 8001bf0:	200004d4 	.word	0x200004d4

08001bf4 <TIM17_IRQHandler>:
   NVIC_EnableIRQ(TIM17_IRQn); // Enable interrupt from TIM3 (NVIC level)
}


void TIM17_IRQHandler(void) // interrupt routine
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	  if(TIM17->SR & TIM_SR_UIF) // if UIF flag is set
 8001bf8:	4bd5      	ldr	r3, [pc, #852]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <TIM17_IRQHandler+0x10>
 8001c02:	e377      	b.n	80022f4 <TIM17_IRQHandler+0x700>
	  {
	    TIM17->SR &= ~TIM_SR_UIF; // clear UIF flag
 8001c04:	4bd2      	ldr	r3, [pc, #840]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	4bd1      	ldr	r3, [pc, #836]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	611a      	str	r2, [r3, #16]


		if (mode_tmr17 == TRG_MODE_LOW){
 8001c10:	4bd0      	ldr	r3, [pc, #832]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d100      	bne.n	8001c1a <TIM17_IRQHandler+0x26>
 8001c18:	e36c      	b.n	80022f4 <TIM17_IRQHandler+0x700>
			//do nothing
		}
		else if(mode_tmr17 == TRG_MODE_HIGH){
 8001c1a:	4bce      	ldr	r3, [pc, #824]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d100      	bne.n	8001c24 <TIM17_IRQHandler+0x30>
 8001c22:	e367      	b.n	80022f4 <TIM17_IRQHandler+0x700>
			//do nothing
		}
		else if (mode_tmr17 == TRG_MODE_T1HIGH_LOW){
 8001c24:	4bcb      	ldr	r3, [pc, #812]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d124      	bne.n	8001c76 <TIM17_IRQHandler+0x82>
			//==when recieve intr(t1 done), put low
			//put low
		 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001c2c:	4bc8      	ldr	r3, [pc, #800]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	4bc7      	ldr	r3, [pc, #796]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c32:	2110      	movs	r1, #16
 8001c34:	438a      	bics	r2, r1
 8001c36:	619a      	str	r2, [r3, #24]
		 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001c38:	4bc5      	ldr	r3, [pc, #788]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	4bc4      	ldr	r3, [pc, #784]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c3e:	2120      	movs	r1, #32
 8001c40:	438a      	bics	r2, r1
 8001c42:	619a      	str	r2, [r3, #24]
		 	TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001c44:	4bc2      	ldr	r3, [pc, #776]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	4bc1      	ldr	r3, [pc, #772]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c4a:	2140      	movs	r1, #64	; 0x40
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	619a      	str	r2, [r3, #24]
		 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001c50:	4bbf      	ldr	r3, [pc, #764]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c52:	699a      	ldr	r2, [r3, #24]
 8001c54:	4bbe      	ldr	r3, [pc, #760]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c56:	49c0      	ldr	r1, [pc, #768]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	619a      	str	r2, [r3, #24]
		   TIM17->EGR |= TIM_EGR_UG;
 8001c5c:	4bbc      	ldr	r3, [pc, #752]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	4bbb      	ldr	r3, [pc, #748]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	615a      	str	r2, [r3, #20]
		   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 8001c68:	4bb9      	ldr	r3, [pc, #740]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4bb8      	ldr	r3, [pc, #736]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
				}
			}
		}

	  }
}
 8001c74:	e33e      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == TRG_MODE_T1LOW_HIGH){
 8001c76:	4bb7      	ldr	r3, [pc, #732]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d124      	bne.n	8001cc8 <TIM17_IRQHandler+0xd4>
			TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001c7e:	4bb4      	ldr	r3, [pc, #720]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	4bb3      	ldr	r3, [pc, #716]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c84:	2110      	movs	r1, #16
 8001c86:	430a      	orrs	r2, r1
 8001c88:	619a      	str	r2, [r3, #24]
			TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001c8a:	4bb1      	ldr	r3, [pc, #708]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	4bb0      	ldr	r3, [pc, #704]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c90:	2120      	movs	r1, #32
 8001c92:	438a      	bics	r2, r1
 8001c94:	619a      	str	r2, [r3, #24]
			TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001c96:	4bae      	ldr	r3, [pc, #696]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	4bad      	ldr	r3, [pc, #692]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	619a      	str	r2, [r3, #24]
			TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001ca2:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	4baa      	ldr	r3, [pc, #680]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ca8:	49ab      	ldr	r1, [pc, #684]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	619a      	str	r2, [r3, #24]
			TIM17->EGR |= TIM_EGR_UG;
 8001cae:	4ba8      	ldr	r3, [pc, #672]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	4ba7      	ldr	r3, [pc, #668]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	615a      	str	r2, [r3, #20]
		   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 8001cba:	4ba5      	ldr	r3, [pc, #660]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4ba4      	ldr	r3, [pc, #656]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	438a      	bics	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
}
 8001cc6:	e315      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 4){
 8001cc8:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d159      	bne.n	8001d84 <TIM17_IRQHandler+0x190>
			if (mode4_cntr == 0){
 8001cd0:	4ba2      	ldr	r3, [pc, #648]	; (8001f5c <TIM17_IRQHandler+0x368>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d12d      	bne.n	8001d34 <TIM17_IRQHandler+0x140>
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001cd8:	4b9d      	ldr	r3, [pc, #628]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b9c      	ldr	r3, [pc, #624]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cde:	2110      	movs	r1, #16
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cea:	2120      	movs	r1, #32
 8001cec:	438a      	bics	r2, r1
 8001cee:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001cf0:	4b97      	ldr	r3, [pc, #604]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cf6:	2140      	movs	r1, #64	; 0x40
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001cfc:	4b94      	ldr	r3, [pc, #592]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001cfe:	699a      	ldr	r2, [r3, #24]
 8001d00:	4b93      	ldr	r3, [pc, #588]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d02:	4995      	ldr	r1, [pc, #596]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	619a      	str	r2, [r3, #24]
				TIM17->ARR = (uint32_t)t2_tmr17;
 8001d08:	4a91      	ldr	r2, [pc, #580]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d0a:	4b95      	ldr	r3, [pc, #596]	; (8001f60 <TIM17_IRQHandler+0x36c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM17->EGR |= TIM_EGR_UG;
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 |= TIM_CR1_CEN;
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
			   mode4_cntr++;
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <TIM17_IRQHandler+0x368>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <TIM17_IRQHandler+0x368>)
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	e2df      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001d34:	4b86      	ldr	r3, [pc, #536]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001d40:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d46:	2120      	movs	r1, #32
 8001d48:	438a      	bics	r2, r1
 8001d4a:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	430a      	orrs	r2, r1
 8001d56:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001d58:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d5e:	497e      	ldr	r1, [pc, #504]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	619a      	str	r2, [r3, #24]
			   TIM17->EGR |= TIM_EGR_UG;
 8001d64:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 8001d70:	4b77      	ldr	r3, [pc, #476]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	438a      	bics	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
				mode4_cntr = 0;
 8001d7c:	4b77      	ldr	r3, [pc, #476]	; (8001f5c <TIM17_IRQHandler+0x368>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	e2b7      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 5){
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d159      	bne.n	8001e40 <TIM17_IRQHandler+0x24c>
			if (mode5_cntr == 0){
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <TIM17_IRQHandler+0x370>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d12d      	bne.n	8001df0 <TIM17_IRQHandler+0x1fc>
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d96:	699a      	ldr	r2, [r3, #24]
 8001d98:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001da6:	2120      	movs	r1, #32
 8001da8:	438a      	bics	r2, r1
 8001daa:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001dac:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001db2:	2140      	movs	r1, #64	; 0x40
 8001db4:	430a      	orrs	r2, r1
 8001db6:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001db8:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dbe:	4966      	ldr	r1, [pc, #408]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
				TIM17->ARR = (uint32_t)t2_tmr17;
 8001dc4:	4a62      	ldr	r2, [pc, #392]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dc6:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <TIM17_IRQHandler+0x36c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM17->EGR |= TIM_EGR_UG;
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 |= TIM_CR1_CEN;
 8001dd8:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
			   mode5_cntr++;
 8001de4:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <TIM17_IRQHandler+0x370>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <TIM17_IRQHandler+0x370>)
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	e281      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001df0:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001df6:	2110      	movs	r1, #16
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001dfc:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e02:	2120      	movs	r1, #32
 8001e04:	438a      	bics	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e0e:	2140      	movs	r1, #64	; 0x40
 8001e10:	430a      	orrs	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001e14:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e1a:	494f      	ldr	r1, [pc, #316]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	619a      	str	r2, [r3, #24]
			   TIM17->EGR |= TIM_EGR_UG;
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 8001e2c:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
				mode5_cntr = 0;
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <TIM17_IRQHandler+0x370>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
}
 8001e3e:	e259      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 6){
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d134      	bne.n	8001eb2 <TIM17_IRQHandler+0x2be>
			if(mode6_cntr<num_pulse_pwm_tmr17){
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <TIM17_IRQHandler+0x374>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <TIM17_IRQHandler+0x378>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d205      	bcs.n	8001e62 <TIM17_IRQHandler+0x26e>
				mode6_cntr++;
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <TIM17_IRQHandler+0x374>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <TIM17_IRQHandler+0x374>)
 8001e5e:	601a      	str	r2, [r3, #0]
}
 8001e60:	e248      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e68:	2110      	movs	r1, #16
 8001e6a:	438a      	bics	r2, r1
 8001e6c:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e74:	2120      	movs	r1, #32
 8001e76:	438a      	bics	r2, r1
 8001e78:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e80:	2140      	movs	r1, #64	; 0x40
 8001e82:	430a      	orrs	r2, r1
 8001e84:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e8c:	4932      	ldr	r1, [pc, #200]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	619a      	str	r2, [r3, #24]
			   TIM17->EGR |= TIM_EGR_UG;
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
				mode6_cntr=0;
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <TIM17_IRQHandler+0x374>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	e220      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 7){
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d134      	bne.n	8001f24 <TIM17_IRQHandler+0x330>
			if(mode7_cntr<num_pulse_pwm_tmr17){
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <TIM17_IRQHandler+0x37c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <TIM17_IRQHandler+0x378>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d205      	bcs.n	8001ed4 <TIM17_IRQHandler+0x2e0>
				mode7_cntr++;
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <TIM17_IRQHandler+0x37c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <TIM17_IRQHandler+0x37c>)
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	e20f      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001eda:	2110      	movs	r1, #16
 8001edc:	430a      	orrs	r2, r1
 8001ede:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	438a      	bics	r2, r1
 8001eea:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001efe:	4916      	ldr	r1, [pc, #88]	; (8001f58 <TIM17_IRQHandler+0x364>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	619a      	str	r2, [r3, #24]
			   TIM17->EGR |= TIM_EGR_UG;
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <TIM17_IRQHandler+0x35c>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	438a      	bics	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
				mode7_cntr=0;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <TIM17_IRQHandler+0x37c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	e1e7      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 8){
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <TIM17_IRQHandler+0x360>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d000      	beq.n	8001f2e <TIM17_IRQHandler+0x33a>
 8001f2c:	e082      	b.n	8002034 <TIM17_IRQHandler+0x440>
			if(mode8_cntr1 == 0){ //state 1
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <TIM17_IRQHandler+0x380>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d153      	bne.n	8001fde <TIM17_IRQHandler+0x3ea>
				if(mode8_cntr2<num_pulse_pwm_tmr17){ //pwm counter
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <TIM17_IRQHandler+0x384>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <TIM17_IRQHandler+0x378>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d21b      	bcs.n	8001f7c <TIM17_IRQHandler+0x388>
					mode8_cntr2++;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <TIM17_IRQHandler+0x384>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <TIM17_IRQHandler+0x384>)
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	e1d1      	b.n	80022f4 <TIM17_IRQHandler+0x700>
 8001f50:	40014800 	.word	0x40014800
 8001f54:	20008560 	.word	0x20008560
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	200004d8 	.word	0x200004d8
 8001f60:	200085c4 	.word	0x200085c4
 8001f64:	200004dc 	.word	0x200004dc
 8001f68:	200004e0 	.word	0x200004e0
 8001f6c:	200085c8 	.word	0x200085c8
 8001f70:	200004e4 	.word	0x200004e4
 8001f74:	200004e8 	.word	0x200004e8
 8001f78:	200004ec 	.word	0x200004ec
					TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8001f7c:	4bdf      	ldr	r3, [pc, #892]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	4bde      	ldr	r3, [pc, #888]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001f82:	2110      	movs	r1, #16
 8001f84:	430a      	orrs	r2, r1
 8001f86:	619a      	str	r2, [r3, #24]
					TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001f88:	4bdc      	ldr	r3, [pc, #880]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	4bdb      	ldr	r3, [pc, #876]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001f8e:	2120      	movs	r1, #32
 8001f90:	438a      	bics	r2, r1
 8001f92:	619a      	str	r2, [r3, #24]
					TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001f94:	4bd9      	ldr	r3, [pc, #868]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	4bd8      	ldr	r3, [pc, #864]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	619a      	str	r2, [r3, #24]
					TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8001fa0:	4bd6      	ldr	r3, [pc, #856]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	4bd5      	ldr	r3, [pc, #852]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fa6:	49d6      	ldr	r1, [pc, #856]	; (8002300 <TIM17_IRQHandler+0x70c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	619a      	str	r2, [r3, #24]
					TIM17->ARR = (uint32_t)t2_tmr17;
 8001fac:	4ad3      	ldr	r2, [pc, #844]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fae:	4bd5      	ldr	r3, [pc, #852]	; (8002304 <TIM17_IRQHandler+0x710>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM17->EGR |= TIM_EGR_UG;
 8001fb4:	4bd1      	ldr	r3, [pc, #836]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	4bd0      	ldr	r3, [pc, #832]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	615a      	str	r2, [r3, #20]
				   TIM17->CR1 |= TIM_CR1_CEN;
 8001fc0:	4bce      	ldr	r3, [pc, #824]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4bcd      	ldr	r3, [pc, #820]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
				   mode8_cntr2=0;
 8001fcc:	4bce      	ldr	r3, [pc, #824]	; (8002308 <TIM17_IRQHandler+0x714>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
				   mode8_cntr1++;
 8001fd2:	4bce      	ldr	r3, [pc, #824]	; (800230c <TIM17_IRQHandler+0x718>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4bcc      	ldr	r3, [pc, #816]	; (800230c <TIM17_IRQHandler+0x718>)
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	e18a      	b.n	80022f4 <TIM17_IRQHandler+0x700>
			 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8001fde:	4bc7      	ldr	r3, [pc, #796]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	4bc6      	ldr	r3, [pc, #792]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	619a      	str	r2, [r3, #24]
			 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8001fea:	4bc4      	ldr	r3, [pc, #784]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	4bc3      	ldr	r3, [pc, #780]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	619a      	str	r2, [r3, #24]
			 	TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8001ff6:	4bc1      	ldr	r3, [pc, #772]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001ff8:	699a      	ldr	r2, [r3, #24]
 8001ffa:	4bc0      	ldr	r3, [pc, #768]	; (80022fc <TIM17_IRQHandler+0x708>)
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	430a      	orrs	r2, r1
 8002000:	619a      	str	r2, [r3, #24]
			 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002002:	4bbe      	ldr	r3, [pc, #760]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	4bbd      	ldr	r3, [pc, #756]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002008:	49bd      	ldr	r1, [pc, #756]	; (8002300 <TIM17_IRQHandler+0x70c>)
 800200a:	400a      	ands	r2, r1
 800200c:	619a      	str	r2, [r3, #24]
			   TIM17->EGR |= TIM_EGR_UG;
 800200e:	4bbb      	ldr	r3, [pc, #748]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	4bba      	ldr	r3, [pc, #744]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002014:	2101      	movs	r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 800201a:	4bb8      	ldr	r3, [pc, #736]	; (80022fc <TIM17_IRQHandler+0x708>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4bb7      	ldr	r3, [pc, #732]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002020:	2101      	movs	r1, #1
 8002022:	438a      	bics	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
			   mode8_cntr2=0;
 8002026:	4bb8      	ldr	r3, [pc, #736]	; (8002308 <TIM17_IRQHandler+0x714>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
			   mode8_cntr1=0;
 800202c:	4bb7      	ldr	r3, [pc, #732]	; (800230c <TIM17_IRQHandler+0x718>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
}
 8002032:	e15f      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 9){
 8002034:	4bb6      	ldr	r3, [pc, #728]	; (8002310 <TIM17_IRQHandler+0x71c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b09      	cmp	r3, #9
 800203a:	d16c      	bne.n	8002116 <TIM17_IRQHandler+0x522>
			if(mode9_cntr1 == 0){ //state 1
 800203c:	4bb5      	ldr	r3, [pc, #724]	; (8002314 <TIM17_IRQHandler+0x720>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d13d      	bne.n	80020c0 <TIM17_IRQHandler+0x4cc>
				if(mode9_cntr2<num_pulse_pwm_tmr17){ //pwm counter
 8002044:	4bb4      	ldr	r3, [pc, #720]	; (8002318 <TIM17_IRQHandler+0x724>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	001a      	movs	r2, r3
 800204a:	4bb4      	ldr	r3, [pc, #720]	; (800231c <TIM17_IRQHandler+0x728>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d205      	bcs.n	800205e <TIM17_IRQHandler+0x46a>
					mode9_cntr2++;
 8002052:	4bb1      	ldr	r3, [pc, #708]	; (8002318 <TIM17_IRQHandler+0x724>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	4baf      	ldr	r3, [pc, #700]	; (8002318 <TIM17_IRQHandler+0x724>)
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	e14a      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 800205e:	4ba7      	ldr	r3, [pc, #668]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	4ba6      	ldr	r3, [pc, #664]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002064:	2110      	movs	r1, #16
 8002066:	438a      	bics	r2, r1
 8002068:	619a      	str	r2, [r3, #24]
				 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 800206a:	4ba4      	ldr	r3, [pc, #656]	; (80022fc <TIM17_IRQHandler+0x708>)
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	4ba3      	ldr	r3, [pc, #652]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002070:	2120      	movs	r1, #32
 8002072:	438a      	bics	r2, r1
 8002074:	619a      	str	r2, [r3, #24]
				 	TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002076:	4ba1      	ldr	r3, [pc, #644]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	4ba0      	ldr	r3, [pc, #640]	; (80022fc <TIM17_IRQHandler+0x708>)
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	430a      	orrs	r2, r1
 8002080:	619a      	str	r2, [r3, #24]
				 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002082:	4b9e      	ldr	r3, [pc, #632]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002088:	499d      	ldr	r1, [pc, #628]	; (8002300 <TIM17_IRQHandler+0x70c>)
 800208a:	400a      	ands	r2, r1
 800208c:	619a      	str	r2, [r3, #24]
					TIM17->ARR = (uint32_t)t2_tmr17;
 800208e:	4a9b      	ldr	r2, [pc, #620]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002090:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <TIM17_IRQHandler+0x710>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM17->EGR |= TIM_EGR_UG;
 8002096:	4b99      	ldr	r3, [pc, #612]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	4b98      	ldr	r3, [pc, #608]	; (80022fc <TIM17_IRQHandler+0x708>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	615a      	str	r2, [r3, #20]
				   TIM17->CR1 |= TIM_CR1_CEN;
 80020a2:	4b96      	ldr	r3, [pc, #600]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b95      	ldr	r3, [pc, #596]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
				   mode9_cntr2=0;
 80020ae:	4b9a      	ldr	r3, [pc, #616]	; (8002318 <TIM17_IRQHandler+0x724>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
				   mode9_cntr1++;
 80020b4:	4b97      	ldr	r3, [pc, #604]	; (8002314 <TIM17_IRQHandler+0x720>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	4b96      	ldr	r3, [pc, #600]	; (8002314 <TIM17_IRQHandler+0x720>)
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	e119      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 80020c0:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	4b8d      	ldr	r3, [pc, #564]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020c6:	2110      	movs	r1, #16
 80020c8:	430a      	orrs	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80020cc:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	4b8a      	ldr	r3, [pc, #552]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020d2:	2120      	movs	r1, #32
 80020d4:	438a      	bics	r2, r1
 80020d6:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 80020d8:	4b88      	ldr	r3, [pc, #544]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b87      	ldr	r3, [pc, #540]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	430a      	orrs	r2, r1
 80020e2:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80020e4:	4b85      	ldr	r3, [pc, #532]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	4b84      	ldr	r3, [pc, #528]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020ea:	4985      	ldr	r1, [pc, #532]	; (8002300 <TIM17_IRQHandler+0x70c>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	619a      	str	r2, [r3, #24]
			   TIM17->EGR |= TIM_EGR_UG;
 80020f0:	4b82      	ldr	r3, [pc, #520]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	4b81      	ldr	r3, [pc, #516]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	430a      	orrs	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 80020fc:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <TIM17_IRQHandler+0x708>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b7e      	ldr	r3, [pc, #504]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
			   mode9_cntr2=0;
 8002108:	4b83      	ldr	r3, [pc, #524]	; (8002318 <TIM17_IRQHandler+0x724>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
			   mode9_cntr1=0;
 800210e:	4b81      	ldr	r3, [pc, #516]	; (8002314 <TIM17_IRQHandler+0x720>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	e0ee      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 10){
 8002116:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <TIM17_IRQHandler+0x71c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b0a      	cmp	r3, #10
 800211c:	d173      	bne.n	8002206 <TIM17_IRQHandler+0x612>
			if (mode10_cntr1 == 0){ //state1: t1 finished, set the t2
 800211e:	4b80      	ldr	r3, [pc, #512]	; (8002320 <TIM17_IRQHandler+0x72c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d137      	bne.n	8002196 <TIM17_IRQHandler+0x5a2>
				TIM17->ARR = (uint32_t)(h_pwm_tmr17+l_pwm_tmr17);
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <TIM17_IRQHandler+0x730>)
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <TIM17_IRQHandler+0x734>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b73      	ldr	r3, [pc, #460]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002130:	188a      	adds	r2, r1, r2
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM17->CCR1 = (uint32_t)h_pwm_tmr17;
 8002134:	4a71      	ldr	r2, [pc, #452]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002136:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <TIM17_IRQHandler+0x730>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6353      	str	r3, [r2, #52]	; 0x34
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 800213c:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <TIM17_IRQHandler+0x708>)
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002142:	2110      	movs	r1, #16
 8002144:	438a      	bics	r2, r1
 8002146:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_1;
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <TIM17_IRQHandler+0x708>)
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	4b6b      	ldr	r3, [pc, #428]	; (80022fc <TIM17_IRQHandler+0x708>)
 800214e:	2120      	movs	r1, #32
 8002150:	430a      	orrs	r2, r1
 8002152:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002154:	4b69      	ldr	r3, [pc, #420]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <TIM17_IRQHandler+0x708>)
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	430a      	orrs	r2, r1
 800215e:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	4b65      	ldr	r3, [pc, #404]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002166:	4966      	ldr	r1, [pc, #408]	; (8002300 <TIM17_IRQHandler+0x70c>)
 8002168:	400a      	ands	r2, r1
 800216a:	619a      	str	r2, [r3, #24]
				TIM17->EGR |= TIM_EGR_UG;
 800216c:	4b63      	ldr	r3, [pc, #396]	; (80022fc <TIM17_IRQHandler+0x708>)
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002172:	2101      	movs	r1, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 |= TIM_CR1_CEN;
 8002178:	4b60      	ldr	r3, [pc, #384]	; (80022fc <TIM17_IRQHandler+0x708>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <TIM17_IRQHandler+0x708>)
 800217e:	2101      	movs	r1, #1
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
				mode10_cntr1++; //go to next state
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <TIM17_IRQHandler+0x72c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	4b65      	ldr	r3, [pc, #404]	; (8002320 <TIM17_IRQHandler+0x72c>)
 800218c:	601a      	str	r2, [r3, #0]
				mode10_cntr2 = 0;
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <TIM17_IRQHandler+0x738>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	e0ae      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				if(mode10_cntr2<num_pulse_pwm_tmr17){ //pwm counter
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <TIM17_IRQHandler+0x738>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	001a      	movs	r2, r3
 800219c:	4b5f      	ldr	r3, [pc, #380]	; (800231c <TIM17_IRQHandler+0x728>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d205      	bcs.n	80021b0 <TIM17_IRQHandler+0x5bc>
					mode10_cntr2++;
 80021a4:	4b61      	ldr	r3, [pc, #388]	; (800232c <TIM17_IRQHandler+0x738>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4b60      	ldr	r3, [pc, #384]	; (800232c <TIM17_IRQHandler+0x738>)
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	e0a1      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80021b0:	4b52      	ldr	r3, [pc, #328]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	4b51      	ldr	r3, [pc, #324]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021b6:	2110      	movs	r1, #16
 80021b8:	438a      	bics	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
				 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80021bc:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021c2:	2120      	movs	r1, #32
 80021c4:	438a      	bics	r2, r1
 80021c6:	619a      	str	r2, [r3, #24]
				 	TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	430a      	orrs	r2, r1
 80021d2:	619a      	str	r2, [r3, #24]
				 	TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80021d4:	4b49      	ldr	r3, [pc, #292]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	4b48      	ldr	r3, [pc, #288]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021da:	4949      	ldr	r1, [pc, #292]	; (8002300 <TIM17_IRQHandler+0x70c>)
 80021dc:	400a      	ands	r2, r1
 80021de:	619a      	str	r2, [r3, #24]
					TIM17->EGR |= TIM_EGR_UG;
 80021e0:	4b46      	ldr	r3, [pc, #280]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	4b45      	ldr	r3, [pc, #276]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	615a      	str	r2, [r3, #20]
					TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 80021ec:	4b43      	ldr	r3, [pc, #268]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <TIM17_IRQHandler+0x708>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	438a      	bics	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
				   mode10_cntr2=0;
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <TIM17_IRQHandler+0x738>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
				   mode10_cntr1=0;
 80021fe:	4b48      	ldr	r3, [pc, #288]	; (8002320 <TIM17_IRQHandler+0x72c>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	e076      	b.n	80022f4 <TIM17_IRQHandler+0x700>
		else if (mode_tmr17 == 11){
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <TIM17_IRQHandler+0x71c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b0b      	cmp	r3, #11
 800220c:	d172      	bne.n	80022f4 <TIM17_IRQHandler+0x700>
			if (mode11_cntr1 == 0){ //state1: t1 finished, set the t2
 800220e:	4b48      	ldr	r3, [pc, #288]	; (8002330 <TIM17_IRQHandler+0x73c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d137      	bne.n	8002286 <TIM17_IRQHandler+0x692>
				TIM17->ARR = (uint32_t)(h_pwm_tmr17+l_pwm_tmr17);
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <TIM17_IRQHandler+0x730>)
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	4b43      	ldr	r3, [pc, #268]	; (8002328 <TIM17_IRQHandler+0x734>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b37      	ldr	r3, [pc, #220]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002220:	188a      	adds	r2, r1, r2
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM17->CCR1 = (uint32_t)h_pwm_tmr17;
 8002224:	4a35      	ldr	r2, [pc, #212]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002226:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <TIM17_IRQHandler+0x730>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6353      	str	r3, [r2, #52]	; 0x34
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <TIM17_IRQHandler+0x708>)
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	4b32      	ldr	r3, [pc, #200]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002232:	2110      	movs	r1, #16
 8002234:	438a      	bics	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_1;
 8002238:	4b30      	ldr	r3, [pc, #192]	; (80022fc <TIM17_IRQHandler+0x708>)
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <TIM17_IRQHandler+0x708>)
 800223e:	2120      	movs	r1, #32
 8002240:	430a      	orrs	r2, r1
 8002242:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <TIM17_IRQHandler+0x708>)
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	430a      	orrs	r2, r1
 800224e:	619a      	str	r2, [r3, #24]
				TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002256:	492a      	ldr	r1, [pc, #168]	; (8002300 <TIM17_IRQHandler+0x70c>)
 8002258:	400a      	ands	r2, r1
 800225a:	619a      	str	r2, [r3, #24]
				TIM17->EGR |= TIM_EGR_UG;
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <TIM17_IRQHandler+0x708>)
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <TIM17_IRQHandler+0x708>)
 8002262:	2101      	movs	r1, #1
 8002264:	430a      	orrs	r2, r1
 8002266:	615a      	str	r2, [r3, #20]
			   TIM17->CR1 |= TIM_CR1_CEN;
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <TIM17_IRQHandler+0x708>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <TIM17_IRQHandler+0x708>)
 800226e:	2101      	movs	r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
				mode11_cntr1++; //go to next state
 8002274:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <TIM17_IRQHandler+0x73c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <TIM17_IRQHandler+0x73c>)
 800227c:	601a      	str	r2, [r3, #0]
				mode11_cntr2 = 0;
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <TIM17_IRQHandler+0x740>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	e036      	b.n	80022f4 <TIM17_IRQHandler+0x700>
				if(mode11_cntr2<num_pulse_pwm_tmr17){ //pwm counter
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <TIM17_IRQHandler+0x740>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	001a      	movs	r2, r3
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <TIM17_IRQHandler+0x728>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d205      	bcs.n	80022a0 <TIM17_IRQHandler+0x6ac>
					mode11_cntr2++;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <TIM17_IRQHandler+0x740>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <TIM17_IRQHandler+0x740>)
 800229c:	601a      	str	r2, [r3, #0]
}
 800229e:	e029      	b.n	80022f4 <TIM17_IRQHandler+0x700>
					TIM17->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022a6:	2110      	movs	r1, #16
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]
					TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022b2:	2120      	movs	r1, #32
 80022b4:	438a      	bics	r2, r1
 80022b6:	619a      	str	r2, [r3, #24]
					TIM17->CCMR1 |= TIM_CCMR1_OC1M_2;
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022be:	2140      	movs	r1, #64	; 0x40
 80022c0:	430a      	orrs	r2, r1
 80022c2:	619a      	str	r2, [r3, #24]
					TIM17->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <TIM17_IRQHandler+0x70c>)
 80022cc:	400a      	ands	r2, r1
 80022ce:	619a      	str	r2, [r3, #24]
					TIM17->EGR |= TIM_EGR_UG;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	615a      	str	r2, [r3, #20]
					TIM17->CR1 &= ~TIM_CR1_CEN; //disable
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <TIM17_IRQHandler+0x708>)
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]
				   mode11_cntr2=0;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <TIM17_IRQHandler+0x740>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
				   mode11_cntr1=0;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <TIM17_IRQHandler+0x73c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40014800 	.word	0x40014800
 8002300:	fffeffff 	.word	0xfffeffff
 8002304:	200085c4 	.word	0x200085c4
 8002308:	200004ec 	.word	0x200004ec
 800230c:	200004e8 	.word	0x200004e8
 8002310:	20008560 	.word	0x20008560
 8002314:	200004f0 	.word	0x200004f0
 8002318:	200004f4 	.word	0x200004f4
 800231c:	200085c8 	.word	0x200085c8
 8002320:	200004f8 	.word	0x200004f8
 8002324:	20008584 	.word	0x20008584
 8002328:	200084e8 	.word	0x200084e8
 800232c:	200004fc 	.word	0x200004fc
 8002330:	20000500 	.word	0x20000500
 8002334:	20000504 	.word	0x20000504

08002338 <TIM14_IRQHandler>:
   NVIC_EnableIRQ(TIM14_IRQn); // Enable interrupt from TIM3 (NVIC level)
}


void TIM14_IRQHandler(void) // interrupt routine
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	  if(TIM14->SR & TIM_SR_UIF) // if UIF flag is set
 800233c:	4bd5      	ldr	r3, [pc, #852]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d100      	bne.n	8002348 <TIM14_IRQHandler+0x10>
 8002346:	e377      	b.n	8002a38 <TIM14_IRQHandler+0x700>
	  {
	    TIM14->SR &= ~TIM_SR_UIF; // clear UIF flag
 8002348:	4bd2      	ldr	r3, [pc, #840]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	4bd1      	ldr	r3, [pc, #836]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	611a      	str	r2, [r3, #16]


		if (mode_tmr14 == TRG_MODE_LOW){
 8002354:	4bd0      	ldr	r3, [pc, #832]	; (8002698 <TIM14_IRQHandler+0x360>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d100      	bne.n	800235e <TIM14_IRQHandler+0x26>
 800235c:	e36c      	b.n	8002a38 <TIM14_IRQHandler+0x700>
			//do nothing
		}
		else if(mode_tmr14 == TRG_MODE_HIGH){
 800235e:	4bce      	ldr	r3, [pc, #824]	; (8002698 <TIM14_IRQHandler+0x360>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d100      	bne.n	8002368 <TIM14_IRQHandler+0x30>
 8002366:	e367      	b.n	8002a38 <TIM14_IRQHandler+0x700>
			//do nothing
		}
		else if (mode_tmr14 == TRG_MODE_T1HIGH_LOW){
 8002368:	4bcb      	ldr	r3, [pc, #812]	; (8002698 <TIM14_IRQHandler+0x360>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d124      	bne.n	80023ba <TIM14_IRQHandler+0x82>
			//==when recieve intr(t1 done), put low
			//put low
		 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002370:	4bc8      	ldr	r3, [pc, #800]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	4bc7      	ldr	r3, [pc, #796]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002376:	2110      	movs	r1, #16
 8002378:	438a      	bics	r2, r1
 800237a:	619a      	str	r2, [r3, #24]
		 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 800237c:	4bc5      	ldr	r3, [pc, #788]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	4bc4      	ldr	r3, [pc, #784]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002382:	2120      	movs	r1, #32
 8002384:	438a      	bics	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
		 	TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002388:	4bc2      	ldr	r3, [pc, #776]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	4bc1      	ldr	r3, [pc, #772]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800238e:	2140      	movs	r1, #64	; 0x40
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]
		 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002394:	4bbf      	ldr	r3, [pc, #764]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	4bbe      	ldr	r3, [pc, #760]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800239a:	49c0      	ldr	r1, [pc, #768]	; (800269c <TIM14_IRQHandler+0x364>)
 800239c:	400a      	ands	r2, r1
 800239e:	619a      	str	r2, [r3, #24]
		   TIM14->EGR |= TIM_EGR_UG;
 80023a0:	4bbc      	ldr	r3, [pc, #752]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	4bbb      	ldr	r3, [pc, #748]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	615a      	str	r2, [r3, #20]
		   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 80023ac:	4bb9      	ldr	r3, [pc, #740]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4bb8      	ldr	r3, [pc, #736]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	438a      	bics	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
				}
			}
		}

	  }
}
 80023b8:	e33e      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == TRG_MODE_T1LOW_HIGH){
 80023ba:	4bb7      	ldr	r3, [pc, #732]	; (8002698 <TIM14_IRQHandler+0x360>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d124      	bne.n	800240c <TIM14_IRQHandler+0xd4>
			TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 80023c2:	4bb4      	ldr	r3, [pc, #720]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	4bb3      	ldr	r3, [pc, #716]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023c8:	2110      	movs	r1, #16
 80023ca:	430a      	orrs	r2, r1
 80023cc:	619a      	str	r2, [r3, #24]
			TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80023ce:	4bb1      	ldr	r3, [pc, #708]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023d4:	2120      	movs	r1, #32
 80023d6:	438a      	bics	r2, r1
 80023d8:	619a      	str	r2, [r3, #24]
			TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 80023da:	4bae      	ldr	r3, [pc, #696]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	4bad      	ldr	r3, [pc, #692]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	430a      	orrs	r2, r1
 80023e4:	619a      	str	r2, [r3, #24]
			TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80023e6:	4bab      	ldr	r3, [pc, #684]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	4baa      	ldr	r3, [pc, #680]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023ec:	49ab      	ldr	r1, [pc, #684]	; (800269c <TIM14_IRQHandler+0x364>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	619a      	str	r2, [r3, #24]
			TIM14->EGR |= TIM_EGR_UG;
 80023f2:	4ba8      	ldr	r3, [pc, #672]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	4ba7      	ldr	r3, [pc, #668]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	615a      	str	r2, [r3, #20]
		   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 80023fe:	4ba5      	ldr	r3, [pc, #660]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4ba4      	ldr	r3, [pc, #656]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002404:	2101      	movs	r1, #1
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	e315      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 4){
 800240c:	4ba2      	ldr	r3, [pc, #648]	; (8002698 <TIM14_IRQHandler+0x360>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d159      	bne.n	80024c8 <TIM14_IRQHandler+0x190>
			if (mode4_cntr == 0){
 8002414:	4ba2      	ldr	r3, [pc, #648]	; (80026a0 <TIM14_IRQHandler+0x368>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d12d      	bne.n	8002478 <TIM14_IRQHandler+0x140>
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 800241c:	4b9d      	ldr	r3, [pc, #628]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	4b9c      	ldr	r3, [pc, #624]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002422:	2110      	movs	r1, #16
 8002424:	430a      	orrs	r2, r1
 8002426:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002428:	4b9a      	ldr	r3, [pc, #616]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	4b99      	ldr	r3, [pc, #612]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800242e:	2120      	movs	r1, #32
 8002430:	438a      	bics	r2, r1
 8002432:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002434:	4b97      	ldr	r3, [pc, #604]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	4b96      	ldr	r3, [pc, #600]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	430a      	orrs	r2, r1
 800243e:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002440:	4b94      	ldr	r3, [pc, #592]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	4b93      	ldr	r3, [pc, #588]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002446:	4995      	ldr	r1, [pc, #596]	; (800269c <TIM14_IRQHandler+0x364>)
 8002448:	400a      	ands	r2, r1
 800244a:	619a      	str	r2, [r3, #24]
				TIM14->ARR = (uint32_t)t2_tmr14;
 800244c:	4a91      	ldr	r2, [pc, #580]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800244e:	4b95      	ldr	r3, [pc, #596]	; (80026a4 <TIM14_IRQHandler+0x36c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM14->EGR |= TIM_EGR_UG;
 8002454:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 |= TIM_CR1_CEN;
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b8b      	ldr	r3, [pc, #556]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002466:	2101      	movs	r1, #1
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
			   mode4_cntr++;
 800246c:	4b8c      	ldr	r3, [pc, #560]	; (80026a0 <TIM14_IRQHandler+0x368>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <TIM14_IRQHandler+0x368>)
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	e2df      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002478:	4b86      	ldr	r3, [pc, #536]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800247e:	2110      	movs	r1, #16
 8002480:	438a      	bics	r2, r1
 8002482:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002484:	4b83      	ldr	r3, [pc, #524]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002486:	699a      	ldr	r2, [r3, #24]
 8002488:	4b82      	ldr	r3, [pc, #520]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800248a:	2120      	movs	r1, #32
 800248c:	438a      	bics	r2, r1
 800248e:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002490:	4b80      	ldr	r3, [pc, #512]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	430a      	orrs	r2, r1
 800249a:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800249c:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	4b7c      	ldr	r3, [pc, #496]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024a2:	497e      	ldr	r1, [pc, #504]	; (800269c <TIM14_IRQHandler+0x364>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	619a      	str	r2, [r3, #24]
			   TIM14->EGR |= TIM_EGR_UG;
 80024a8:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 80024b4:	4b77      	ldr	r3, [pc, #476]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
				mode4_cntr = 0;
 80024c0:	4b77      	ldr	r3, [pc, #476]	; (80026a0 <TIM14_IRQHandler+0x368>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	e2b7      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 5){
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <TIM14_IRQHandler+0x360>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d159      	bne.n	8002584 <TIM14_IRQHandler+0x24c>
			if (mode5_cntr == 0){
 80024d0:	4b75      	ldr	r3, [pc, #468]	; (80026a8 <TIM14_IRQHandler+0x370>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d12d      	bne.n	8002534 <TIM14_IRQHandler+0x1fc>
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80024d8:	4b6e      	ldr	r3, [pc, #440]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024de:	2110      	movs	r1, #16
 80024e0:	438a      	bics	r2, r1
 80024e2:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80024e4:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024ea:	2120      	movs	r1, #32
 80024ec:	438a      	bics	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	4b67      	ldr	r3, [pc, #412]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	430a      	orrs	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80024fc:	4b65      	ldr	r3, [pc, #404]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	4b64      	ldr	r3, [pc, #400]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002502:	4966      	ldr	r1, [pc, #408]	; (800269c <TIM14_IRQHandler+0x364>)
 8002504:	400a      	ands	r2, r1
 8002506:	619a      	str	r2, [r3, #24]
				TIM14->ARR = (uint32_t)t2_tmr14;
 8002508:	4a62      	ldr	r2, [pc, #392]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <TIM14_IRQHandler+0x36c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM14->EGR |= TIM_EGR_UG;
 8002510:	4b60      	ldr	r3, [pc, #384]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 |= TIM_CR1_CEN;
 800251c:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002522:	2101      	movs	r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
			   mode5_cntr++;
 8002528:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <TIM14_IRQHandler+0x370>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <TIM14_IRQHandler+0x370>)
 8002530:	601a      	str	r2, [r3, #0]
}
 8002532:	e281      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002534:	4b57      	ldr	r3, [pc, #348]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800253a:	2110      	movs	r1, #16
 800253c:	430a      	orrs	r2, r1
 800253e:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002540:	4b54      	ldr	r3, [pc, #336]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002546:	2120      	movs	r1, #32
 8002548:	438a      	bics	r2, r1
 800254a:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 800254c:	4b51      	ldr	r3, [pc, #324]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	4b50      	ldr	r3, [pc, #320]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002558:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800255e:	494f      	ldr	r1, [pc, #316]	; (800269c <TIM14_IRQHandler+0x364>)
 8002560:	400a      	ands	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
			   TIM14->EGR |= TIM_EGR_UG;
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800256a:	2101      	movs	r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b47      	ldr	r3, [pc, #284]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
				mode5_cntr = 0;
 800257c:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <TIM14_IRQHandler+0x370>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	e259      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 6){
 8002584:	4b44      	ldr	r3, [pc, #272]	; (8002698 <TIM14_IRQHandler+0x360>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d134      	bne.n	80025f6 <TIM14_IRQHandler+0x2be>
			if(mode6_cntr<num_pulse_pwm_tmr14){
 800258c:	4b47      	ldr	r3, [pc, #284]	; (80026ac <TIM14_IRQHandler+0x374>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	001a      	movs	r2, r3
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <TIM14_IRQHandler+0x378>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d205      	bcs.n	80025a6 <TIM14_IRQHandler+0x26e>
				mode6_cntr++;
 800259a:	4b44      	ldr	r3, [pc, #272]	; (80026ac <TIM14_IRQHandler+0x374>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <TIM14_IRQHandler+0x374>)
 80025a2:	601a      	str	r2, [r3, #0]
}
 80025a4:	e248      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025ac:	2110      	movs	r1, #16
 80025ae:	438a      	bics	r2, r1
 80025b0:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025b8:	2120      	movs	r1, #32
 80025ba:	438a      	bics	r2, r1
 80025bc:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 80025be:	4b35      	ldr	r3, [pc, #212]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	430a      	orrs	r2, r1
 80025c8:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025d0:	4932      	ldr	r1, [pc, #200]	; (800269c <TIM14_IRQHandler+0x364>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	619a      	str	r2, [r3, #24]
			   TIM14->EGR |= TIM_EGR_UG;
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <TIM14_IRQHandler+0x35c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	438a      	bics	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
				mode6_cntr=0;
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <TIM14_IRQHandler+0x374>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	e220      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 7){
 80025f6:	4b28      	ldr	r3, [pc, #160]	; (8002698 <TIM14_IRQHandler+0x360>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b07      	cmp	r3, #7
 80025fc:	d134      	bne.n	8002668 <TIM14_IRQHandler+0x330>
			if(mode7_cntr<num_pulse_pwm_tmr14){
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <TIM14_IRQHandler+0x37c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <TIM14_IRQHandler+0x378>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d205      	bcs.n	8002618 <TIM14_IRQHandler+0x2e0>
				mode7_cntr++;
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <TIM14_IRQHandler+0x37c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <TIM14_IRQHandler+0x37c>)
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	e20f      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800261e:	2110      	movs	r1, #16
 8002620:	430a      	orrs	r2, r1
 8002622:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800262a:	2120      	movs	r1, #32
 800262c:	438a      	bics	r2, r1
 800262e:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002642:	4916      	ldr	r1, [pc, #88]	; (800269c <TIM14_IRQHandler+0x364>)
 8002644:	400a      	ands	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
			   TIM14->EGR |= TIM_EGR_UG;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <TIM14_IRQHandler+0x35c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <TIM14_IRQHandler+0x35c>)
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
				mode7_cntr=0;
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <TIM14_IRQHandler+0x37c>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	e1e7      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 8){
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <TIM14_IRQHandler+0x360>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d000      	beq.n	8002672 <TIM14_IRQHandler+0x33a>
 8002670:	e082      	b.n	8002778 <TIM14_IRQHandler+0x440>
			if(mode8_cntr1 == 0){ //state 1
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <TIM14_IRQHandler+0x380>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d153      	bne.n	8002722 <TIM14_IRQHandler+0x3ea>
				if(mode8_cntr2<num_pulse_pwm_tmr14){ //pwm counter
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <TIM14_IRQHandler+0x384>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	001a      	movs	r2, r3
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <TIM14_IRQHandler+0x378>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d21b      	bcs.n	80026c0 <TIM14_IRQHandler+0x388>
					mode8_cntr2++;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <TIM14_IRQHandler+0x384>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <TIM14_IRQHandler+0x384>)
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	e1d1      	b.n	8002a38 <TIM14_IRQHandler+0x700>
 8002694:	40002000 	.word	0x40002000
 8002698:	200084f8 	.word	0x200084f8
 800269c:	fffeffff 	.word	0xfffeffff
 80026a0:	20000508 	.word	0x20000508
 80026a4:	200085f0 	.word	0x200085f0
 80026a8:	2000050c 	.word	0x2000050c
 80026ac:	20000510 	.word	0x20000510
 80026b0:	20008588 	.word	0x20008588
 80026b4:	20000514 	.word	0x20000514
 80026b8:	20000518 	.word	0x20000518
 80026bc:	2000051c 	.word	0x2000051c
					TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 80026c0:	4bdf      	ldr	r3, [pc, #892]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	4bde      	ldr	r3, [pc, #888]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026c6:	2110      	movs	r1, #16
 80026c8:	430a      	orrs	r2, r1
 80026ca:	619a      	str	r2, [r3, #24]
					TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80026cc:	4bdc      	ldr	r3, [pc, #880]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	4bdb      	ldr	r3, [pc, #876]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026d2:	2120      	movs	r1, #32
 80026d4:	438a      	bics	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]
					TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 80026d8:	4bd9      	ldr	r3, [pc, #868]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	4bd8      	ldr	r3, [pc, #864]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	430a      	orrs	r2, r1
 80026e2:	619a      	str	r2, [r3, #24]
					TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80026e4:	4bd6      	ldr	r3, [pc, #856]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	4bd5      	ldr	r3, [pc, #852]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026ea:	49d6      	ldr	r1, [pc, #856]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	619a      	str	r2, [r3, #24]
					TIM14->ARR = (uint32_t)t2_tmr14;
 80026f0:	4ad3      	ldr	r2, [pc, #844]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026f2:	4bd5      	ldr	r3, [pc, #852]	; (8002a48 <TIM14_IRQHandler+0x710>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM14->EGR |= TIM_EGR_UG;
 80026f8:	4bd1      	ldr	r3, [pc, #836]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	4bd0      	ldr	r3, [pc, #832]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	615a      	str	r2, [r3, #20]
				   TIM14->CR1 |= TIM_CR1_CEN;
 8002704:	4bce      	ldr	r3, [pc, #824]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4bcd      	ldr	r3, [pc, #820]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800270a:	2101      	movs	r1, #1
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
				   mode8_cntr2=0;
 8002710:	4bce      	ldr	r3, [pc, #824]	; (8002a4c <TIM14_IRQHandler+0x714>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
				   mode8_cntr1++;
 8002716:	4bce      	ldr	r3, [pc, #824]	; (8002a50 <TIM14_IRQHandler+0x718>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	4bcc      	ldr	r3, [pc, #816]	; (8002a50 <TIM14_IRQHandler+0x718>)
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	e18a      	b.n	8002a38 <TIM14_IRQHandler+0x700>
			 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002722:	4bc7      	ldr	r3, [pc, #796]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	4bc6      	ldr	r3, [pc, #792]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002728:	2110      	movs	r1, #16
 800272a:	438a      	bics	r2, r1
 800272c:	619a      	str	r2, [r3, #24]
			 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 800272e:	4bc4      	ldr	r3, [pc, #784]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	4bc3      	ldr	r3, [pc, #780]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002734:	2120      	movs	r1, #32
 8002736:	438a      	bics	r2, r1
 8002738:	619a      	str	r2, [r3, #24]
			 	TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 800273a:	4bc1      	ldr	r3, [pc, #772]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	4bc0      	ldr	r3, [pc, #768]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002740:	2140      	movs	r1, #64	; 0x40
 8002742:	430a      	orrs	r2, r1
 8002744:	619a      	str	r2, [r3, #24]
			 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002746:	4bbe      	ldr	r3, [pc, #760]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	4bbd      	ldr	r3, [pc, #756]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800274c:	49bd      	ldr	r1, [pc, #756]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 800274e:	400a      	ands	r2, r1
 8002750:	619a      	str	r2, [r3, #24]
			   TIM14->EGR |= TIM_EGR_UG;
 8002752:	4bbb      	ldr	r3, [pc, #748]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	4bba      	ldr	r3, [pc, #744]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002758:	2101      	movs	r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 800275e:	4bb8      	ldr	r3, [pc, #736]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4bb7      	ldr	r3, [pc, #732]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
			   mode8_cntr2=0;
 800276a:	4bb8      	ldr	r3, [pc, #736]	; (8002a4c <TIM14_IRQHandler+0x714>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
			   mode8_cntr1=0;
 8002770:	4bb7      	ldr	r3, [pc, #732]	; (8002a50 <TIM14_IRQHandler+0x718>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	e15f      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 9){
 8002778:	4bb6      	ldr	r3, [pc, #728]	; (8002a54 <TIM14_IRQHandler+0x71c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d16c      	bne.n	800285a <TIM14_IRQHandler+0x522>
			if(mode9_cntr1 == 0){ //state 1
 8002780:	4bb5      	ldr	r3, [pc, #724]	; (8002a58 <TIM14_IRQHandler+0x720>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d13d      	bne.n	8002804 <TIM14_IRQHandler+0x4cc>
				if(mode9_cntr2<num_pulse_pwm_tmr14){ //pwm counter
 8002788:	4bb4      	ldr	r3, [pc, #720]	; (8002a5c <TIM14_IRQHandler+0x724>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	001a      	movs	r2, r3
 800278e:	4bb4      	ldr	r3, [pc, #720]	; (8002a60 <TIM14_IRQHandler+0x728>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d205      	bcs.n	80027a2 <TIM14_IRQHandler+0x46a>
					mode9_cntr2++;
 8002796:	4bb1      	ldr	r3, [pc, #708]	; (8002a5c <TIM14_IRQHandler+0x724>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	4baf      	ldr	r3, [pc, #700]	; (8002a5c <TIM14_IRQHandler+0x724>)
 800279e:	601a      	str	r2, [r3, #0]
}
 80027a0:	e14a      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80027a2:	4ba7      	ldr	r3, [pc, #668]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	4ba6      	ldr	r3, [pc, #664]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027a8:	2110      	movs	r1, #16
 80027aa:	438a      	bics	r2, r1
 80027ac:	619a      	str	r2, [r3, #24]
				 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80027ae:	4ba4      	ldr	r3, [pc, #656]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	4ba3      	ldr	r3, [pc, #652]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027b4:	2120      	movs	r1, #32
 80027b6:	438a      	bics	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
				 	TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 80027ba:	4ba1      	ldr	r3, [pc, #644]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	4ba0      	ldr	r3, [pc, #640]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	430a      	orrs	r2, r1
 80027c4:	619a      	str	r2, [r3, #24]
				 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	4b9d      	ldr	r3, [pc, #628]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027cc:	499d      	ldr	r1, [pc, #628]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	619a      	str	r2, [r3, #24]
					TIM14->ARR = (uint32_t)t2_tmr14;
 80027d2:	4a9b      	ldr	r2, [pc, #620]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027d4:	4b9c      	ldr	r3, [pc, #624]	; (8002a48 <TIM14_IRQHandler+0x710>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM14->EGR |= TIM_EGR_UG;
 80027da:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	615a      	str	r2, [r3, #20]
				   TIM14->CR1 |= TIM_CR1_CEN;
 80027e6:	4b96      	ldr	r3, [pc, #600]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b95      	ldr	r3, [pc, #596]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80027ec:	2101      	movs	r1, #1
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
				   mode9_cntr2=0;
 80027f2:	4b9a      	ldr	r3, [pc, #616]	; (8002a5c <TIM14_IRQHandler+0x724>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
				   mode9_cntr1++;
 80027f8:	4b97      	ldr	r3, [pc, #604]	; (8002a58 <TIM14_IRQHandler+0x720>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	4b96      	ldr	r3, [pc, #600]	; (8002a58 <TIM14_IRQHandler+0x720>)
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	e119      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002804:	4b8e      	ldr	r3, [pc, #568]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800280a:	2110      	movs	r1, #16
 800280c:	430a      	orrs	r2, r1
 800280e:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002810:	4b8b      	ldr	r3, [pc, #556]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	4b8a      	ldr	r3, [pc, #552]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002816:	2120      	movs	r1, #32
 8002818:	438a      	bics	r2, r1
 800281a:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 800281c:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	430a      	orrs	r2, r1
 8002826:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002828:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800282e:	4985      	ldr	r1, [pc, #532]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 8002830:	400a      	ands	r2, r1
 8002832:	619a      	str	r2, [r3, #24]
			   TIM14->EGR |= TIM_EGR_UG;
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 8002840:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
			   mode9_cntr2=0;
 800284c:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <TIM14_IRQHandler+0x724>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
			   mode9_cntr1=0;
 8002852:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <TIM14_IRQHandler+0x720>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	e0ee      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 10){
 800285a:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <TIM14_IRQHandler+0x71c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b0a      	cmp	r3, #10
 8002860:	d173      	bne.n	800294a <TIM14_IRQHandler+0x612>
			if (mode10_cntr1 == 0){ //state1: t1 finished, set the t2
 8002862:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <TIM14_IRQHandler+0x72c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d137      	bne.n	80028da <TIM14_IRQHandler+0x5a2>
				TIM14->ARR = (uint32_t)(h_pwm_tmr14+l_pwm_tmr14);
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <TIM14_IRQHandler+0x730>)
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <TIM14_IRQHandler+0x734>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002874:	188a      	adds	r2, r1, r2
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM14->CCR1 = (uint32_t)h_pwm_tmr14;
 8002878:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800287a:	4b7b      	ldr	r3, [pc, #492]	; (8002a68 <TIM14_IRQHandler+0x730>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6353      	str	r3, [r2, #52]	; 0x34
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002886:	2110      	movs	r1, #16
 8002888:	438a      	bics	r2, r1
 800288a:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_1;
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002892:	2120      	movs	r1, #32
 8002894:	430a      	orrs	r2, r1
 8002896:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800289e:	2140      	movs	r1, #64	; 0x40
 80028a0:	430a      	orrs	r2, r1
 80028a2:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028a6:	699a      	ldr	r2, [r3, #24]
 80028a8:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028aa:	4966      	ldr	r1, [pc, #408]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	619a      	str	r2, [r3, #24]
				TIM14->EGR |= TIM_EGR_UG;
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 |= TIM_CR1_CEN;
 80028bc:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
				mode10_cntr1++; //go to next state
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <TIM14_IRQHandler+0x72c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <TIM14_IRQHandler+0x72c>)
 80028d0:	601a      	str	r2, [r3, #0]
				mode10_cntr2 = 0;
 80028d2:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <TIM14_IRQHandler+0x738>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
}
 80028d8:	e0ae      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				if(mode10_cntr2<num_pulse_pwm_tmr14){ //pwm counter
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <TIM14_IRQHandler+0x738>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	001a      	movs	r2, r3
 80028e0:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <TIM14_IRQHandler+0x728>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d205      	bcs.n	80028f4 <TIM14_IRQHandler+0x5bc>
					mode10_cntr2++;
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <TIM14_IRQHandler+0x738>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <TIM14_IRQHandler+0x738>)
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	e0a1      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80028f4:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80028fa:	2110      	movs	r1, #16
 80028fc:	438a      	bics	r2, r1
 80028fe:	619a      	str	r2, [r3, #24]
				 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002906:	2120      	movs	r1, #32
 8002908:	438a      	bics	r2, r1
 800290a:	619a      	str	r2, [r3, #24]
				 	TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002912:	2140      	movs	r1, #64	; 0x40
 8002914:	430a      	orrs	r2, r1
 8002916:	619a      	str	r2, [r3, #24]
				 	TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002918:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800291e:	4949      	ldr	r1, [pc, #292]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 8002920:	400a      	ands	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
					TIM14->EGR |= TIM_EGR_UG;
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	4b45      	ldr	r3, [pc, #276]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800292a:	2101      	movs	r1, #1
 800292c:	430a      	orrs	r2, r1
 800292e:	615a      	str	r2, [r3, #20]
					TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002936:	2101      	movs	r1, #1
 8002938:	438a      	bics	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
				   mode10_cntr2=0;
 800293c:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <TIM14_IRQHandler+0x738>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
				   mode10_cntr1=0;
 8002942:	4b48      	ldr	r3, [pc, #288]	; (8002a64 <TIM14_IRQHandler+0x72c>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	e076      	b.n	8002a38 <TIM14_IRQHandler+0x700>
		else if (mode_tmr14 == 11){
 800294a:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <TIM14_IRQHandler+0x71c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b0b      	cmp	r3, #11
 8002950:	d172      	bne.n	8002a38 <TIM14_IRQHandler+0x700>
			if (mode11_cntr1 == 0){ //state1: t1 finished, set the t2
 8002952:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <TIM14_IRQHandler+0x73c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d137      	bne.n	80029ca <TIM14_IRQHandler+0x692>
				TIM14->ARR = (uint32_t)(h_pwm_tmr14+l_pwm_tmr14);
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <TIM14_IRQHandler+0x730>)
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <TIM14_IRQHandler+0x734>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002964:	188a      	adds	r2, r1, r2
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM14->CCR1 = (uint32_t)h_pwm_tmr14;
 8002968:	4a35      	ldr	r2, [pc, #212]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <TIM14_IRQHandler+0x730>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6353      	str	r3, [r2, #52]	; 0x34
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002976:	2110      	movs	r1, #16
 8002978:	438a      	bics	r2, r1
 800297a:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_1;
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002982:	2120      	movs	r1, #32
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
				TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <TIM14_IRQHandler+0x708>)
 800299a:	492a      	ldr	r1, [pc, #168]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 800299c:	400a      	ands	r2, r1
 800299e:	619a      	str	r2, [r3, #24]
				TIM14->EGR |= TIM_EGR_UG;
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	615a      	str	r2, [r3, #20]
			   TIM14->CR1 |= TIM_CR1_CEN;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
				mode11_cntr1++; //go to next state
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <TIM14_IRQHandler+0x73c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <TIM14_IRQHandler+0x73c>)
 80029c0:	601a      	str	r2, [r3, #0]
				mode11_cntr2 = 0;
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <TIM14_IRQHandler+0x740>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
}
 80029c8:	e036      	b.n	8002a38 <TIM14_IRQHandler+0x700>
				if(mode11_cntr2<num_pulse_pwm_tmr14){ //pwm counter
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <TIM14_IRQHandler+0x740>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	001a      	movs	r2, r3
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <TIM14_IRQHandler+0x728>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d205      	bcs.n	80029e4 <TIM14_IRQHandler+0x6ac>
					mode11_cntr2++;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <TIM14_IRQHandler+0x740>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <TIM14_IRQHandler+0x740>)
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	e029      	b.n	8002a38 <TIM14_IRQHandler+0x700>
					TIM14->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029ea:	2110      	movs	r1, #16
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
					TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029f6:	2120      	movs	r1, #32
 80029f8:	438a      	bics	r2, r1
 80029fa:	619a      	str	r2, [r3, #24]
					TIM14->CCMR1 |= TIM_CCMR1_OC1M_2;
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <TIM14_IRQHandler+0x708>)
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a02:	2140      	movs	r1, #64	; 0x40
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
					TIM14->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <TIM14_IRQHandler+0x70c>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	619a      	str	r2, [r3, #24]
					TIM14->EGR |= TIM_EGR_UG;
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	615a      	str	r2, [r3, #20]
					TIM14->CR1 &= ~TIM_CR1_CEN; //disable
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <TIM14_IRQHandler+0x708>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
				   mode11_cntr2=0;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <TIM14_IRQHandler+0x740>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
				   mode11_cntr1=0;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <TIM14_IRQHandler+0x73c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	40002000 	.word	0x40002000
 8002a44:	fffeffff 	.word	0xfffeffff
 8002a48:	200085f0 	.word	0x200085f0
 8002a4c:	2000051c 	.word	0x2000051c
 8002a50:	20000518 	.word	0x20000518
 8002a54:	200084f8 	.word	0x200084f8
 8002a58:	20000520 	.word	0x20000520
 8002a5c:	20000524 	.word	0x20000524
 8002a60:	20008588 	.word	0x20008588
 8002a64:	20000528 	.word	0x20000528
 8002a68:	20008544 	.word	0x20008544
 8002a6c:	200085b4 	.word	0x200085b4
 8002a70:	2000052c 	.word	0x2000052c
 8002a74:	20000530 	.word	0x20000530
 8002a78:	20000534 	.word	0x20000534

08002a7c <TIM15_IRQHandler>:
   NVIC_EnableIRQ(TIM15_IRQn); // Enable interrupt from TIM3 (NVIC level)
}


void TIM15_IRQHandler(void) // interrupt routine
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	  if(TIM15->SR & TIM_SR_UIF) // if UIF flag is set
 8002a80:	4bd5      	ldr	r3, [pc, #852]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d100      	bne.n	8002a8c <TIM15_IRQHandler+0x10>
 8002a8a:	e377      	b.n	800317c <TIM15_IRQHandler+0x700>
	  {
	    TIM15->SR &= ~TIM_SR_UIF; // clear UIF flag
 8002a8c:	4bd2      	ldr	r3, [pc, #840]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	4bd1      	ldr	r3, [pc, #836]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	438a      	bics	r2, r1
 8002a96:	611a      	str	r2, [r3, #16]


		if (mode_tmr15 == TRG_MODE_LOW){
 8002a98:	4bd0      	ldr	r3, [pc, #832]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d100      	bne.n	8002aa2 <TIM15_IRQHandler+0x26>
 8002aa0:	e36c      	b.n	800317c <TIM15_IRQHandler+0x700>
			//do nothing
		}
		else if(mode_tmr15 == TRG_MODE_HIGH){
 8002aa2:	4bce      	ldr	r3, [pc, #824]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d100      	bne.n	8002aac <TIM15_IRQHandler+0x30>
 8002aaa:	e367      	b.n	800317c <TIM15_IRQHandler+0x700>
			//do nothing
		}
		else if (mode_tmr15 == TRG_MODE_T1HIGH_LOW){
 8002aac:	4bcb      	ldr	r3, [pc, #812]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d124      	bne.n	8002afe <TIM15_IRQHandler+0x82>
			//==when recieve intr(t1 done), put low
			//put low
		 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002ab4:	4bc8      	ldr	r3, [pc, #800]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	4bc7      	ldr	r3, [pc, #796]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002aba:	2110      	movs	r1, #16
 8002abc:	438a      	bics	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]
		 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002ac0:	4bc5      	ldr	r3, [pc, #788]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	4bc4      	ldr	r3, [pc, #784]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	438a      	bics	r2, r1
 8002aca:	619a      	str	r2, [r3, #24]
		 	TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002acc:	4bc2      	ldr	r3, [pc, #776]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	4bc1      	ldr	r3, [pc, #772]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	619a      	str	r2, [r3, #24]
		 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002ad8:	4bbf      	ldr	r3, [pc, #764]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	4bbe      	ldr	r3, [pc, #760]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ade:	49c0      	ldr	r1, [pc, #768]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	619a      	str	r2, [r3, #24]
		   TIM15->EGR |= TIM_EGR_UG;
 8002ae4:	4bbc      	ldr	r3, [pc, #752]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	4bbb      	ldr	r3, [pc, #748]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	615a      	str	r2, [r3, #20]
		   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002af0:	4bb9      	ldr	r3, [pc, #740]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4bb8      	ldr	r3, [pc, #736]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
				}
			}
		}

	  }
}
 8002afc:	e33e      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == TRG_MODE_T1LOW_HIGH){
 8002afe:	4bb7      	ldr	r3, [pc, #732]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d124      	bne.n	8002b50 <TIM15_IRQHandler+0xd4>
			TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002b06:	4bb4      	ldr	r3, [pc, #720]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	4bb3      	ldr	r3, [pc, #716]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	619a      	str	r2, [r3, #24]
			TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002b12:	4bb1      	ldr	r3, [pc, #708]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	4bb0      	ldr	r3, [pc, #704]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b18:	2120      	movs	r1, #32
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	619a      	str	r2, [r3, #24]
			TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002b1e:	4bae      	ldr	r3, [pc, #696]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	4bad      	ldr	r3, [pc, #692]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	430a      	orrs	r2, r1
 8002b28:	619a      	str	r2, [r3, #24]
			TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002b2a:	4bab      	ldr	r3, [pc, #684]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	4baa      	ldr	r3, [pc, #680]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b30:	49ab      	ldr	r1, [pc, #684]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002b32:	400a      	ands	r2, r1
 8002b34:	619a      	str	r2, [r3, #24]
			TIM15->EGR |= TIM_EGR_UG;
 8002b36:	4ba8      	ldr	r3, [pc, #672]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	4ba7      	ldr	r3, [pc, #668]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	615a      	str	r2, [r3, #20]
		   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002b42:	4ba5      	ldr	r3, [pc, #660]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4ba4      	ldr	r3, [pc, #656]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	438a      	bics	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	e315      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 4){
 8002b50:	4ba2      	ldr	r3, [pc, #648]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d159      	bne.n	8002c0c <TIM15_IRQHandler+0x190>
			if (mode4_cntr == 0){
 8002b58:	4ba2      	ldr	r3, [pc, #648]	; (8002de4 <TIM15_IRQHandler+0x368>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d12d      	bne.n	8002bbc <TIM15_IRQHandler+0x140>
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002b60:	4b9d      	ldr	r3, [pc, #628]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b66:	2110      	movs	r1, #16
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002b6c:	4b9a      	ldr	r3, [pc, #616]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	4b99      	ldr	r3, [pc, #612]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b72:	2120      	movs	r1, #32
 8002b74:	438a      	bics	r2, r1
 8002b76:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002b78:	4b97      	ldr	r3, [pc, #604]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b7e:	2140      	movs	r1, #64	; 0x40
 8002b80:	430a      	orrs	r2, r1
 8002b82:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002b84:	4b94      	ldr	r3, [pc, #592]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b8a:	4995      	ldr	r1, [pc, #596]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	619a      	str	r2, [r3, #24]
				TIM15->ARR = (uint32_t)t2_tmr15;
 8002b90:	4a91      	ldr	r2, [pc, #580]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b92:	4b95      	ldr	r3, [pc, #596]	; (8002de8 <TIM15_IRQHandler+0x36c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM15->EGR |= TIM_EGR_UG;
 8002b98:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	4b8e      	ldr	r3, [pc, #568]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 |= TIM_CR1_CEN;
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
			   mode4_cntr++;
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <TIM15_IRQHandler+0x368>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <TIM15_IRQHandler+0x368>)
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	e2df      	b.n	800317c <TIM15_IRQHandler+0x700>
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002bbc:	4b86      	ldr	r3, [pc, #536]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002bc8:	4b83      	ldr	r3, [pc, #524]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bce:	2120      	movs	r1, #32
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002bd4:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002be0:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	4b7c      	ldr	r3, [pc, #496]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002be6:	497e      	ldr	r1, [pc, #504]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	619a      	str	r2, [r3, #24]
			   TIM15->EGR |= TIM_EGR_UG;
 8002bec:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002bf8:	4b77      	ldr	r3, [pc, #476]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
				mode4_cntr = 0;
 8002c04:	4b77      	ldr	r3, [pc, #476]	; (8002de4 <TIM15_IRQHandler+0x368>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	e2b7      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 5){
 8002c0c:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d159      	bne.n	8002cc8 <TIM15_IRQHandler+0x24c>
			if (mode5_cntr == 0){
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <TIM15_IRQHandler+0x370>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d12d      	bne.n	8002c78 <TIM15_IRQHandler+0x1fc>
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c22:	2110      	movs	r1, #16
 8002c24:	438a      	bics	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c2e:	2120      	movs	r1, #32
 8002c30:	438a      	bics	r2, r1
 8002c32:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002c40:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c46:	4966      	ldr	r1, [pc, #408]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	619a      	str	r2, [r3, #24]
				TIM15->ARR = (uint32_t)t2_tmr15;
 8002c4c:	4a62      	ldr	r2, [pc, #392]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c4e:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <TIM15_IRQHandler+0x36c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM15->EGR |= TIM_EGR_UG;
 8002c54:	4b60      	ldr	r3, [pc, #384]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 |= TIM_CR1_CEN;
 8002c60:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b5c      	ldr	r3, [pc, #368]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
			   mode5_cntr++;
 8002c6c:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <TIM15_IRQHandler+0x370>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <TIM15_IRQHandler+0x370>)
 8002c74:	601a      	str	r2, [r3, #0]
}
 8002c76:	e281      	b.n	800317c <TIM15_IRQHandler+0x700>
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002c78:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	4b56      	ldr	r3, [pc, #344]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c7e:	2110      	movs	r1, #16
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002c84:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002c90:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002ca2:	494f      	ldr	r1, [pc, #316]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	619a      	str	r2, [r3, #24]
			   TIM15->EGR |= TIM_EGR_UG;
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
				mode5_cntr = 0;
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <TIM15_IRQHandler+0x370>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	e259      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 6){
 8002cc8:	4b44      	ldr	r3, [pc, #272]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d134      	bne.n	8002d3a <TIM15_IRQHandler+0x2be>
			if(mode6_cntr<num_pulse_pwm_tmr15){
 8002cd0:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <TIM15_IRQHandler+0x374>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <TIM15_IRQHandler+0x378>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d205      	bcs.n	8002cea <TIM15_IRQHandler+0x26e>
				mode6_cntr++;
 8002cde:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <TIM15_IRQHandler+0x374>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <TIM15_IRQHandler+0x374>)
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	e248      	b.n	800317c <TIM15_IRQHandler+0x700>
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cf0:	2110      	movs	r1, #16
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	438a      	bics	r2, r1
 8002d00:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002d0e:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d14:	4932      	ldr	r1, [pc, #200]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	619a      	str	r2, [r3, #24]
			   TIM15->EGR |= TIM_EGR_UG;
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002d26:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	438a      	bics	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
				mode6_cntr=0;
 8002d32:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <TIM15_IRQHandler+0x374>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	e220      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 7){
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b07      	cmp	r3, #7
 8002d40:	d134      	bne.n	8002dac <TIM15_IRQHandler+0x330>
			if(mode7_cntr<num_pulse_pwm_tmr15){
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <TIM15_IRQHandler+0x37c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	001a      	movs	r2, r3
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <TIM15_IRQHandler+0x378>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d205      	bcs.n	8002d5c <TIM15_IRQHandler+0x2e0>
				mode7_cntr++;
 8002d50:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <TIM15_IRQHandler+0x37c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <TIM15_IRQHandler+0x37c>)
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	e20f      	b.n	800317c <TIM15_IRQHandler+0x700>
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d62:	2110      	movs	r1, #16
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d6e:	2120      	movs	r1, #32
 8002d70:	438a      	bics	r2, r1
 8002d72:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d86:	4916      	ldr	r1, [pc, #88]	; (8002de0 <TIM15_IRQHandler+0x364>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	619a      	str	r2, [r3, #24]
			   TIM15->EGR |= TIM_EGR_UG;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	430a      	orrs	r2, r1
 8002d96:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <TIM15_IRQHandler+0x35c>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	438a      	bics	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
				mode7_cntr=0;
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <TIM15_IRQHandler+0x37c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	e1e7      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 8){
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <TIM15_IRQHandler+0x360>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d000      	beq.n	8002db6 <TIM15_IRQHandler+0x33a>
 8002db4:	e082      	b.n	8002ebc <TIM15_IRQHandler+0x440>
			if(mode8_cntr1 == 0){ //state 1
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <TIM15_IRQHandler+0x380>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d153      	bne.n	8002e66 <TIM15_IRQHandler+0x3ea>
				if(mode8_cntr2<num_pulse_pwm_tmr15){ //pwm counter
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <TIM15_IRQHandler+0x384>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <TIM15_IRQHandler+0x378>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d21b      	bcs.n	8002e04 <TIM15_IRQHandler+0x388>
					mode8_cntr2++;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <TIM15_IRQHandler+0x384>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <TIM15_IRQHandler+0x384>)
 8002dd4:	601a      	str	r2, [r3, #0]
}
 8002dd6:	e1d1      	b.n	800317c <TIM15_IRQHandler+0x700>
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	20008550 	.word	0x20008550
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	20000538 	.word	0x20000538
 8002de8:	2000862c 	.word	0x2000862c
 8002dec:	2000053c 	.word	0x2000053c
 8002df0:	20000540 	.word	0x20000540
 8002df4:	200084c0 	.word	0x200084c0
 8002df8:	20000544 	.word	0x20000544
 8002dfc:	20000548 	.word	0x20000548
 8002e00:	2000054c 	.word	0x2000054c
					TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002e04:	4bdf      	ldr	r3, [pc, #892]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	4bde      	ldr	r3, [pc, #888]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e0a:	2110      	movs	r1, #16
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
					TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002e10:	4bdc      	ldr	r3, [pc, #880]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	4bdb      	ldr	r3, [pc, #876]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e16:	2120      	movs	r1, #32
 8002e18:	438a      	bics	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
					TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002e1c:	4bd9      	ldr	r3, [pc, #868]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	4bd8      	ldr	r3, [pc, #864]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e22:	2140      	movs	r1, #64	; 0x40
 8002e24:	430a      	orrs	r2, r1
 8002e26:	619a      	str	r2, [r3, #24]
					TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002e28:	4bd6      	ldr	r3, [pc, #856]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	4bd5      	ldr	r3, [pc, #852]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e2e:	49d6      	ldr	r1, [pc, #856]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	619a      	str	r2, [r3, #24]
					TIM15->ARR = (uint32_t)t2_tmr15;
 8002e34:	4ad3      	ldr	r2, [pc, #844]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e36:	4bd5      	ldr	r3, [pc, #852]	; (800318c <TIM15_IRQHandler+0x710>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM15->EGR |= TIM_EGR_UG;
 8002e3c:	4bd1      	ldr	r3, [pc, #836]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	4bd0      	ldr	r3, [pc, #832]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	430a      	orrs	r2, r1
 8002e46:	615a      	str	r2, [r3, #20]
				   TIM15->CR1 |= TIM_CR1_CEN;
 8002e48:	4bce      	ldr	r3, [pc, #824]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4bcd      	ldr	r3, [pc, #820]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e4e:	2101      	movs	r1, #1
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
				   mode8_cntr2=0;
 8002e54:	4bce      	ldr	r3, [pc, #824]	; (8003190 <TIM15_IRQHandler+0x714>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
				   mode8_cntr1++;
 8002e5a:	4bce      	ldr	r3, [pc, #824]	; (8003194 <TIM15_IRQHandler+0x718>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4bcc      	ldr	r3, [pc, #816]	; (8003194 <TIM15_IRQHandler+0x718>)
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	e18a      	b.n	800317c <TIM15_IRQHandler+0x700>
			 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002e66:	4bc7      	ldr	r3, [pc, #796]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	4bc6      	ldr	r3, [pc, #792]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	438a      	bics	r2, r1
 8002e70:	619a      	str	r2, [r3, #24]
			 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002e72:	4bc4      	ldr	r3, [pc, #784]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	4bc3      	ldr	r3, [pc, #780]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e78:	2120      	movs	r1, #32
 8002e7a:	438a      	bics	r2, r1
 8002e7c:	619a      	str	r2, [r3, #24]
			 	TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002e7e:	4bc1      	ldr	r3, [pc, #772]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	4bc0      	ldr	r3, [pc, #768]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	430a      	orrs	r2, r1
 8002e88:	619a      	str	r2, [r3, #24]
			 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002e8a:	4bbe      	ldr	r3, [pc, #760]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	4bbd      	ldr	r3, [pc, #756]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e90:	49bd      	ldr	r1, [pc, #756]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	619a      	str	r2, [r3, #24]
			   TIM15->EGR |= TIM_EGR_UG;
 8002e96:	4bbb      	ldr	r3, [pc, #748]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4bba      	ldr	r3, [pc, #744]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002ea2:	4bb8      	ldr	r3, [pc, #736]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4bb7      	ldr	r3, [pc, #732]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	438a      	bics	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
			   mode8_cntr2=0;
 8002eae:	4bb8      	ldr	r3, [pc, #736]	; (8003190 <TIM15_IRQHandler+0x714>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
			   mode8_cntr1=0;
 8002eb4:	4bb7      	ldr	r3, [pc, #732]	; (8003194 <TIM15_IRQHandler+0x718>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	e15f      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 9){
 8002ebc:	4bb6      	ldr	r3, [pc, #728]	; (8003198 <TIM15_IRQHandler+0x71c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d16c      	bne.n	8002f9e <TIM15_IRQHandler+0x522>
			if(mode9_cntr1 == 0){ //state 1
 8002ec4:	4bb5      	ldr	r3, [pc, #724]	; (800319c <TIM15_IRQHandler+0x720>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d13d      	bne.n	8002f48 <TIM15_IRQHandler+0x4cc>
				if(mode9_cntr2<num_pulse_pwm_tmr15){ //pwm counter
 8002ecc:	4bb4      	ldr	r3, [pc, #720]	; (80031a0 <TIM15_IRQHandler+0x724>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	4bb4      	ldr	r3, [pc, #720]	; (80031a4 <TIM15_IRQHandler+0x728>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d205      	bcs.n	8002ee6 <TIM15_IRQHandler+0x46a>
					mode9_cntr2++;
 8002eda:	4bb1      	ldr	r3, [pc, #708]	; (80031a0 <TIM15_IRQHandler+0x724>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	4baf      	ldr	r3, [pc, #700]	; (80031a0 <TIM15_IRQHandler+0x724>)
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	e14a      	b.n	800317c <TIM15_IRQHandler+0x700>
				 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002ee6:	4ba7      	ldr	r3, [pc, #668]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	4ba6      	ldr	r3, [pc, #664]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002eec:	2110      	movs	r1, #16
 8002eee:	438a      	bics	r2, r1
 8002ef0:	619a      	str	r2, [r3, #24]
				 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002ef2:	4ba4      	ldr	r3, [pc, #656]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	4ba3      	ldr	r3, [pc, #652]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ef8:	2120      	movs	r1, #32
 8002efa:	438a      	bics	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]
				 	TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002efe:	4ba1      	ldr	r3, [pc, #644]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	4ba0      	ldr	r3, [pc, #640]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
				 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002f0a:	4b9e      	ldr	r3, [pc, #632]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	4b9d      	ldr	r3, [pc, #628]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f10:	499d      	ldr	r1, [pc, #628]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	619a      	str	r2, [r3, #24]
					TIM15->ARR = (uint32_t)t2_tmr15;
 8002f16:	4a9b      	ldr	r2, [pc, #620]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f18:	4b9c      	ldr	r3, [pc, #624]	; (800318c <TIM15_IRQHandler+0x710>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM15->EGR |= TIM_EGR_UG;
 8002f1e:	4b99      	ldr	r3, [pc, #612]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	4b98      	ldr	r3, [pc, #608]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f24:	2101      	movs	r1, #1
 8002f26:	430a      	orrs	r2, r1
 8002f28:	615a      	str	r2, [r3, #20]
				   TIM15->CR1 |= TIM_CR1_CEN;
 8002f2a:	4b96      	ldr	r3, [pc, #600]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b95      	ldr	r3, [pc, #596]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
				   mode9_cntr2=0;
 8002f36:	4b9a      	ldr	r3, [pc, #616]	; (80031a0 <TIM15_IRQHandler+0x724>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
				   mode9_cntr1++;
 8002f3c:	4b97      	ldr	r3, [pc, #604]	; (800319c <TIM15_IRQHandler+0x720>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	4b96      	ldr	r3, [pc, #600]	; (800319c <TIM15_IRQHandler+0x720>)
 8002f44:	601a      	str	r2, [r3, #0]
}
 8002f46:	e119      	b.n	800317c <TIM15_IRQHandler+0x700>
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8002f48:	4b8e      	ldr	r3, [pc, #568]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f4e:	2110      	movs	r1, #16
 8002f50:	430a      	orrs	r2, r1
 8002f52:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8002f54:	4b8b      	ldr	r3, [pc, #556]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	4b8a      	ldr	r3, [pc, #552]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002f60:	4b88      	ldr	r3, [pc, #544]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	4b87      	ldr	r3, [pc, #540]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002f6c:	4b85      	ldr	r3, [pc, #532]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	4b84      	ldr	r3, [pc, #528]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f72:	4985      	ldr	r1, [pc, #532]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8002f74:	400a      	ands	r2, r1
 8002f76:	619a      	str	r2, [r3, #24]
			   TIM15->EGR |= TIM_EGR_UG;
 8002f78:	4b82      	ldr	r3, [pc, #520]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	4b81      	ldr	r3, [pc, #516]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f7e:	2101      	movs	r1, #1
 8002f80:	430a      	orrs	r2, r1
 8002f82:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8002f84:	4b7f      	ldr	r3, [pc, #508]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
			   mode9_cntr2=0;
 8002f90:	4b83      	ldr	r3, [pc, #524]	; (80031a0 <TIM15_IRQHandler+0x724>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			   mode9_cntr1=0;
 8002f96:	4b81      	ldr	r3, [pc, #516]	; (800319c <TIM15_IRQHandler+0x720>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
}
 8002f9c:	e0ee      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 10){
 8002f9e:	4b7e      	ldr	r3, [pc, #504]	; (8003198 <TIM15_IRQHandler+0x71c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b0a      	cmp	r3, #10
 8002fa4:	d173      	bne.n	800308e <TIM15_IRQHandler+0x612>
			if (mode10_cntr1 == 0){ //state1: t1 finished, set the t2
 8002fa6:	4b80      	ldr	r3, [pc, #512]	; (80031a8 <TIM15_IRQHandler+0x72c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d137      	bne.n	800301e <TIM15_IRQHandler+0x5a2>
				TIM15->ARR = (uint32_t)(h_pwm_tmr15+l_pwm_tmr15);
 8002fae:	4b7f      	ldr	r3, [pc, #508]	; (80031ac <TIM15_IRQHandler+0x730>)
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <TIM15_IRQHandler+0x734>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b73      	ldr	r3, [pc, #460]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fb8:	188a      	adds	r2, r1, r2
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM15->CCR1 = (uint32_t)h_pwm_tmr15;
 8002fbc:	4a71      	ldr	r2, [pc, #452]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fbe:	4b7b      	ldr	r3, [pc, #492]	; (80031ac <TIM15_IRQHandler+0x730>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6353      	str	r3, [r2, #52]	; 0x34
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	4b6e      	ldr	r3, [pc, #440]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fca:	2110      	movs	r1, #16
 8002fcc:	438a      	bics	r2, r1
 8002fce:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_1;
 8002fd0:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	4b6b      	ldr	r3, [pc, #428]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002fdc:	4b69      	ldr	r3, [pc, #420]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 8002fe8:	4b66      	ldr	r3, [pc, #408]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	4b65      	ldr	r3, [pc, #404]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002fee:	4966      	ldr	r1, [pc, #408]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]
				TIM15->EGR |= TIM_EGR_UG;
 8002ff4:	4b63      	ldr	r3, [pc, #396]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	4b62      	ldr	r3, [pc, #392]	; (8003184 <TIM15_IRQHandler+0x708>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 |= TIM_CR1_CEN;
 8003000:	4b60      	ldr	r3, [pc, #384]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003006:	2101      	movs	r1, #1
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
				mode10_cntr1++; //go to next state
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <TIM15_IRQHandler+0x72c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <TIM15_IRQHandler+0x72c>)
 8003014:	601a      	str	r2, [r3, #0]
				mode10_cntr2 = 0;
 8003016:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <TIM15_IRQHandler+0x738>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	e0ae      	b.n	800317c <TIM15_IRQHandler+0x700>
				if(mode10_cntr2<num_pulse_pwm_tmr15){ //pwm counter
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <TIM15_IRQHandler+0x738>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	001a      	movs	r2, r3
 8003024:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <TIM15_IRQHandler+0x728>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d205      	bcs.n	8003038 <TIM15_IRQHandler+0x5bc>
					mode10_cntr2++;
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <TIM15_IRQHandler+0x738>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <TIM15_IRQHandler+0x738>)
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	e0a1      	b.n	800317c <TIM15_IRQHandler+0x700>
				 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8003038:	4b52      	ldr	r3, [pc, #328]	; (8003184 <TIM15_IRQHandler+0x708>)
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	4b51      	ldr	r3, [pc, #324]	; (8003184 <TIM15_IRQHandler+0x708>)
 800303e:	2110      	movs	r1, #16
 8003040:	438a      	bics	r2, r1
 8003042:	619a      	str	r2, [r3, #24]
				 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8003044:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <TIM15_IRQHandler+0x708>)
 800304a:	2120      	movs	r1, #32
 800304c:	438a      	bics	r2, r1
 800304e:	619a      	str	r2, [r3, #24]
				 	TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8003050:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003056:	2140      	movs	r1, #64	; 0x40
 8003058:	430a      	orrs	r2, r1
 800305a:	619a      	str	r2, [r3, #24]
				 	TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800305c:	4b49      	ldr	r3, [pc, #292]	; (8003184 <TIM15_IRQHandler+0x708>)
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	4b48      	ldr	r3, [pc, #288]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003062:	4949      	ldr	r1, [pc, #292]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8003064:	400a      	ands	r2, r1
 8003066:	619a      	str	r2, [r3, #24]
					TIM15->EGR |= TIM_EGR_UG;
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <TIM15_IRQHandler+0x708>)
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <TIM15_IRQHandler+0x708>)
 800306e:	2101      	movs	r1, #1
 8003070:	430a      	orrs	r2, r1
 8003072:	615a      	str	r2, [r3, #20]
					TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8003074:	4b43      	ldr	r3, [pc, #268]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b42      	ldr	r3, [pc, #264]	; (8003184 <TIM15_IRQHandler+0x708>)
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
				   mode10_cntr2=0;
 8003080:	4b4c      	ldr	r3, [pc, #304]	; (80031b4 <TIM15_IRQHandler+0x738>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
				   mode10_cntr1=0;
 8003086:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <TIM15_IRQHandler+0x72c>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	e076      	b.n	800317c <TIM15_IRQHandler+0x700>
		else if (mode_tmr15 == 11){
 800308e:	4b42      	ldr	r3, [pc, #264]	; (8003198 <TIM15_IRQHandler+0x71c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b0b      	cmp	r3, #11
 8003094:	d172      	bne.n	800317c <TIM15_IRQHandler+0x700>
			if (mode11_cntr1 == 0){ //state1: t1 finished, set the t2
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <TIM15_IRQHandler+0x73c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d137      	bne.n	800310e <TIM15_IRQHandler+0x692>
				TIM15->ARR = (uint32_t)(h_pwm_tmr15+l_pwm_tmr15);
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <TIM15_IRQHandler+0x730>)
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <TIM15_IRQHandler+0x734>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030a8:	188a      	adds	r2, r1, r2
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
			  TIM15->CCR1 = (uint32_t)h_pwm_tmr15;
 80030ac:	4a35      	ldr	r2, [pc, #212]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <TIM15_IRQHandler+0x730>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6353      	str	r3, [r2, #52]	; 0x34
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_0; //pwm1
 80030b4:	4b33      	ldr	r3, [pc, #204]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030ba:	2110      	movs	r1, #16
 80030bc:	438a      	bics	r2, r1
 80030be:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_1;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030c6:	2120      	movs	r1, #32
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 80030cc:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030d2:	2140      	movs	r1, #64	; 0x40
 80030d4:	430a      	orrs	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]
				TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	4b29      	ldr	r3, [pc, #164]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030de:	492a      	ldr	r1, [pc, #168]	; (8003188 <TIM15_IRQHandler+0x70c>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
				TIM15->EGR |= TIM_EGR_UG;
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	4b26      	ldr	r3, [pc, #152]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	430a      	orrs	r2, r1
 80030ee:	615a      	str	r2, [r3, #20]
			   TIM15->CR1 |= TIM_CR1_CEN;
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b23      	ldr	r3, [pc, #140]	; (8003184 <TIM15_IRQHandler+0x708>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
				mode11_cntr1++; //go to next state
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <TIM15_IRQHandler+0x73c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <TIM15_IRQHandler+0x73c>)
 8003104:	601a      	str	r2, [r3, #0]
				mode11_cntr2 = 0;
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <TIM15_IRQHandler+0x740>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
}
 800310c:	e036      	b.n	800317c <TIM15_IRQHandler+0x700>
				if(mode11_cntr2<num_pulse_pwm_tmr15){ //pwm counter
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <TIM15_IRQHandler+0x740>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	001a      	movs	r2, r3
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <TIM15_IRQHandler+0x728>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d205      	bcs.n	8003128 <TIM15_IRQHandler+0x6ac>
					mode11_cntr2++;
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <TIM15_IRQHandler+0x740>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <TIM15_IRQHandler+0x740>)
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	e029      	b.n	800317c <TIM15_IRQHandler+0x700>
					TIM15->CCMR1 |= TIM_CCMR1_OC1M_0; //put high
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <TIM15_IRQHandler+0x708>)
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	4b15      	ldr	r3, [pc, #84]	; (8003184 <TIM15_IRQHandler+0x708>)
 800312e:	2110      	movs	r1, #16
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
					TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_1;
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <TIM15_IRQHandler+0x708>)
 800313a:	2120      	movs	r1, #32
 800313c:	438a      	bics	r2, r1
 800313e:	619a      	str	r2, [r3, #24]
					TIM15->CCMR1 |= TIM_CCMR1_OC1M_2;
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	430a      	orrs	r2, r1
 800314a:	619a      	str	r2, [r3, #24]
					TIM15->CCMR1 &= ~TIM_CCMR1_OC1M_3;
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <TIM15_IRQHandler+0x708>)
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003152:	490d      	ldr	r1, [pc, #52]	; (8003188 <TIM15_IRQHandler+0x70c>)
 8003154:	400a      	ands	r2, r1
 8003156:	619a      	str	r2, [r3, #24]
					TIM15->EGR |= TIM_EGR_UG;
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <TIM15_IRQHandler+0x708>)
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <TIM15_IRQHandler+0x708>)
 800315e:	2101      	movs	r1, #1
 8003160:	430a      	orrs	r2, r1
 8003162:	615a      	str	r2, [r3, #20]
					TIM15->CR1 &= ~TIM_CR1_CEN; //disable
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <TIM15_IRQHandler+0x708>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <TIM15_IRQHandler+0x708>)
 800316a:	2101      	movs	r1, #1
 800316c:	438a      	bics	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
				   mode11_cntr2=0;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <TIM15_IRQHandler+0x740>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
				   mode11_cntr1=0;
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <TIM15_IRQHandler+0x73c>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	40014000 	.word	0x40014000
 8003188:	fffeffff 	.word	0xfffeffff
 800318c:	2000862c 	.word	0x2000862c
 8003190:	2000054c 	.word	0x2000054c
 8003194:	20000548 	.word	0x20000548
 8003198:	20008550 	.word	0x20008550
 800319c:	20000550 	.word	0x20000550
 80031a0:	20000554 	.word	0x20000554
 80031a4:	200084c0 	.word	0x200084c0
 80031a8:	20000558 	.word	0x20000558
 80031ac:	200085f4 	.word	0x200085f4
 80031b0:	200085e4 	.word	0x200085e4
 80031b4:	2000055c 	.word	0x2000055c
 80031b8:	20000560 	.word	0x20000560
 80031bc:	20000564 	.word	0x20000564

080031c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_MspInit+0x5c>)
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_MspInit+0x5c>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_MspInit+0x5c>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_MspInit+0x5c>)
 80031e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_MspInit+0x5c>)
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0549      	lsls	r1, r1, #21
 80031e8:	430a      	orrs	r2, r1
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_MspInit+0x5c>)
 80031ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	055b      	lsls	r3, r3, #21
 80031f4:	4013      	ands	r3, r2
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80031fa:	2302      	movs	r3, #2
 80031fc:	425b      	negs	r3, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	2103      	movs	r1, #3
 8003202:	0018      	movs	r0, r3
 8003204:	f001 f8c2 	bl	800438c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003208:	23c0      	movs	r3, #192	; 0xc0
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	0018      	movs	r0, r3
 800320e:	f000 fb61 	bl	80038d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	2414      	movs	r4, #20
 800322a:	193b      	adds	r3, r7, r4
 800322c:	0018      	movs	r0, r3
 800322e:	2314      	movs	r3, #20
 8003230:	001a      	movs	r2, r3
 8003232:	2100      	movs	r1, #0
 8003234:	f005 fe73 	bl	8008f1e <memset>
  if(hadc->Instance==ADC1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_ADC_MspInit+0x80>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d129      	bne.n	8003296 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_ADC_MspInit+0x84>)
 8003244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_ADC_MspInit+0x84>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0349      	lsls	r1, r1, #13
 800324c:	430a      	orrs	r2, r1
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_ADC_MspInit+0x84>)
 8003252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	035b      	lsls	r3, r3, #13
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_ADC_MspInit+0x84>)
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_ADC_MspInit+0x84>)
 8003264:	2101      	movs	r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	; 0x34
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_ADC_MspInit+0x84>)
 800326c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326e:	2201      	movs	r2, #1
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003276:	193b      	adds	r3, r7, r4
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327c:	193b      	adds	r3, r7, r4
 800327e:	2203      	movs	r2, #3
 8003280:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	193b      	adds	r3, r7, r4
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	193a      	adds	r2, r7, r4
 800328a:	23a0      	movs	r3, #160	; 0xa0
 800328c:	05db      	lsls	r3, r3, #23
 800328e:	0011      	movs	r1, r2
 8003290:	0018      	movs	r0, r3
 8003292:	f001 f979 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b00b      	add	sp, #44	; 0x2c
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	40012400 	.word	0x40012400
 80032a4:	40021000 	.word	0x40021000

080032a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a44      	ldr	r2, [pc, #272]	; (80033c8 <HAL_TIM_Base_MspInit+0x120>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d114      	bne.n	80032e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032c0:	2110      	movs	r1, #16
 80032c2:	430a      	orrs	r2, r1
 80032c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	2210      	movs	r2, #16
 80032cc:	4013      	ands	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2103      	movs	r1, #3
 80032d6:	2011      	movs	r0, #17
 80032d8:	f001 f858 	bl	800438c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80032dc:	2011      	movs	r0, #17
 80032de:	f001 f86a 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80032e2:	e06c      	b.n	80033be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM7)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d114      	bne.n	8003318 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032f4:	2120      	movs	r1, #32
 80032f6:	430a      	orrs	r2, r1
 80032f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2220      	movs	r2, #32
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2103      	movs	r1, #3
 800330a:	2012      	movs	r0, #18
 800330c:	f001 f83e 	bl	800438c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003310:	2012      	movs	r0, #18
 8003312:	f001 f850 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003316:	e052      	b.n	80033be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM14)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_TIM_Base_MspInit+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d116      	bne.n	8003350 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003322:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 8003324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0209      	lsls	r1, r1, #8
 800332c:	430a      	orrs	r2, r1
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4013      	ands	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2103      	movs	r1, #3
 8003342:	2013      	movs	r0, #19
 8003344:	f001 f822 	bl	800438c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003348:	2013      	movs	r0, #19
 800334a:	f001 f834 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 800334e:	e036      	b.n	80033be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM16)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <HAL_TIM_Base_MspInit+0x130>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d116      	bne.n	8003388 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 800335c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0289      	lsls	r1, r1, #10
 8003364:	430a      	orrs	r2, r1
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 800336a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	029b      	lsls	r3, r3, #10
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2103      	movs	r1, #3
 800337a:	2015      	movs	r0, #21
 800337c:	f001 f806 	bl	800438c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003380:	2015      	movs	r0, #21
 8003382:	f001 f818 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003386:	e01a      	b.n	80033be <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM17)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_TIM_Base_MspInit+0x134>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d115      	bne.n	80033be <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	02c9      	lsls	r1, r1, #11
 800339c:	430a      	orrs	r2, r1
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80033a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	02db      	lsls	r3, r3, #11
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2103      	movs	r1, #3
 80033b2:	2016      	movs	r0, #22
 80033b4:	f000 ffea 	bl	800438c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80033b8:	2016      	movs	r0, #22
 80033ba:	f000 fffc 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b008      	add	sp, #32
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	40001000 	.word	0x40001000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40001400 	.word	0x40001400
 80033d4:	40002000 	.word	0x40002000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800

080033e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b08f      	sub	sp, #60	; 0x3c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	2424      	movs	r4, #36	; 0x24
 80033ea:	193b      	adds	r3, r7, r4
 80033ec:	0018      	movs	r0, r3
 80033ee:	2314      	movs	r3, #20
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f005 fd93 	bl	8008f1e <memset>
  if(huart->Instance==USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_UART_MspInit+0x1bc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d130      	bne.n	8003464 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003406:	4b66      	ldr	r3, [pc, #408]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	01c9      	lsls	r1, r1, #7
 800340c:	430a      	orrs	r2, r1
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
 8003410:	4b63      	ldr	r3, [pc, #396]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	01db      	lsls	r3, r3, #7
 8003418:	4013      	ands	r3, r2
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800341e:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003422:	4b5f      	ldr	r3, [pc, #380]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003424:	2104      	movs	r1, #4
 8003426:	430a      	orrs	r2, r1
 8003428:	635a      	str	r2, [r3, #52]	; 0x34
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	2204      	movs	r2, #4
 8003430:	4013      	ands	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003436:	0021      	movs	r1, r4
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2230      	movs	r2, #48	; 0x30
 800343c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2202      	movs	r2, #2
 8003442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2200      	movs	r2, #0
 800344e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2201      	movs	r2, #1
 8003454:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003456:	187b      	adds	r3, r7, r1
 8003458:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_UART_MspInit+0x1c4>)
 800345a:	0019      	movs	r1, r3
 800345c:	0010      	movs	r0, r2
 800345e:	f001 f893 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003462:	e097      	b.n	8003594 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4f      	ldr	r2, [pc, #316]	; (80035a8 <HAL_UART_MspInit+0x1c8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d131      	bne.n	80034d2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800346e:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003472:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	0289      	lsls	r1, r1, #10
 8003478:	430a      	orrs	r2, r1
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
 800347c:	4b48      	ldr	r3, [pc, #288]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 800347e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	029b      	lsls	r3, r3, #10
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b45      	ldr	r3, [pc, #276]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003490:	2101      	movs	r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	635a      	str	r2, [r3, #52]	; 0x34
 8003496:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034a2:	2124      	movs	r1, #36	; 0x24
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2202      	movs	r2, #2
 80034ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2201      	movs	r2, #1
 80034b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2201      	movs	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	187a      	adds	r2, r7, r1
 80034c4:	23a0      	movs	r3, #160	; 0xa0
 80034c6:	05db      	lsls	r3, r3, #23
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f001 f85c 	bl	8004588 <HAL_GPIO_Init>
}
 80034d0:	e060      	b.n	8003594 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	; (80035ac <HAL_UART_MspInit+0x1cc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d15b      	bne.n	8003594 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034dc:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 80034de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e0:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	02c9      	lsls	r1, r1, #11
 80034e6:	430a      	orrs	r2, r1
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ea:	4b2d      	ldr	r3, [pc, #180]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 80034ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	02db      	lsls	r3, r3, #11
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 80034fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 80034fe:	2104      	movs	r1, #4
 8003500:	430a      	orrs	r2, r1
 8003502:	635a      	str	r2, [r3, #52]	; 0x34
 8003504:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	2204      	movs	r2, #4
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003514:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 8003516:	2102      	movs	r1, #2
 8003518:	430a      	orrs	r2, r1
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_UART_MspInit+0x1c0>)
 800351e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003520:	2202      	movs	r2, #2
 8003522:	4013      	ands	r3, r2
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003528:	2124      	movs	r1, #36	; 0x24
 800352a:	187b      	adds	r3, r7, r1
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	000c      	movs	r4, r1
 8003534:	193b      	adds	r3, r7, r4
 8003536:	2202      	movs	r2, #2
 8003538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	193b      	adds	r3, r7, r4
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003540:	193b      	adds	r3, r7, r4
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8003546:	193b      	adds	r3, r7, r4
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354c:	193b      	adds	r3, r7, r4
 800354e:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <HAL_UART_MspInit+0x1c4>)
 8003550:	0019      	movs	r1, r3
 8003552:	0010      	movs	r0, r2
 8003554:	f001 f818 	bl	8004588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003558:	0021      	movs	r1, r4
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2204      	movs	r2, #4
 800355e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2202      	movs	r2, #2
 8003564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2200      	movs	r2, #0
 8003570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2204      	movs	r2, #4
 8003576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003578:	187b      	adds	r3, r7, r1
 800357a:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <HAL_UART_MspInit+0x1d0>)
 800357c:	0019      	movs	r1, r3
 800357e:	0010      	movs	r0, r2
 8003580:	f001 f802 	bl	8004588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2103      	movs	r1, #3
 8003588:	201d      	movs	r0, #29
 800358a:	f000 feff 	bl	800438c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800358e:	201d      	movs	r0, #29
 8003590:	f000 ff11 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b00f      	add	sp, #60	; 0x3c
 800359a:	bd90      	pop	{r4, r7, pc}
 800359c:	40013800 	.word	0x40013800
 80035a0:	40021000 	.word	0x40021000
 80035a4:	50000800 	.word	0x50000800
 80035a8:	40004400 	.word	0x40004400
 80035ac:	40004800 	.word	0x40004800
 80035b0:	50000400 	.word	0x50000400

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <NMI_Handler+0x4>

080035ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <HardFault_Handler+0x4>

080035c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c4:	f000 f96a 	bl	800389c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80035c8:	f004 fe20 	bl	800820c <xTaskGetSchedulerState>
 80035cc:	0003      	movs	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80035d2:	f005 fa81 	bl	8008ad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <TIM6_IRQHandler+0x14>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f002 f840 	bl	8005668 <HAL_TIM_IRQHandler>
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	200087b8 	.word	0x200087b8

080035f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <TIM7_IRQHandler+0x14>)
 80035fa:	0018      	movs	r0, r3
 80035fc:	f002 f834 	bl	8005668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	20008894 	.word	0x20008894

0800360c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <USART3_4_IRQHandler+0x14>)
 8003612:	0018      	movs	r0, r3
 8003614:	f002 fb72 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	20008630 	.word	0x20008630

08003624 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e00a      	b.n	800364c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003636:	e000      	b.n	800363a <_read+0x16>
 8003638:	bf00      	nop
 800363a:	0001      	movs	r1, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	60ba      	str	r2, [r7, #8]
 8003642:	b2ca      	uxtb	r2, r1
 8003644:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3301      	adds	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	dbf0      	blt.n	8003636 <_read+0x12>
	}

return len;
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b006      	add	sp, #24
 800365c:	bd80      	pop	{r7, pc}

0800365e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e009      	b.n	8003684 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	60ba      	str	r2, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7fd fd4f 	bl	800111c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	dbf1      	blt.n	8003670 <_write+0x12>
	}
	return len;
 800368c:	687b      	ldr	r3, [r7, #4]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b006      	add	sp, #24
 8003694:	bd80      	pop	{r7, pc}

08003696 <_close>:

int _close(int file)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
	return -1;
 800369e:	2301      	movs	r3, #1
 80036a0:	425b      	negs	r3, r3
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	0192      	lsls	r2, r2, #6
 80036ba:	605a      	str	r2, [r3, #4]
	return 0;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b002      	add	sp, #8
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_isatty>:

int _isatty(int file)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	return 1;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
	return 0;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <_sbrk+0x5c>)
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <_sbrk+0x60>)
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <_sbrk+0x64>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <_sbrk+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003720:	f005 fbca 	bl	8008eb8 <__errno>
 8003724:	0003      	movs	r3, r0
 8003726:	220c      	movs	r2, #12
 8003728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372a:	2301      	movs	r3, #1
 800372c:	425b      	negs	r3, r3
 800372e:	e009      	b.n	8003744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <_sbrk+0x64>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	18d2      	adds	r2, r2, r3
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <_sbrk+0x64>)
 8003740:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b006      	add	sp, #24
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20009000 	.word	0x20009000
 8003750:	00000400 	.word	0x00000400
 8003754:	20000568 	.word	0x20000568
 8003758:	20008978 	.word	0x20008978

0800375c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <SystemInit+0x14>)
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	0512      	lsls	r2, r2, #20
 8003766:	609a      	str	r2, [r3, #8]
#endif
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003776:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003778:	f7ff fff0 	bl	800375c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800377c:	480c      	ldr	r0, [pc, #48]	; (80037b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800377e:	490d      	ldr	r1, [pc, #52]	; (80037b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003780:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <LoopForever+0xe>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003784:	e002      	b.n	800378c <LoopCopyDataInit>

08003786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378a:	3304      	adds	r3, #4

0800378c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800378c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003790:	d3f9      	bcc.n	8003786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003794:	4c0a      	ldr	r4, [pc, #40]	; (80037c0 <LoopForever+0x16>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003798:	e001      	b.n	800379e <LoopFillZerobss>

0800379a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800379c:	3204      	adds	r2, #4

0800379e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a0:	d3fb      	bcc.n	800379a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037a2:	f005 fb8f 	bl	8008ec4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037a6:	f7fc fe2f 	bl	8000408 <main>

080037aa <LoopForever>:

LoopForever:
  b LoopForever
 80037aa:	e7fe      	b.n	80037aa <LoopForever>
  ldr   r0, =_estack
 80037ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b4:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 80037b8:	0800a340 	.word	0x0800a340
  ldr r2, =_sbss
 80037bc:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 80037c0:	20008974 	.word	0x20008974

080037c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037c4:	e7fe      	b.n	80037c4 <ADC1_IRQHandler>
	...

080037c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ce:	1dfb      	adds	r3, r7, #7
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_Init+0x3c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_Init+0x3c>)
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	0049      	lsls	r1, r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037e2:	2003      	movs	r0, #3
 80037e4:	f000 f810 	bl	8003808 <HAL_InitTick>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037ec:	1dfb      	adds	r3, r7, #7
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e001      	b.n	80037f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7ff fce4 	bl	80031c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	781b      	ldrb	r3, [r3, #0]
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40022000 	.word	0x40022000

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_InitTick+0x88>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02b      	beq.n	8003878 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_InitTick+0x8c>)
 8003822:	681c      	ldr	r4, [r3, #0]
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_InitTick+0x88>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	0019      	movs	r1, r3
 800382a:	23fa      	movs	r3, #250	; 0xfa
 800382c:	0098      	lsls	r0, r3, #2
 800382e:	f7fc fc75 	bl	800011c <__udivsi3>
 8003832:	0003      	movs	r3, r0
 8003834:	0019      	movs	r1, r3
 8003836:	0020      	movs	r0, r4
 8003838:	f7fc fc70 	bl	800011c <__udivsi3>
 800383c:	0003      	movs	r3, r0
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fdc9 	bl	80043d6 <HAL_SYSTICK_Config>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d112      	bne.n	800386e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d80a      	bhi.n	8003864 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	2301      	movs	r3, #1
 8003852:	425b      	negs	r3, r3
 8003854:	2200      	movs	r2, #0
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fd98 	bl	800438c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_InitTick+0x90>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e00d      	b.n	8003880 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e008      	b.n	8003880 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800386e:	230f      	movs	r3, #15
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e003      	b.n	8003880 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b005      	add	sp, #20
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	200003c4 	.word	0x200003c4
 8003894:	200003bc 	.word	0x200003bc
 8003898:	200003c0 	.word	0x200003c0

0800389c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_IncTick+0x1c>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	001a      	movs	r2, r3
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_IncTick+0x20>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	18d2      	adds	r2, r2, r3
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_IncTick+0x20>)
 80038ae:	601a      	str	r2, [r3, #0]
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	200003c4 	.word	0x200003c4
 80038bc:	20008910 	.word	0x20008910

080038c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  return uwTick;
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <HAL_GetTick+0x10>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20008910 	.word	0x20008910

080038d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a06      	ldr	r2, [pc, #24]	; (80038fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b002      	add	sp, #8
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	40010000 	.word	0x40010000
 80038fc:	fffff9ff 	.word	0xfffff9ff

08003900 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a05      	ldr	r2, [pc, #20]	; (8003924 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003910:	401a      	ands	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	fe3fffff 	.word	0xfe3fffff

08003928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	23e0      	movs	r3, #224	; 0xe0
 8003936:	045b      	lsls	r3, r3, #17
 8003938:	4013      	ands	r3, r2
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b002      	add	sp, #8
 8003940:	bd80      	pop	{r7, pc}

08003942 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	2104      	movs	r1, #4
 8003956:	400a      	ands	r2, r1
 8003958:	2107      	movs	r1, #7
 800395a:	4091      	lsls	r1, r2
 800395c:	000a      	movs	r2, r1
 800395e:	43d2      	mvns	r2, r2
 8003960:	401a      	ands	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2104      	movs	r1, #4
 8003966:	400b      	ands	r3, r1
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4099      	lsls	r1, r3
 800396c:	000b      	movs	r3, r1
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b004      	add	sp, #16
 800397a:	bd80      	pop	{r7, pc}

0800397c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	211f      	movs	r1, #31
 8003990:	400a      	ands	r2, r1
 8003992:	210f      	movs	r1, #15
 8003994:	4091      	lsls	r1, r2
 8003996:	000a      	movs	r2, r1
 8003998:	43d2      	mvns	r2, r2
 800399a:	401a      	ands	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0e9b      	lsrs	r3, r3, #26
 80039a0:	210f      	movs	r1, #15
 80039a2:	4019      	ands	r1, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	201f      	movs	r0, #31
 80039a8:	4003      	ands	r3, r0
 80039aa:	4099      	lsls	r1, r3
 80039ac:	000b      	movs	r3, r1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}

080039bc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	035b      	lsls	r3, r3, #13
 80039ce:	0b5b      	lsrs	r3, r3, #13
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}

080039de <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	0352      	lsls	r2, r2, #13
 80039f0:	0b52      	lsrs	r2, r2, #13
 80039f2:	43d2      	mvns	r2, r2
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b002      	add	sp, #8
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	0212      	lsls	r2, r2, #8
 8003a18:	43d2      	mvns	r2, r2
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	400b      	ands	r3, r1
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003a26:	400b      	ands	r3, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	07ffff00 	.word	0x07ffff00

08003a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0552      	lsls	r2, r2, #21
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	6fffffe8 	.word	0x6fffffe8

08003a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	055b      	lsls	r3, r3, #21
 8003a74:	401a      	ands	r2, r3
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	055b      	lsls	r3, r3, #21
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d101      	bne.n	8003a82 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <LL_ADC_IsEnabled+0x18>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <LL_ADC_IsEnabled+0x1a>
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}

08003aae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2204      	movs	r2, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d101      	bne.n	8003ac6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad8:	231f      	movs	r3, #31
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1ab      	b.n	8003e4e <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7ff fb8d 	bl	8003220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2254      	movs	r2, #84	; 0x54
 8003b10:	2100      	movs	r1, #0
 8003b12:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff ffa3 	bl	8003a64 <LL_ADC_IsInternalRegulatorEnabled>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d114      	bne.n	8003b4c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7ff ff88 	bl	8003a3c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b2c:	4bca      	ldr	r3, [pc, #808]	; (8003e58 <HAL_ADC_Init+0x388>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	49ca      	ldr	r1, [pc, #808]	; (8003e5c <HAL_ADC_Init+0x38c>)
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7fc faf2 	bl	800011c <__udivsi3>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b3e:	e002      	b.n	8003b46 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff ff87 	bl	8003a64 <LL_ADC_IsInternalRegulatorEnabled>
 8003b56:	1e03      	subs	r3, r0, #0
 8003b58:	d10f      	bne.n	8003b7a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	2210      	movs	r2, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b72:	231f      	movs	r3, #31
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff95 	bl	8003aae <LL_ADC_REG_IsConversionOngoing>
 8003b84:	0003      	movs	r3, r0
 8003b86:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d000      	beq.n	8003b94 <HAL_ADC_Init+0xc4>
 8003b92:	e14f      	b.n	8003e34 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d000      	beq.n	8003b9c <HAL_ADC_Init+0xcc>
 8003b9a:	e14b      	b.n	8003e34 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	4aaf      	ldr	r2, [pc, #700]	; (8003e60 <HAL_ADC_Init+0x390>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff ff6b 	bl	8003a8c <LL_ADC_IsEnabled>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d151      	bne.n	8003c5e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2218      	movs	r2, #24
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	0f9b      	lsrs	r3, r3, #30
 8003bd8:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bde:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8003be4:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8003bea:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8003bf0:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	223c      	movs	r2, #60	; 0x3c
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d103      	bne.n	8003c0a <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	4a94      	ldr	r2, [pc, #592]	; (8003e64 <HAL_ADC_Init+0x394>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	23c0      	movs	r3, #192	; 0xc0
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d018      	beq.n	8003c5e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	05db      	lsls	r3, r3, #23
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d012      	beq.n	8003c5e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	061b      	lsls	r3, r3, #24
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d00c      	beq.n	8003c5e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_ADC_Init+0x398>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a88      	ldr	r2, [pc, #544]	; (8003e6c <HAL_ADC_Init+0x39c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	23f0      	movs	r3, #240	; 0xf0
 8003c54:	039b      	lsls	r3, r3, #14
 8003c56:	401a      	ands	r2, r3
 8003c58:	4b83      	ldr	r3, [pc, #524]	; (8003e68 <HAL_ADC_Init+0x398>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7e1b      	ldrb	r3, [r3, #24]
 8003c62:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7e5b      	ldrb	r3, [r3, #25]
 8003c68:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7e9b      	ldrb	r3, [r3, #26]
 8003c70:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c72:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_ADC_Init+0x1b2>
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	015b      	lsls	r3, r3, #5
 8003c80:	e000      	b.n	8003c84 <HAL_ADC_Init+0x1b4>
 8003c82:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c84:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c8a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da04      	bge.n	8003c9e <HAL_ADC_Init+0x1ce>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	e001      	b.n	8003ca2 <HAL_ADC_Init+0x1d2>
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003ca2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	5c5b      	ldrb	r3, [r3, r1]
 8003caa:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003cac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	5c9b      	ldrb	r3, [r3, r2]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d115      	bne.n	8003cea <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7e9b      	ldrb	r3, [r3, #26]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	0252      	lsls	r2, r2, #9
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e00b      	b.n	8003cea <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf6:	23e0      	movs	r3, #224	; 0xe0
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d00:	4313      	orrs	r3, r2
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <HAL_ADC_Init+0x3a0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4a53      	ldr	r2, [pc, #332]	; (8003e74 <HAL_ADC_Init+0x3a4>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f7ff fdff 	bl	8003942 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	494a      	ldr	r1, [pc, #296]	; (8003e78 <HAL_ADC_Init+0x3a8>)
 8003d4e:	001a      	movs	r2, r3
 8003d50:	f7ff fdf7 	bl	8003942 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2110      	movs	r1, #16
 8003d68:	4249      	negs	r1, r1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6e:	e03a      	b.n	8003de6 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	039b      	lsls	r3, r3, #14
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d134      	bne.n	8003de6 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e00c      	b.n	8003d9c <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	40da      	lsrs	r2, r3
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	220f      	movs	r2, #15
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	d006      	beq.n	8003da4 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b07      	cmp	r3, #7
 8003da0:	d9ef      	bls.n	8003d82 <HAL_ADC_Init+0x2b2>
 8003da2:	e000      	b.n	8003da6 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8003da4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d109      	bne.n	8003dc0 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2110      	movs	r1, #16
 8003db8:	4249      	negs	r1, r1
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
 8003dbe:	e012      	b.n	8003de6 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	221c      	movs	r2, #28
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	4252      	negs	r2, r2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	0011      	movs	r1, r2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <HAL_ADC_Init+0x3ac>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10b      	bne.n	8003e0e <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	2203      	movs	r2, #3
 8003e02:	4393      	bics	r3, r2
 8003e04:	2201      	movs	r2, #1
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003e0c:	e01c      	b.n	8003e48 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	2212      	movs	r2, #18
 8003e14:	4393      	bics	r3, r2
 8003e16:	2210      	movs	r2, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	2201      	movs	r2, #1
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003e32:	e009      	b.n	8003e48 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	2210      	movs	r2, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e40:	231f      	movs	r3, #31
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e48:	231f      	movs	r3, #31
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	781b      	ldrb	r3, [r3, #0]
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b008      	add	sp, #32
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	200003bc 	.word	0x200003bc
 8003e5c:	00030d40 	.word	0x00030d40
 8003e60:	fffffefd 	.word	0xfffffefd
 8003e64:	1ffffc02 	.word	0x1ffffc02
 8003e68:	40012708 	.word	0x40012708
 8003e6c:	ffc3ffff 	.word	0xffc3ffff
 8003e70:	fffe0219 	.word	0xfffe0219
 8003e74:	dffffc02 	.word	0xdffffc02
 8003e78:	07ffff04 	.word	0x07ffff04
 8003e7c:	833fffe7 	.word	0x833fffe7

08003e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8a:	2317      	movs	r3, #23
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2254      	movs	r2, #84	; 0x54
 8003e9a:	5c9b      	ldrb	r3, [r3, r2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x24>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e1c2      	b.n	800422a <HAL_ADC_ConfigChannel+0x3aa>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2254      	movs	r2, #84	; 0x54
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fdfc 	bl	8003aae <LL_ADC_REG_IsConversionOngoing>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d000      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x3c>
 8003eba:	e1a5      	b.n	8004208 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d100      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x46>
 8003ec4:	e144      	b.n	8004150 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d004      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ed6:	4ac2      	ldr	r2, [pc, #776]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f7ff fd68 	bl	80039bc <LL_ADC_REG_SetSequencerChAdd>
 8003eec:	e0c9      	b.n	8004082 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	211f      	movs	r1, #31
 8003ef8:	400b      	ands	r3, r1
 8003efa:	210f      	movs	r1, #15
 8003efc:	4099      	lsls	r1, r3
 8003efe:	000b      	movs	r3, r1
 8003f00:	43db      	mvns	r3, r3
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	035b      	lsls	r3, r3, #13
 8003f0c:	0b5b      	lsrs	r3, r3, #13
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x9c>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	221f      	movs	r2, #31
 8003f18:	4013      	ands	r3, r2
 8003f1a:	e098      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	d000      	beq.n	8003f28 <HAL_ADC_ConfigChannel+0xa8>
 8003f26:	e091      	b.n	800404c <HAL_ADC_ConfigChannel+0x1cc>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d000      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0xb4>
 8003f32:	e089      	b.n	8004048 <HAL_ADC_ConfigChannel+0x1c8>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d000      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0xc0>
 8003f3e:	e081      	b.n	8004044 <HAL_ADC_ConfigChannel+0x1c4>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2208      	movs	r2, #8
 8003f46:	4013      	ands	r3, r2
 8003f48:	d000      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0xcc>
 8003f4a:	e079      	b.n	8004040 <HAL_ADC_ConfigChannel+0x1c0>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2210      	movs	r2, #16
 8003f52:	4013      	ands	r3, r2
 8003f54:	d000      	beq.n	8003f58 <HAL_ADC_ConfigChannel+0xd8>
 8003f56:	e071      	b.n	800403c <HAL_ADC_ConfigChannel+0x1bc>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d000      	beq.n	8003f64 <HAL_ADC_ConfigChannel+0xe4>
 8003f62:	e069      	b.n	8004038 <HAL_ADC_ConfigChannel+0x1b8>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2240      	movs	r2, #64	; 0x40
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d000      	beq.n	8003f70 <HAL_ADC_ConfigChannel+0xf0>
 8003f6e:	e061      	b.n	8004034 <HAL_ADC_ConfigChannel+0x1b4>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	4013      	ands	r3, r2
 8003f78:	d000      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0xfc>
 8003f7a:	e059      	b.n	8004030 <HAL_ADC_ConfigChannel+0x1b0>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4013      	ands	r3, r2
 8003f86:	d151      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1ac>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4013      	ands	r3, r2
 8003f92:	d149      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1a8>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d141      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1a4>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d139      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1a0>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d131      	bne.n	800401c <HAL_ADC_ConfigChannel+0x19c>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d129      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x198>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d121      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x194>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d119      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x190>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d111      	bne.n	800400c <HAL_ADC_ConfigChannel+0x18c>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	029b      	lsls	r3, r3, #10
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d109      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x188>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	02db      	lsls	r3, r3, #11
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d001      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x184>
 8004000:	2312      	movs	r3, #18
 8004002:	e024      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004004:	2300      	movs	r3, #0
 8004006:	e022      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004008:	2311      	movs	r3, #17
 800400a:	e020      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800400c:	2310      	movs	r3, #16
 800400e:	e01e      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004010:	230f      	movs	r3, #15
 8004012:	e01c      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004014:	230e      	movs	r3, #14
 8004016:	e01a      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004018:	230d      	movs	r3, #13
 800401a:	e018      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800401c:	230c      	movs	r3, #12
 800401e:	e016      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004020:	230b      	movs	r3, #11
 8004022:	e014      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004024:	230a      	movs	r3, #10
 8004026:	e012      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004028:	2309      	movs	r3, #9
 800402a:	e010      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800402c:	2308      	movs	r3, #8
 800402e:	e00e      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004030:	2307      	movs	r3, #7
 8004032:	e00c      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004034:	2306      	movs	r3, #6
 8004036:	e00a      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004038:	2305      	movs	r3, #5
 800403a:	e008      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800403c:	2304      	movs	r3, #4
 800403e:	e006      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004040:	2303      	movs	r3, #3
 8004042:	e004      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004044:	2302      	movs	r3, #2
 8004046:	e002      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800404c:	2300      	movs	r3, #0
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	6852      	ldr	r2, [r2, #4]
 8004052:	201f      	movs	r0, #31
 8004054:	4002      	ands	r2, r0
 8004056:	4093      	lsls	r3, r2
 8004058:	000a      	movs	r2, r1
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	429a      	cmp	r2, r3
 800406e:	d808      	bhi.n	8004082 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	001a      	movs	r2, r3
 800407e:	f7ff fc7d 	bl	800397c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	001a      	movs	r2, r3
 8004090:	f7ff fcb8 	bl	8003a04 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db00      	blt.n	800409e <HAL_ADC_ConfigChannel+0x21e>
 800409c:	e0be      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fc41 	bl	8003928 <LL_ADC_GetCommonPathInternalCh>
 80040a6:	0003      	movs	r3, r0
 80040a8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a4e      	ldr	r2, [pc, #312]	; (80041e8 <HAL_ADC_ConfigChannel+0x368>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d123      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040bc:	d11e      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	0412      	lsls	r2, r2, #16
 80040c4:	4313      	orrs	r3, r2
 80040c6:	4a47      	ldr	r2, [pc, #284]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 80040c8:	0019      	movs	r1, r3
 80040ca:	0010      	movs	r0, r2
 80040cc:	f7ff fc18 	bl	8003900 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80040d0:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_ADC_ConfigChannel+0x36c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4946      	ldr	r1, [pc, #280]	; (80041f0 <HAL_ADC_ConfigChannel+0x370>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc f820 	bl	800011c <__udivsi3>
 80040dc:	0003      	movs	r3, r0
 80040de:	001a      	movs	r2, r3
 80040e0:	0013      	movs	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3301      	adds	r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040ec:	e002      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f9      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040fa:	e08f      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3c      	ldr	r2, [pc, #240]	; (80041f4 <HAL_ADC_ConfigChannel+0x374>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10e      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x2a4>
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	045b      	lsls	r3, r3, #17
 800410c:	4013      	ands	r3, r2
 800410e:	d109      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	0452      	lsls	r2, r2, #17
 8004116:	4313      	orrs	r3, r2
 8004118:	4a32      	ldr	r2, [pc, #200]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 800411a:	0019      	movs	r1, r3
 800411c:	0010      	movs	r0, r2
 800411e:	f7ff fbef 	bl	8003900 <LL_ADC_SetCommonPathInternalCh>
 8004122:	e07b      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a33      	ldr	r2, [pc, #204]	; (80041f8 <HAL_ADC_ConfigChannel+0x378>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d000      	beq.n	8004130 <HAL_ADC_ConfigChannel+0x2b0>
 800412e:	e075      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	03db      	lsls	r3, r3, #15
 8004136:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004138:	d000      	beq.n	800413c <HAL_ADC_ConfigChannel+0x2bc>
 800413a:	e06f      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	03d2      	lsls	r2, r2, #15
 8004142:	4313      	orrs	r3, r2
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 8004146:	0019      	movs	r1, r3
 8004148:	0010      	movs	r0, r2
 800414a:	f7ff fbd9 	bl	8003900 <LL_ADC_SetCommonPathInternalCh>
 800414e:	e065      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	429a      	cmp	r2, r3
 800415a:	d004      	beq.n	8004166 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004160:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d107      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0019      	movs	r1, r3
 8004170:	0010      	movs	r0, r2
 8004172:	f7ff fc34 	bl	80039de <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	da4e      	bge.n	800421c <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417e:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 8004180:	0018      	movs	r0, r3
 8004182:	f7ff fbd1 	bl	8003928 <LL_ADC_GetCommonPathInternalCh>
 8004186:	0003      	movs	r3, r0
 8004188:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <HAL_ADC_ConfigChannel+0x368>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_ADC_ConfigChannel+0x37c>)
 8004198:	4013      	ands	r3, r2
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 800419c:	0019      	movs	r1, r3
 800419e:	0010      	movs	r0, r2
 80041a0:	f7ff fbae 	bl	8003900 <LL_ADC_SetCommonPathInternalCh>
 80041a4:	e03a      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <HAL_ADC_ConfigChannel+0x374>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <HAL_ADC_ConfigChannel+0x380>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	4a0b      	ldr	r2, [pc, #44]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 80041b8:	0019      	movs	r1, r3
 80041ba:	0010      	movs	r0, r2
 80041bc:	f7ff fba0 	bl	8003900 <LL_ADC_SetCommonPathInternalCh>
 80041c0:	e02c      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <HAL_ADC_ConfigChannel+0x378>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d127      	bne.n	800421c <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <HAL_ADC_ConfigChannel+0x384>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 80041d4:	0019      	movs	r1, r3
 80041d6:	0010      	movs	r0, r2
 80041d8:	f7ff fb92 	bl	8003900 <LL_ADC_SetCommonPathInternalCh>
 80041dc:	e01e      	b.n	800421c <HAL_ADC_ConfigChannel+0x39c>
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	80000004 	.word	0x80000004
 80041e4:	40012708 	.word	0x40012708
 80041e8:	b0001000 	.word	0xb0001000
 80041ec:	200003bc 	.word	0x200003bc
 80041f0:	00030d40 	.word	0x00030d40
 80041f4:	b8004000 	.word	0xb8004000
 80041f8:	b4002000 	.word	0xb4002000
 80041fc:	ff7fffff 	.word	0xff7fffff
 8004200:	feffffff 	.word	0xfeffffff
 8004204:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	2220      	movs	r2, #32
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004214:	2317      	movs	r3, #23
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2254      	movs	r2, #84	; 0x54
 8004220:	2100      	movs	r1, #0
 8004222:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004224:	2317      	movs	r3, #23
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	781b      	ldrb	r3, [r3, #0]
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b006      	add	sp, #24
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)

08004234 <__NVIC_EnableIRQ>:
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	0002      	movs	r2, r0
 800423c:	1dfb      	adds	r3, r7, #7
 800423e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004240:	1dfb      	adds	r3, r7, #7
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b7f      	cmp	r3, #127	; 0x7f
 8004246:	d809      	bhi.n	800425c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	001a      	movs	r2, r3
 800424e:	231f      	movs	r3, #31
 8004250:	401a      	ands	r2, r3
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <__NVIC_EnableIRQ+0x30>)
 8004254:	2101      	movs	r1, #1
 8004256:	4091      	lsls	r1, r2
 8004258:	000a      	movs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b002      	add	sp, #8
 8004262:	bd80      	pop	{r7, pc}
 8004264:	e000e100 	.word	0xe000e100

08004268 <__NVIC_SetPriority>:
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	0002      	movs	r2, r0
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	1dfb      	adds	r3, r7, #7
 8004274:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b7f      	cmp	r3, #127	; 0x7f
 800427c:	d828      	bhi.n	80042d0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <__NVIC_SetPriority+0xd4>)
 8004280:	1dfb      	adds	r3, r7, #7
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b25b      	sxtb	r3, r3
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	33c0      	adds	r3, #192	; 0xc0
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	589b      	ldr	r3, [r3, r2]
 800428e:	1dfa      	adds	r2, r7, #7
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	0011      	movs	r1, r2
 8004294:	2203      	movs	r2, #3
 8004296:	400a      	ands	r2, r1
 8004298:	00d2      	lsls	r2, r2, #3
 800429a:	21ff      	movs	r1, #255	; 0xff
 800429c:	4091      	lsls	r1, r2
 800429e:	000a      	movs	r2, r1
 80042a0:	43d2      	mvns	r2, r2
 80042a2:	401a      	ands	r2, r3
 80042a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	019b      	lsls	r3, r3, #6
 80042aa:	22ff      	movs	r2, #255	; 0xff
 80042ac:	401a      	ands	r2, r3
 80042ae:	1dfb      	adds	r3, r7, #7
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	0018      	movs	r0, r3
 80042b4:	2303      	movs	r3, #3
 80042b6:	4003      	ands	r3, r0
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042bc:	481f      	ldr	r0, [pc, #124]	; (800433c <__NVIC_SetPriority+0xd4>)
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	430a      	orrs	r2, r1
 80042c8:	33c0      	adds	r3, #192	; 0xc0
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	501a      	str	r2, [r3, r0]
}
 80042ce:	e031      	b.n	8004334 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d0:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <__NVIC_SetPriority+0xd8>)
 80042d2:	1dfb      	adds	r3, r7, #7
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	0019      	movs	r1, r3
 80042d8:	230f      	movs	r3, #15
 80042da:	400b      	ands	r3, r1
 80042dc:	3b08      	subs	r3, #8
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3306      	adds	r3, #6
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	3304      	adds	r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	1dfa      	adds	r2, r7, #7
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	0011      	movs	r1, r2
 80042f0:	2203      	movs	r2, #3
 80042f2:	400a      	ands	r2, r1
 80042f4:	00d2      	lsls	r2, r2, #3
 80042f6:	21ff      	movs	r1, #255	; 0xff
 80042f8:	4091      	lsls	r1, r2
 80042fa:	000a      	movs	r2, r1
 80042fc:	43d2      	mvns	r2, r2
 80042fe:	401a      	ands	r2, r3
 8004300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	401a      	ands	r2, r3
 800430a:	1dfb      	adds	r3, r7, #7
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	0018      	movs	r0, r3
 8004310:	2303      	movs	r3, #3
 8004312:	4003      	ands	r3, r0
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004318:	4809      	ldr	r0, [pc, #36]	; (8004340 <__NVIC_SetPriority+0xd8>)
 800431a:	1dfb      	adds	r3, r7, #7
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	001c      	movs	r4, r3
 8004320:	230f      	movs	r3, #15
 8004322:	4023      	ands	r3, r4
 8004324:	3b08      	subs	r3, #8
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	430a      	orrs	r2, r1
 800432a:	3306      	adds	r3, #6
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	18c3      	adds	r3, r0, r3
 8004330:	3304      	adds	r3, #4
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b003      	add	sp, #12
 800433a:	bd90      	pop	{r4, r7, pc}
 800433c:	e000e100 	.word	0xe000e100
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	045b      	lsls	r3, r3, #17
 8004354:	429a      	cmp	r2, r3
 8004356:	d301      	bcc.n	800435c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004358:	2301      	movs	r3, #1
 800435a:	e010      	b.n	800437e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <SysTick_Config+0x44>)
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	3a01      	subs	r2, #1
 8004362:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004364:	2301      	movs	r3, #1
 8004366:	425b      	negs	r3, r3
 8004368:	2103      	movs	r1, #3
 800436a:	0018      	movs	r0, r3
 800436c:	f7ff ff7c 	bl	8004268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <SysTick_Config+0x44>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <SysTick_Config+0x44>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b002      	add	sp, #8
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	e000e010 	.word	0xe000e010

0800438c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	210f      	movs	r1, #15
 8004398:	187b      	adds	r3, r7, r1
 800439a:	1c02      	adds	r2, r0, #0
 800439c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	b25b      	sxtb	r3, r3
 80043a6:	0011      	movs	r1, r2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff ff5d 	bl	8004268 <__NVIC_SetPriority>
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	0002      	movs	r2, r0
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff ff33 	bl	8004234 <__NVIC_EnableIRQ>
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b002      	add	sp, #8
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7ff ffaf 	bl	8004344 <SysTick_Config>
 80043e6:	0003      	movs	r3, r0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e050      	b.n	80044a4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2225      	movs	r2, #37	; 0x25
 8004406:	5c9b      	ldrb	r3, [r3, r2]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d008      	beq.n	8004420 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2204      	movs	r2, #4
 8004412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e041      	b.n	80044a4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	210e      	movs	r1, #14
 800442c:	438a      	bics	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	491c      	ldr	r1, [pc, #112]	; (80044ac <HAL_DMA_Abort+0xbc>)
 800443c:	400a      	ands	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2101      	movs	r1, #1
 800444c:	438a      	bics	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <HAL_DMA_Abort+0xc0>)
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	221c      	movs	r2, #28
 800445a:	4013      	ands	r3, r2
 800445c:	2201      	movs	r2, #1
 800445e:	409a      	lsls	r2, r3
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_DMA_Abort+0xc0>)
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800446e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00c      	beq.n	8004492 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	490a      	ldr	r1, [pc, #40]	; (80044ac <HAL_DMA_Abort+0xbc>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004490:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2225      	movs	r2, #37	; 0x25
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2224      	movs	r2, #36	; 0x24
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	fffffeff 	.word	0xfffffeff
 80044b0:	40020000 	.word	0x40020000

080044b4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	210f      	movs	r1, #15
 80044be:	187b      	adds	r3, r7, r1
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2225      	movs	r2, #37	; 0x25
 80044c8:	5c9b      	ldrb	r3, [r3, r2]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d006      	beq.n	80044de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2204      	movs	r2, #4
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e049      	b.n	8004572 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	210e      	movs	r1, #14
 80044ea:	438a      	bics	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	438a      	bics	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	491d      	ldr	r1, [pc, #116]	; (8004580 <HAL_DMA_Abort_IT+0xcc>)
 800450a:	400a      	ands	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_DMA_Abort_IT+0xd0>)
 8004510:	6859      	ldr	r1, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	221c      	movs	r2, #28
 8004518:	4013      	ands	r3, r2
 800451a:	2201      	movs	r2, #1
 800451c:	409a      	lsls	r2, r3
 800451e:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_DMA_Abort_IT+0xd0>)
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800452c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004540:	490f      	ldr	r1, [pc, #60]	; (8004580 <HAL_DMA_Abort_IT+0xcc>)
 8004542:	400a      	ands	r2, r1
 8004544:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800454e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2225      	movs	r2, #37	; 0x25
 8004554:	2101      	movs	r1, #1
 8004556:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	0010      	movs	r0, r2
 8004570:	4798      	blx	r3
    }
  }
  return status;
 8004572:	230f      	movs	r3, #15
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	781b      	ldrb	r3, [r3, #0]
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b004      	add	sp, #16
 800457e:	bd80      	pop	{r7, pc}
 8004580:	fffffeff 	.word	0xfffffeff
 8004584:	40020000 	.word	0x40020000

08004588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004596:	e147      	b.n	8004828 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2101      	movs	r1, #1
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4091      	lsls	r1, r2
 80045a2:	000a      	movs	r2, r1
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d100      	bne.n	80045b0 <HAL_GPIO_Init+0x28>
 80045ae:	e138      	b.n	8004822 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d00b      	beq.n	80045d0 <HAL_GPIO_Init+0x48>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d007      	beq.n	80045d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b12      	cmp	r3, #18
 80045ce:	d130      	bne.n	8004632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	409a      	lsls	r2, r3
 80045de:	0013      	movs	r3, r2
 80045e0:	43da      	mvns	r2, r3
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	409a      	lsls	r2, r3
 80045f2:	0013      	movs	r3, r2
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004606:	2201      	movs	r2, #1
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	409a      	lsls	r2, r3
 800460c:	0013      	movs	r3, r2
 800460e:	43da      	mvns	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	2201      	movs	r2, #1
 800461e:	401a      	ands	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	409a      	lsls	r2, r3
 8004624:	0013      	movs	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	409a      	lsls	r2, r3
 8004640:	0013      	movs	r3, r2
 8004642:	43da      	mvns	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	0013      	movs	r3, r2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0xea>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b12      	cmp	r3, #18
 8004670:	d123      	bne.n	80046ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	08da      	lsrs	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3208      	adds	r2, #8
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	58d3      	ldr	r3, [r2, r3]
 800467e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2207      	movs	r2, #7
 8004684:	4013      	ands	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	220f      	movs	r2, #15
 800468a:	409a      	lsls	r2, r3
 800468c:	0013      	movs	r3, r2
 800468e:	43da      	mvns	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2107      	movs	r1, #7
 800469e:	400b      	ands	r3, r1
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	409a      	lsls	r2, r3
 80046a4:	0013      	movs	r3, r2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	08da      	lsrs	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3208      	adds	r2, #8
 80046b4:	0092      	lsls	r2, r2, #2
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	409a      	lsls	r2, r3
 80046c8:	0013      	movs	r3, r2
 80046ca:	43da      	mvns	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2203      	movs	r2, #3
 80046d8:	401a      	ands	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	0013      	movs	r3, r2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	055b      	lsls	r3, r3, #21
 80046f6:	4013      	ands	r3, r2
 80046f8:	d100      	bne.n	80046fc <HAL_GPIO_Init+0x174>
 80046fa:	e092      	b.n	8004822 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80046fc:	4a50      	ldr	r2, [pc, #320]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	3318      	adds	r3, #24
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	589b      	ldr	r3, [r3, r2]
 8004708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2203      	movs	r2, #3
 800470e:	4013      	ands	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	220f      	movs	r2, #15
 8004714:	409a      	lsls	r2, r3
 8004716:	0013      	movs	r3, r2
 8004718:	43da      	mvns	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	23a0      	movs	r3, #160	; 0xa0
 8004724:	05db      	lsls	r3, r3, #23
 8004726:	429a      	cmp	r2, r3
 8004728:	d013      	beq.n	8004752 <HAL_GPIO_Init+0x1ca>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a45      	ldr	r2, [pc, #276]	; (8004844 <HAL_GPIO_Init+0x2bc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00d      	beq.n	800474e <HAL_GPIO_Init+0x1c6>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a44      	ldr	r2, [pc, #272]	; (8004848 <HAL_GPIO_Init+0x2c0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <HAL_GPIO_Init+0x1c2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a43      	ldr	r2, [pc, #268]	; (800484c <HAL_GPIO_Init+0x2c4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_GPIO_Init+0x1be>
 8004742:	2303      	movs	r3, #3
 8004744:	e006      	b.n	8004754 <HAL_GPIO_Init+0x1cc>
 8004746:	2305      	movs	r3, #5
 8004748:	e004      	b.n	8004754 <HAL_GPIO_Init+0x1cc>
 800474a:	2302      	movs	r3, #2
 800474c:	e002      	b.n	8004754 <HAL_GPIO_Init+0x1cc>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_GPIO_Init+0x1cc>
 8004752:	2300      	movs	r3, #0
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	2103      	movs	r1, #3
 8004758:	400a      	ands	r2, r1
 800475a:	00d2      	lsls	r2, r2, #3
 800475c:	4093      	lsls	r3, r2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004764:	4936      	ldr	r1, [pc, #216]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	3318      	adds	r3, #24
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004772:	4a33      	ldr	r2, [pc, #204]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	58d3      	ldr	r3, [r2, r3]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	43da      	mvns	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	4013      	ands	r3, r2
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004798:	4929      	ldr	r1, [pc, #164]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 80047a2:	2384      	movs	r3, #132	; 0x84
 80047a4:	58d3      	ldr	r3, [r2, r3]
 80047a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43da      	mvns	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	029b      	lsls	r3, r3, #10
 80047ba:	4013      	ands	r3, r2
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047c6:	491e      	ldr	r1, [pc, #120]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 80047c8:	2284      	movs	r2, #132	; 0x84
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43da      	mvns	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	035b      	lsls	r3, r3, #13
 80047e6:	4013      	ands	r3, r2
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	43da      	mvns	r2, r3
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	039b      	lsls	r3, r3, #14
 8004810:	4013      	ands	r3, r2
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800481c:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_GPIO_Init+0x2b8>)
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3301      	adds	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	40da      	lsrs	r2, r3
 8004830:	1e13      	subs	r3, r2, #0
 8004832:	d000      	beq.n	8004836 <HAL_GPIO_Init+0x2ae>
 8004834:	e6b0      	b.n	8004598 <HAL_GPIO_Init+0x10>
  }
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b006      	add	sp, #24
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021800 	.word	0x40021800
 8004844:	50000400 	.word	0x50000400
 8004848:	50000800 	.word	0x50000800
 800484c:	50000c00 	.word	0x50000c00

08004850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	0008      	movs	r0, r1
 800485a:	0011      	movs	r1, r2
 800485c:	1cbb      	adds	r3, r7, #2
 800485e:	1c02      	adds	r2, r0, #0
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	1c7b      	adds	r3, r7, #1
 8004864:	1c0a      	adds	r2, r1, #0
 8004866:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004868:	1c7b      	adds	r3, r7, #1
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004870:	1cbb      	adds	r3, r7, #2
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004878:	e003      	b.n	8004882 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487a:	1cbb      	adds	r3, r7, #2
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b002      	add	sp, #8
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800489a:	4013      	ands	r3, r2
 800489c:	0019      	movs	r1, r3
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d11f      	bne.n	80048f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80048b0:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	0013      	movs	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4912      	ldr	r1, [pc, #72]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80048be:	0018      	movs	r0, r3
 80048c0:	f7fb fc2c 	bl	800011c <__udivsi3>
 80048c4:	0003      	movs	r3, r0
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ca:	e008      	b.n	80048de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e001      	b.n	80048de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e009      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	401a      	ands	r2, r3
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d0ed      	beq.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b004      	add	sp, #16
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	40007000 	.word	0x40007000
 8004900:	fffff9ff 	.word	0xfffff9ff
 8004904:	200003bc 	.word	0x200003bc
 8004908:	000f4240 	.word	0x000f4240

0800490c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	23e0      	movs	r3, #224	; 0xe0
 8004916:	01db      	lsls	r3, r3, #7
 8004918:	4013      	ands	r3, r2
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000

08004924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e2f9      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2201      	movs	r2, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d100      	bne.n	8004942 <HAL_RCC_OscConfig+0x1e>
 8004940:	e07c      	b.n	8004a3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004942:	4bc3      	ldr	r3, [pc, #780]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2238      	movs	r2, #56	; 0x38
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494c:	4bc0      	ldr	r3, [pc, #768]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2203      	movs	r2, #3
 8004952:	4013      	ands	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b10      	cmp	r3, #16
 800495a:	d102      	bne.n	8004962 <HAL_RCC_OscConfig+0x3e>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d002      	beq.n	8004968 <HAL_RCC_OscConfig+0x44>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d10b      	bne.n	8004980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004968:	4bb9      	ldr	r3, [pc, #740]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	4013      	ands	r3, r2
 8004972:	d062      	beq.n	8004a3a <HAL_RCC_OscConfig+0x116>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d15e      	bne.n	8004a3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e2d4      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	025b      	lsls	r3, r3, #9
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x78>
 800498c:	4bb0      	ldr	r3, [pc, #704]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4baf      	ldr	r3, [pc, #700]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	0249      	lsls	r1, r1, #9
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e020      	b.n	80049de <HAL_RCC_OscConfig+0xba>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	23a0      	movs	r3, #160	; 0xa0
 80049a2:	02db      	lsls	r3, r3, #11
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d10e      	bne.n	80049c6 <HAL_RCC_OscConfig+0xa2>
 80049a8:	4ba9      	ldr	r3, [pc, #676]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4ba8      	ldr	r3, [pc, #672]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	02c9      	lsls	r1, r1, #11
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	4ba6      	ldr	r3, [pc, #664]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4ba5      	ldr	r3, [pc, #660]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	0249      	lsls	r1, r1, #9
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e00b      	b.n	80049de <HAL_RCC_OscConfig+0xba>
 80049c6:	4ba2      	ldr	r3, [pc, #648]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4ba1      	ldr	r3, [pc, #644]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049cc:	49a1      	ldr	r1, [pc, #644]	; (8004c54 <HAL_RCC_OscConfig+0x330>)
 80049ce:	400a      	ands	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4b9f      	ldr	r3, [pc, #636]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b9e      	ldr	r3, [pc, #632]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 80049d8:	499f      	ldr	r1, [pc, #636]	; (8004c58 <HAL_RCC_OscConfig+0x334>)
 80049da:	400a      	ands	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d014      	beq.n	8004a10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fe ff6b 	bl	80038c0 <HAL_GetTick>
 80049ea:	0003      	movs	r3, r0
 80049ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fe ff66 	bl	80038c0 <HAL_GetTick>
 80049f4:	0002      	movs	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e293      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a02:	4b93      	ldr	r3, [pc, #588]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xcc>
 8004a0e:	e015      	b.n	8004a3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe ff56 	bl	80038c0 <HAL_GetTick>
 8004a14:	0003      	movs	r3, r0
 8004a16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1a:	f7fe ff51 	bl	80038c0 <HAL_GetTick>
 8004a1e:	0002      	movs	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b64      	cmp	r3, #100	; 0x64
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e27e      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2c:	4b88      	ldr	r3, [pc, #544]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	4013      	ands	r3, r2
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0xf6>
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d100      	bne.n	8004a48 <HAL_RCC_OscConfig+0x124>
 8004a46:	e099      	b.n	8004b7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a48:	4b81      	ldr	r3, [pc, #516]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2238      	movs	r2, #56	; 0x38
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a52:	4b7f      	ldr	r3, [pc, #508]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2203      	movs	r2, #3
 8004a58:	4013      	ands	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d102      	bne.n	8004a68 <HAL_RCC_OscConfig+0x144>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d002      	beq.n	8004a6e <HAL_RCC_OscConfig+0x14a>
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d135      	bne.n	8004ada <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6e:	4b78      	ldr	r3, [pc, #480]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4013      	ands	r3, r2
 8004a78:	d005      	beq.n	8004a86 <HAL_RCC_OscConfig+0x162>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e251      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a86:	4b72      	ldr	r3, [pc, #456]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a74      	ldr	r2, [pc, #464]	; (8004c5c <HAL_RCC_OscConfig+0x338>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	0019      	movs	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	021a      	lsls	r2, r3, #8
 8004a96:	4b6e      	ldr	r3, [pc, #440]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d112      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004aa2:	4b6b      	ldr	r3, [pc, #428]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a6e      	ldr	r2, [pc, #440]	; (8004c60 <HAL_RCC_OscConfig+0x33c>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ab6:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	0adb      	lsrs	r3, r3, #11
 8004abc:	2207      	movs	r2, #7
 8004abe:	4013      	ands	r3, r2
 8004ac0:	4a68      	ldr	r2, [pc, #416]	; (8004c64 <HAL_RCC_OscConfig+0x340>)
 8004ac2:	40da      	lsrs	r2, r3
 8004ac4:	4b68      	ldr	r3, [pc, #416]	; (8004c68 <HAL_RCC_OscConfig+0x344>)
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ac8:	4b68      	ldr	r3, [pc, #416]	; (8004c6c <HAL_RCC_OscConfig+0x348>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fe fe9b 	bl	8003808 <HAL_InitTick>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d051      	beq.n	8004b7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e227      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d030      	beq.n	8004b44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ae2:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5e      	ldr	r2, [pc, #376]	; (8004c60 <HAL_RCC_OscConfig+0x33c>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004af2:	430a      	orrs	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004af6:	4b56      	ldr	r3, [pc, #344]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b55      	ldr	r3, [pc, #340]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	0049      	lsls	r1, r1, #1
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fe fedc 	bl	80038c0 <HAL_GetTick>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fe fed7 	bl	80038c0 <HAL_GetTick>
 8004b12:	0002      	movs	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e204      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b20:	4b4b      	ldr	r3, [pc, #300]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a4a      	ldr	r2, [pc, #296]	; (8004c5c <HAL_RCC_OscConfig+0x338>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	4b44      	ldr	r3, [pc, #272]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e01b      	b.n	8004b7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004b44:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b4a:	4949      	ldr	r1, [pc, #292]	; (8004c70 <HAL_RCC_OscConfig+0x34c>)
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fe feb6 	bl	80038c0 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5a:	f7fe feb1 	bl	80038c0 <HAL_GetTick>
 8004b5e:	0002      	movs	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e1de      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b6c:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4013      	ands	r3, r2
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x236>
 8004b78:	e000      	b.n	8004b7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2208      	movs	r2, #8
 8004b82:	4013      	ands	r3, r2
 8004b84:	d047      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b86:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2238      	movs	r2, #56	; 0x38
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b18      	cmp	r3, #24
 8004b90:	d10a      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b96:	2202      	movs	r2, #2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d03c      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2f2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d138      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e1c0      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d019      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bb4:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fe80 	bl	80038c0 <HAL_GetTick>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc6:	f7fe fe7b 	bl	80038c0 <HAL_GetTick>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e1a8      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bdc:	2202      	movs	r2, #2
 8004bde:	4013      	ands	r3, r2
 8004be0:	d0f1      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x2a2>
 8004be2:	e018      	b.n	8004c16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004bea:	2101      	movs	r1, #1
 8004bec:	438a      	bics	r2, r1
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fe66 	bl	80038c0 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfa:	f7fe fe61 	bl	80038c0 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e18e      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d1f1      	bne.n	8004bfa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <HAL_RCC_OscConfig+0x2fe>
 8004c20:	e0c6      	b.n	8004db0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c22:	231f      	movs	r3, #31
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2238      	movs	r2, #56	; 0x38
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d11e      	bne.n	8004c74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_RCC_OscConfig+0x32c>)
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <HAL_RCC_OscConfig+0x31e>
 8004c40:	e0b6      	b.n	8004db0 <HAL_RCC_OscConfig+0x48c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d000      	beq.n	8004c4c <HAL_RCC_OscConfig+0x328>
 8004c4a:	e0b1      	b.n	8004db0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e16c      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
 8004c50:	40021000 	.word	0x40021000
 8004c54:	fffeffff 	.word	0xfffeffff
 8004c58:	fffbffff 	.word	0xfffbffff
 8004c5c:	ffff80ff 	.word	0xffff80ff
 8004c60:	ffffc7ff 	.word	0xffffc7ff
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	200003bc 	.word	0x200003bc
 8004c6c:	200003c0 	.word	0x200003c0
 8004c70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c74:	4baf      	ldr	r3, [pc, #700]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	055b      	lsls	r3, r3, #21
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_OscConfig+0x360>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x362>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d011      	beq.n	8004cae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	4baa      	ldr	r3, [pc, #680]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8e:	4ba9      	ldr	r3, [pc, #676]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004c90:	2180      	movs	r1, #128	; 0x80
 8004c92:	0549      	lsls	r1, r1, #21
 8004c94:	430a      	orrs	r2, r1
 8004c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c98:	4ba6      	ldr	r3, [pc, #664]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	055b      	lsls	r3, r3, #21
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004ca6:	231f      	movs	r3, #31
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	2201      	movs	r2, #1
 8004cac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cae:	4ba2      	ldr	r3, [pc, #648]	; (8004f38 <HAL_RCC_OscConfig+0x614>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d11a      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cba:	4b9f      	ldr	r3, [pc, #636]	; (8004f38 <HAL_RCC_OscConfig+0x614>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b9e      	ldr	r3, [pc, #632]	; (8004f38 <HAL_RCC_OscConfig+0x614>)
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	0049      	lsls	r1, r1, #1
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fdfa 	bl	80038c0 <HAL_GetTick>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd2:	f7fe fdf5 	bl	80038c0 <HAL_GetTick>
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e122      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce4:	4b94      	ldr	r3, [pc, #592]	; (8004f38 <HAL_RCC_OscConfig+0x614>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3e2>
 8004cf8:	4b8e      	ldr	r3, [pc, #568]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cfc:	4b8d      	ldr	r3, [pc, #564]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004cfe:	2101      	movs	r1, #1
 8004d00:	430a      	orrs	r2, r1
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d04:	e01c      	b.n	8004d40 <HAL_RCC_OscConfig+0x41c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b05      	cmp	r3, #5
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x404>
 8004d0e:	4b89      	ldr	r3, [pc, #548]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d12:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d14:	2104      	movs	r1, #4
 8004d16:	430a      	orrs	r2, r1
 8004d18:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d1a:	4b86      	ldr	r3, [pc, #536]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d1e:	4b85      	ldr	r3, [pc, #532]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d20:	2101      	movs	r1, #1
 8004d22:	430a      	orrs	r2, r1
 8004d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d26:	e00b      	b.n	8004d40 <HAL_RCC_OscConfig+0x41c>
 8004d28:	4b82      	ldr	r3, [pc, #520]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d2c:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d2e:	2101      	movs	r1, #1
 8004d30:	438a      	bics	r2, r1
 8004d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d34:	4b7f      	ldr	r3, [pc, #508]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d38:	4b7e      	ldr	r3, [pc, #504]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d014      	beq.n	8004d72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fe fdba 	bl	80038c0 <HAL_GetTick>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d50:	e009      	b.n	8004d66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f7fe fdb5 	bl	80038c0 <HAL_GetTick>
 8004d56:	0002      	movs	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	4a77      	ldr	r2, [pc, #476]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e0e1      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x42e>
 8004d70:	e013      	b.n	8004d9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fe fda5 	bl	80038c0 <HAL_GetTick>
 8004d76:	0003      	movs	r3, r0
 8004d78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d7a:	e009      	b.n	8004d90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fe fda0 	bl	80038c0 <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	4a6d      	ldr	r2, [pc, #436]	; (8004f3c <HAL_RCC_OscConfig+0x618>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0cc      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d90:	4b68      	ldr	r3, [pc, #416]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d94:	2202      	movs	r2, #2
 8004d96:	4013      	ands	r3, r2
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d9a:	231f      	movs	r3, #31
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004da8:	4b62      	ldr	r3, [pc, #392]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004daa:	4965      	ldr	r1, [pc, #404]	; (8004f40 <HAL_RCC_OscConfig+0x61c>)
 8004dac:	400a      	ands	r2, r1
 8004dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <HAL_RCC_OscConfig+0x496>
 8004db8:	e0b6      	b.n	8004f28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dba:	4b5e      	ldr	r3, [pc, #376]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2238      	movs	r2, #56	; 0x38
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d100      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x4a4>
 8004dc6:	e07e      	b.n	8004ec6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d153      	bne.n	8004e78 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd0:	4b58      	ldr	r3, [pc, #352]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b57      	ldr	r3, [pc, #348]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004dd6:	495b      	ldr	r1, [pc, #364]	; (8004f44 <HAL_RCC_OscConfig+0x620>)
 8004dd8:	400a      	ands	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fe fd70 	bl	80038c0 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fe fd6b 	bl	80038c0 <HAL_GetTick>
 8004dea:	0002      	movs	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e098      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df8:	4b4e      	ldr	r3, [pc, #312]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	049b      	lsls	r3, r3, #18
 8004e00:	4013      	ands	r3, r2
 8004e02:	d1f0      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e04:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a4f      	ldr	r2, [pc, #316]	; (8004f48 <HAL_RCC_OscConfig+0x624>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e32:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	0449      	lsls	r1, r1, #17
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004e40:	4b3c      	ldr	r3, [pc, #240]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	0549      	lsls	r1, r1, #21
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fe fd37 	bl	80038c0 <HAL_GetTick>
 8004e52:	0003      	movs	r3, r0
 8004e54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fe fd32 	bl	80038c0 <HAL_GetTick>
 8004e5c:	0002      	movs	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e05f      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6a:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	049b      	lsls	r3, r3, #18
 8004e72:	4013      	ands	r3, r2
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x534>
 8004e76:	e057      	b.n	8004f28 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e78:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e7e:	4931      	ldr	r1, [pc, #196]	; (8004f44 <HAL_RCC_OscConfig+0x620>)
 8004e80:	400a      	ands	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004e96:	492d      	ldr	r1, [pc, #180]	; (8004f4c <HAL_RCC_OscConfig+0x628>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fd10 	bl	80038c0 <HAL_GetTick>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea6:	f7fe fd0b 	bl	80038c0 <HAL_GetTick>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e038      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	049b      	lsls	r3, r3, #18
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x582>
 8004ec4:	e030      	b.n	8004f28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e02b      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ed2:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <HAL_RCC_OscConfig+0x610>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2203      	movs	r2, #3
 8004edc:	401a      	ands	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d11e      	bne.n	8004f24 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2270      	movs	r2, #112	; 0x70
 8004eea:	401a      	ands	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d117      	bne.n	8004f24 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	23fe      	movs	r3, #254	; 0xfe
 8004ef8:	01db      	lsls	r3, r3, #7
 8004efa:	401a      	ands	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d10e      	bne.n	8004f24 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	23f8      	movs	r3, #248	; 0xf8
 8004f0a:	039b      	lsls	r3, r3, #14
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d106      	bne.n	8004f24 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	0f5b      	lsrs	r3, r3, #29
 8004f1a:	075a      	lsls	r2, r3, #29
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b008      	add	sp, #32
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	00001388 	.word	0x00001388
 8004f40:	efffffff 	.word	0xefffffff
 8004f44:	feffffff 	.word	0xfeffffff
 8004f48:	1fc1808c 	.word	0x1fc1808c
 8004f4c:	effeffff 	.word	0xeffeffff

08004f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0e9      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f64:	4b76      	ldr	r3, [pc, #472]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2207      	movs	r2, #7
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d91e      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f72:	4b73      	ldr	r3, [pc, #460]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2207      	movs	r2, #7
 8004f78:	4393      	bics	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	4b70      	ldr	r3, [pc, #448]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f84:	f7fe fc9c 	bl	80038c0 <HAL_GetTick>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f8c:	e009      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8e:	f7fe fc97 	bl	80038c0 <HAL_GetTick>
 8004f92:	0002      	movs	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	4a6a      	ldr	r2, [pc, #424]	; (8005144 <HAL_RCC_ClockConfig+0x1f4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0ca      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fa2:	4b67      	ldr	r3, [pc, #412]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	4013      	ands	r3, r2
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1ee      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d015      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d006      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004fc4:	4b60      	ldr	r3, [pc, #384]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	4b5f      	ldr	r3, [pc, #380]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8004fca:	21e0      	movs	r1, #224	; 0xe0
 8004fcc:	01c9      	lsls	r1, r1, #7
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	4b5d      	ldr	r3, [pc, #372]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4a5d      	ldr	r2, [pc, #372]	; (800514c <HAL_RCC_ClockConfig+0x1fc>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	4013      	ands	r3, r2
 8004fee:	d057      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff8:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	029b      	lsls	r3, r3, #10
 8005000:	4013      	ands	r3, r2
 8005002:	d12b      	bne.n	800505c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e097      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d107      	bne.n	8005020 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005010:	4b4d      	ldr	r3, [pc, #308]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	049b      	lsls	r3, r3, #18
 8005018:	4013      	ands	r3, r2
 800501a:	d11f      	bne.n	800505c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e08b      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d107      	bne.n	8005038 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005028:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4013      	ands	r3, r2
 8005032:	d113      	bne.n	800505c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e07f      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d106      	bne.n	800504e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8005042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005044:	2202      	movs	r2, #2
 8005046:	4013      	ands	r3, r2
 8005048:	d108      	bne.n	800505c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e074      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504e:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	2202      	movs	r2, #2
 8005054:	4013      	ands	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e06d      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800505c:	4b3a      	ldr	r3, [pc, #232]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2207      	movs	r2, #7
 8005062:	4393      	bics	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4b37      	ldr	r3, [pc, #220]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fe fc26 	bl	80038c0 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005078:	e009      	b.n	800508e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507a:	f7fe fc21 	bl	80038c0 <HAL_GetTick>
 800507e:	0002      	movs	r2, r0
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a2f      	ldr	r2, [pc, #188]	; (8005144 <HAL_RCC_ClockConfig+0x1f4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e054      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2238      	movs	r2, #56	; 0x38
 8005094:	401a      	ands	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	429a      	cmp	r2, r3
 800509e:	d1ec      	bne.n	800507a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a0:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2207      	movs	r2, #7
 80050a6:	4013      	ands	r3, r2
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d21e      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2207      	movs	r2, #7
 80050b4:	4393      	bics	r3, r2
 80050b6:	0019      	movs	r1, r3
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050c0:	f7fe fbfe 	bl	80038c0 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050c8:	e009      	b.n	80050de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ca:	f7fe fbf9 	bl	80038c0 <HAL_GetTick>
 80050ce:	0002      	movs	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_RCC_ClockConfig+0x1f4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e02c      	b.n	8005138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050de:	4b18      	ldr	r3, [pc, #96]	; (8005140 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2207      	movs	r2, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1ee      	bne.n	80050ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2204      	movs	r2, #4
 80050f2:	4013      	ands	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <HAL_RCC_ClockConfig+0x200>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800510a:	f000 f829 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800510e:	0001      	movs	r1, r0
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_RCC_ClockConfig+0x1f8>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	220f      	movs	r2, #15
 8005118:	401a      	ands	r2, r3
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <HAL_RCC_ClockConfig+0x204>)
 800511c:	0092      	lsls	r2, r2, #2
 800511e:	58d3      	ldr	r3, [r2, r3]
 8005120:	221f      	movs	r2, #31
 8005122:	4013      	ands	r3, r2
 8005124:	000a      	movs	r2, r1
 8005126:	40da      	lsrs	r2, r3
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <HAL_RCC_ClockConfig+0x208>)
 800512a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x20c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	0018      	movs	r0, r3
 8005132:	f7fe fb69 	bl	8003808 <HAL_InitTick>
 8005136:	0003      	movs	r3, r0
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40022000 	.word	0x40022000
 8005144:	00001388 	.word	0x00001388
 8005148:	40021000 	.word	0x40021000
 800514c:	fffff0ff 	.word	0xfffff0ff
 8005150:	ffff8fff 	.word	0xffff8fff
 8005154:	0800a200 	.word	0x0800a200
 8005158:	200003bc 	.word	0x200003bc
 800515c:	200003c0 	.word	0x200003c0

08005160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005166:	4b3c      	ldr	r3, [pc, #240]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2238      	movs	r2, #56	; 0x38
 800516c:	4013      	ands	r3, r2
 800516e:	d10f      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005170:	4b39      	ldr	r3, [pc, #228]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0adb      	lsrs	r3, r3, #11
 8005176:	2207      	movs	r2, #7
 8005178:	4013      	ands	r3, r2
 800517a:	2201      	movs	r2, #1
 800517c:	409a      	lsls	r2, r3
 800517e:	0013      	movs	r3, r2
 8005180:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	4835      	ldr	r0, [pc, #212]	; (800525c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005186:	f7fa ffc9 	bl	800011c <__udivsi3>
 800518a:	0003      	movs	r3, r0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e05d      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005190:	4b31      	ldr	r3, [pc, #196]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2238      	movs	r2, #56	; 0x38
 8005196:	4013      	ands	r3, r2
 8005198:	2b08      	cmp	r3, #8
 800519a:	d102      	bne.n	80051a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800519c:	4b30      	ldr	r3, [pc, #192]	; (8005260 <HAL_RCC_GetSysClockFreq+0x100>)
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	e054      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a2:	4b2d      	ldr	r3, [pc, #180]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2238      	movs	r2, #56	; 0x38
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d138      	bne.n	8005220 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051ae:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	2207      	movs	r2, #7
 80051c0:	4013      	ands	r3, r2
 80051c2:	3301      	adds	r3, #1
 80051c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d10d      	bne.n	80051e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4824      	ldr	r0, [pc, #144]	; (8005260 <HAL_RCC_GetSysClockFreq+0x100>)
 80051d0:	f7fa ffa4 	bl	800011c <__udivsi3>
 80051d4:	0003      	movs	r3, r0
 80051d6:	0019      	movs	r1, r3
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	227f      	movs	r2, #127	; 0x7f
 80051e0:	4013      	ands	r3, r2
 80051e2:	434b      	muls	r3, r1
 80051e4:	617b      	str	r3, [r7, #20]
        break;
 80051e6:	e00d      	b.n	8005204 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	481c      	ldr	r0, [pc, #112]	; (800525c <HAL_RCC_GetSysClockFreq+0xfc>)
 80051ec:	f7fa ff96 	bl	800011c <__udivsi3>
 80051f0:	0003      	movs	r3, r0
 80051f2:	0019      	movs	r1, r3
 80051f4:	4b18      	ldr	r3, [pc, #96]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	227f      	movs	r2, #127	; 0x7f
 80051fc:	4013      	ands	r3, r2
 80051fe:	434b      	muls	r3, r1
 8005200:	617b      	str	r3, [r7, #20]
        break;
 8005202:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	0f5b      	lsrs	r3, r3, #29
 800520a:	2207      	movs	r2, #7
 800520c:	4013      	ands	r3, r2
 800520e:	3301      	adds	r3, #1
 8005210:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	f7fa ff81 	bl	800011c <__udivsi3>
 800521a:	0003      	movs	r3, r0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e015      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2238      	movs	r2, #56	; 0x38
 8005226:	4013      	ands	r3, r2
 8005228:	2b20      	cmp	r3, #32
 800522a:	d103      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e00b      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005234:	4b08      	ldr	r3, [pc, #32]	; (8005258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2238      	movs	r2, #56	; 0x38
 800523a:	4013      	ands	r3, r2
 800523c:	2b18      	cmp	r3, #24
 800523e:	d103      	bne.n	8005248 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005240:	23fa      	movs	r3, #250	; 0xfa
 8005242:	01db      	lsls	r3, r3, #7
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	e001      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800524c:	693b      	ldr	r3, [r7, #16]
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b006      	add	sp, #24
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	40021000 	.word	0x40021000
 800525c:	00f42400 	.word	0x00f42400
 8005260:	007a1200 	.word	0x007a1200

08005264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <HAL_RCC_GetHCLKFreq+0x10>)
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	200003bc 	.word	0x200003bc

08005278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005278:	b5b0      	push	{r4, r5, r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800527c:	f7ff fff2 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 8005280:	0004      	movs	r4, r0
 8005282:	f7ff fb43 	bl	800490c <LL_RCC_GetAPB1Prescaler>
 8005286:	0003      	movs	r3, r0
 8005288:	0b1a      	lsrs	r2, r3, #12
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800528c:	0092      	lsls	r2, r2, #2
 800528e:	58d3      	ldr	r3, [r2, r3]
 8005290:	221f      	movs	r2, #31
 8005292:	4013      	ands	r3, r2
 8005294:	40dc      	lsrs	r4, r3
 8005296:	0023      	movs	r3, r4
}
 8005298:	0018      	movs	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	bdb0      	pop	{r4, r5, r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	0800a240 	.word	0x0800a240

080052a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80052ac:	2313      	movs	r3, #19
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052b4:	2312      	movs	r3, #18
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	4013      	ands	r3, r2
 80052c6:	d100      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80052c8:	e0a3      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ca:	2011      	movs	r0, #17
 80052cc:	183b      	adds	r3, r7, r0
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d2:	4b86      	ldr	r3, [pc, #536]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	055b      	lsls	r3, r3, #21
 80052da:	4013      	ands	r3, r2
 80052dc:	d110      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	4b83      	ldr	r3, [pc, #524]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e2:	4b82      	ldr	r3, [pc, #520]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	0549      	lsls	r1, r1, #21
 80052e8:	430a      	orrs	r2, r1
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80052ec:	4b7f      	ldr	r3, [pc, #508]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	055b      	lsls	r3, r3, #21
 80052f4:	4013      	ands	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005300:	4b7b      	ldr	r3, [pc, #492]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b7a      	ldr	r3, [pc, #488]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	0049      	lsls	r1, r1, #1
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800530e:	f7fe fad7 	bl	80038c0 <HAL_GetTick>
 8005312:	0003      	movs	r3, r0
 8005314:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005316:	e00b      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fe fad2 	bl	80038c0 <HAL_GetTick>
 800531c:	0002      	movs	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d904      	bls.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005326:	2313      	movs	r3, #19
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	2203      	movs	r2, #3
 800532c:	701a      	strb	r2, [r3, #0]
        break;
 800532e:	e005      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005330:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4013      	ands	r3, r2
 800533a:	d0ed      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800533c:	2313      	movs	r3, #19
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d154      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005346:	4b69      	ldr	r3, [pc, #420]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800534a:	23c0      	movs	r3, #192	; 0xc0
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4013      	ands	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d019      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	429a      	cmp	r2, r3
 8005360:	d014      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005362:	4b62      	ldr	r3, [pc, #392]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	4a63      	ldr	r2, [pc, #396]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800536c:	4b5f      	ldr	r3, [pc, #380]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800536e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005370:	4b5e      	ldr	r3, [pc, #376]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	0249      	lsls	r1, r1, #9
 8005376:	430a      	orrs	r2, r1
 8005378:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800537a:	4b5c      	ldr	r3, [pc, #368]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800537c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800537e:	4b5b      	ldr	r3, [pc, #364]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005380:	495d      	ldr	r1, [pc, #372]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005382:	400a      	ands	r2, r1
 8005384:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005386:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2201      	movs	r2, #1
 8005390:	4013      	ands	r3, r2
 8005392:	d016      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fe fa94 	bl	80038c0 <HAL_GetTick>
 8005398:	0003      	movs	r3, r0
 800539a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539c:	e00c      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539e:	f7fe fa8f 	bl	80038c0 <HAL_GetTick>
 80053a2:	0002      	movs	r2, r0
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	4a54      	ldr	r2, [pc, #336]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d904      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80053ae:	2313      	movs	r3, #19
 80053b0:	18fb      	adds	r3, r7, r3
 80053b2:	2203      	movs	r2, #3
 80053b4:	701a      	strb	r2, [r3, #0]
            break;
 80053b6:	e004      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b8:	4b4c      	ldr	r3, [pc, #304]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	2202      	movs	r2, #2
 80053be:	4013      	ands	r3, r2
 80053c0:	d0ed      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80053c2:	2313      	movs	r3, #19
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053cc:	4b47      	ldr	r3, [pc, #284]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	4a48      	ldr	r2, [pc, #288]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	4b44      	ldr	r3, [pc, #272]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053dc:	430a      	orrs	r2, r1
 80053de:	65da      	str	r2, [r3, #92]	; 0x5c
 80053e0:	e00c      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053e2:	2312      	movs	r3, #18
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	2213      	movs	r2, #19
 80053e8:	18ba      	adds	r2, r7, r2
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e005      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	2312      	movs	r3, #18
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2213      	movs	r2, #19
 80053f6:	18ba      	adds	r2, r7, r2
 80053f8:	7812      	ldrb	r2, [r2, #0]
 80053fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053fc:	2311      	movs	r3, #17
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b39      	ldr	r3, [pc, #228]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540a:	4b38      	ldr	r3, [pc, #224]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800540c:	493c      	ldr	r1, [pc, #240]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800540e:	400a      	ands	r2, r1
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	4013      	ands	r3, r2
 800541a:	d009      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541c:	4b33      	ldr	r3, [pc, #204]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	2203      	movs	r2, #3
 8005422:	4393      	bics	r3, r2
 8005424:	0019      	movs	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800542c:	430a      	orrs	r2, r1
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2202      	movs	r2, #2
 8005436:	4013      	ands	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543a:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	220c      	movs	r2, #12
 8005440:	4393      	bics	r3, r2
 8005442:	0019      	movs	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b28      	ldr	r3, [pc, #160]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800544a:	430a      	orrs	r2, r1
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2220      	movs	r2, #32
 8005454:	4013      	ands	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005458:	4b24      	ldr	r3, [pc, #144]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	4a29      	ldr	r2, [pc, #164]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	4013      	ands	r3, r2
 8005460:	0019      	movs	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	4b21      	ldr	r3, [pc, #132]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005468:	430a      	orrs	r2, r1
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	01db      	lsls	r3, r3, #7
 8005474:	4013      	ands	r3, r2
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005478:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	0899      	lsrs	r1, r3, #2
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005486:	430a      	orrs	r2, r1
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	05db      	lsls	r3, r3, #23
 8005492:	429a      	cmp	r2, r3
 8005494:	d106      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	0249      	lsls	r1, r1, #9
 80054a0:	430a      	orrs	r2, r1
 80054a2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	4013      	ands	r3, r2
 80054ae:	d016      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80054b0:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	0019      	movs	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	01db      	lsls	r3, r3, #7
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d106      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	0249      	lsls	r1, r1, #9
 80054da:	430a      	orrs	r2, r1
 80054dc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80054de:	2312      	movs	r3, #18
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	781b      	ldrb	r3, [r3, #0]
}
 80054e4:	0018      	movs	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b006      	add	sp, #24
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40007000 	.word	0x40007000
 80054f4:	fffffcff 	.word	0xfffffcff
 80054f8:	fffeffff 	.word	0xfffeffff
 80054fc:	00001388 	.word	0x00001388
 8005500:	efffffff 	.word	0xefffffff
 8005504:	ffffcfff 	.word	0xffffcfff
 8005508:	ffff3fff 	.word	0xffff3fff

0800550c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e04a      	b.n	80055b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	223d      	movs	r2, #61	; 0x3d
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223c      	movs	r2, #60	; 0x3c
 800552e:	2100      	movs	r1, #0
 8005530:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f7fd feb7 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	223d      	movs	r2, #61	; 0x3d
 800553e:	2102      	movs	r1, #2
 8005540:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3304      	adds	r3, #4
 800554a:	0019      	movs	r1, r3
 800554c:	0010      	movs	r0, r2
 800554e:	f000 f9dd 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2248      	movs	r2, #72	; 0x48
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	223e      	movs	r2, #62	; 0x3e
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223f      	movs	r2, #63	; 0x3f
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2240      	movs	r2, #64	; 0x40
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2241      	movs	r2, #65	; 0x41
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2242      	movs	r2, #66	; 0x42
 800557e:	2101      	movs	r1, #1
 8005580:	5499      	strb	r1, [r3, r2]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2243      	movs	r2, #67	; 0x43
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2244      	movs	r2, #68	; 0x44
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2245      	movs	r2, #69	; 0x45
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2246      	movs	r2, #70	; 0x46
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2247      	movs	r2, #71	; 0x47
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	223d      	movs	r2, #61	; 0x3d
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b002      	add	sp, #8
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	223d      	movs	r2, #61	; 0x3d
 80055c8:	5c9b      	ldrb	r3, [r3, r2]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d001      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e03c      	b.n	800564e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	223d      	movs	r2, #61	; 0x3d
 80055d8:	2102      	movs	r1, #2
 80055da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2101      	movs	r1, #1
 80055e8:	430a      	orrs	r2, r1
 80055ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <HAL_TIM_Base_Start_IT+0x9c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_TIM_Base_Start_IT+0x4e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a18      	ldr	r2, [pc, #96]	; (800565c <HAL_TIM_Base_Start_IT+0xa0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_TIM_Base_Start_IT+0x4e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <HAL_TIM_Base_Start_IT+0xa4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d116      	bne.n	8005638 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <HAL_TIM_Base_Start_IT+0xa8>)
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d016      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x8e>
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	025b      	lsls	r3, r3, #9
 8005622:	429a      	cmp	r2, r3
 8005624:	d011      	beq.n	800564a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2101      	movs	r1, #1
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	e008      	b.n	800564a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2101      	movs	r1, #1
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e000      	b.n	800564c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40000400 	.word	0x40000400
 8005660:	40014000 	.word	0x40014000
 8005664:	00010007 	.word	0x00010007

08005668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2202      	movs	r2, #2
 8005678:	4013      	ands	r3, r2
 800567a:	2b02      	cmp	r3, #2
 800567c:	d124      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2202      	movs	r2, #2
 8005686:	4013      	ands	r3, r2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d11d      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2203      	movs	r2, #3
 8005692:	4252      	negs	r2, r2
 8005694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2203      	movs	r2, #3
 80056a4:	4013      	ands	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 f916 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 80056b0:	e007      	b.n	80056c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 f909 	bl	80058cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 f915 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2204      	movs	r2, #4
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d125      	bne.n	8005722 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2204      	movs	r2, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d11e      	bne.n	8005722 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2205      	movs	r2, #5
 80056ea:	4252      	negs	r2, r2
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0018      	movs	r0, r3
 8005706:	f000 f8e9 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 800570a:	e007      	b.n	800571c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0018      	movs	r0, r3
 8005710:	f000 f8dc 	bl	80058cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	0018      	movs	r0, r3
 8005718:	f000 f8e8 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2208      	movs	r2, #8
 800572a:	4013      	ands	r3, r2
 800572c:	2b08      	cmp	r3, #8
 800572e:	d124      	bne.n	800577a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2208      	movs	r2, #8
 8005738:	4013      	ands	r3, r2
 800573a:	2b08      	cmp	r3, #8
 800573c:	d11d      	bne.n	800577a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2209      	movs	r2, #9
 8005744:	4252      	negs	r2, r2
 8005746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2204      	movs	r2, #4
 800574c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2203      	movs	r2, #3
 8005756:	4013      	ands	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0018      	movs	r0, r3
 800575e:	f000 f8bd 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 8005762:	e007      	b.n	8005774 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 f8b0 	bl	80058cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	0018      	movs	r0, r3
 8005770:	f000 f8bc 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2210      	movs	r2, #16
 8005782:	4013      	ands	r3, r2
 8005784:	2b10      	cmp	r3, #16
 8005786:	d125      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2210      	movs	r2, #16
 8005790:	4013      	ands	r3, r2
 8005792:	2b10      	cmp	r3, #16
 8005794:	d11e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2211      	movs	r2, #17
 800579c:	4252      	negs	r2, r2
 800579e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2208      	movs	r2, #8
 80057a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	23c0      	movs	r3, #192	; 0xc0
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4013      	ands	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f890 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 80057bc:	e007      	b.n	80057ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 f883 	bl	80058cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 f88f 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d10f      	bne.n	8005802 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d108      	bne.n	8005802 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2202      	movs	r2, #2
 80057f6:	4252      	negs	r2, r2
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7fb f81b 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	4013      	ands	r3, r2
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d10f      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	4013      	ands	r3, r2
 800581a:	2b80      	cmp	r3, #128	; 0x80
 800581c:	d108      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2281      	movs	r2, #129	; 0x81
 8005824:	4252      	negs	r2, r2
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	0018      	movs	r0, r3
 800582c:	f000 f954 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	401a      	ands	r2, r3
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	429a      	cmp	r2, r3
 8005842:	d10e      	bne.n	8005862 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	4013      	ands	r3, r2
 800584e:	2b80      	cmp	r3, #128	; 0x80
 8005850:	d107      	bne.n	8005862 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <HAL_TIM_IRQHandler+0x260>)
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0018      	movs	r0, r3
 800585e:	f000 f943 	bl	8005ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2240      	movs	r2, #64	; 0x40
 800586a:	4013      	ands	r3, r2
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d10f      	bne.n	8005890 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2240      	movs	r2, #64	; 0x40
 8005878:	4013      	ands	r3, r2
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d108      	bne.n	8005890 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2241      	movs	r2, #65	; 0x41
 8005884:	4252      	negs	r2, r2
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 f836 	bl	80058fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2220      	movs	r2, #32
 8005898:	4013      	ands	r3, r2
 800589a:	2b20      	cmp	r3, #32
 800589c:	d10f      	bne.n	80058be <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d108      	bne.n	80058be <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2221      	movs	r2, #33	; 0x21
 80058b2:	4252      	negs	r2, r2
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f000 f905 	bl	8005ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	fffffeff 	.word	0xfffffeff

080058cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b002      	add	sp, #8
 800590a:	bd80      	pop	{r7, pc}

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2f      	ldr	r2, [pc, #188]	; (80059dc <TIM_Base_SetConfig+0xd0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0x20>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <TIM_Base_SetConfig+0xd4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2270      	movs	r2, #112	; 0x70
 8005930:	4393      	bics	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a26      	ldr	r2, [pc, #152]	; (80059dc <TIM_Base_SetConfig+0xd0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <TIM_Base_SetConfig+0xd4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a24      	ldr	r2, [pc, #144]	; (80059e4 <TIM_Base_SetConfig+0xd8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a23      	ldr	r2, [pc, #140]	; (80059e8 <TIM_Base_SetConfig+0xdc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a22      	ldr	r2, [pc, #136]	; (80059ec <TIM_Base_SetConfig+0xe0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <TIM_Base_SetConfig+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <TIM_Base_SetConfig+0xe8>)
 8005972:	4013      	ands	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	4393      	bics	r3, r2
 8005986:	001a      	movs	r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <TIM_Base_SetConfig+0xd0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_Base_SetConfig+0xba>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <TIM_Base_SetConfig+0xdc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_Base_SetConfig+0xba>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <TIM_Base_SetConfig+0xe0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_Base_SetConfig+0xba>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a0b      	ldr	r2, [pc, #44]	; (80059f0 <TIM_Base_SetConfig+0xe4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d103      	bne.n	80059ce <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	615a      	str	r2, [r3, #20]
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b004      	add	sp, #16
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40002000 	.word	0x40002000
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800
 80059f4:	fffffcff 	.word	0xfffffcff

080059f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	223c      	movs	r2, #60	; 0x3c
 8005a06:	5c9b      	ldrb	r3, [r3, r2]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d101      	bne.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e04f      	b.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	223c      	movs	r2, #60	; 0x3c
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	223d      	movs	r2, #61	; 0x3d
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d108      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2270      	movs	r2, #112	; 0x70
 8005a50:	4393      	bics	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a12      	ldr	r2, [pc, #72]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a11      	ldr	r2, [pc, #68]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10c      	bne.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	4393      	bics	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223d      	movs	r2, #61	; 0x3d
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	223c      	movs	r2, #60	; 0x3c
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b004      	add	sp, #16
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	ff0fffff 	.word	0xff0fffff
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40014000 	.word	0x40014000

08005ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e046      	b.n	8005b98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2284      	movs	r2, #132	; 0x84
 8005b0e:	589b      	ldr	r3, [r3, r2]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7fd fc5e 	bl	80033e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2284      	movs	r2, #132	; 0x84
 8005b28:	2124      	movs	r1, #36	; 0x24
 8005b2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2101      	movs	r1, #1
 8005b38:	438a      	bics	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 fb30 	bl	80061a4 <UART_SetConfig>
 8005b44:	0003      	movs	r3, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e024      	b.n	8005b98 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 fccd 	bl	80064f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	490d      	ldr	r1, [pc, #52]	; (8005ba0 <HAL_UART_Init+0xa8>)
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	212a      	movs	r1, #42	; 0x2a
 8005b7a:	438a      	bics	r2, r1
 8005b7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f000 fd65 	bl	8006660 <UART_CheckIdleState>
 8005b96:	0003      	movs	r3, r0
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b002      	add	sp, #8
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	ffffb7ff 	.word	0xffffb7ff

08005ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	; 0x28
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	1dbb      	adds	r3, r7, #6
 8005bb2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2284      	movs	r2, #132	; 0x84
 8005bb8:	589b      	ldr	r3, [r3, r2]
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d000      	beq.n	8005bc0 <HAL_UART_Transmit+0x1c>
 8005bbe:	e097      	b.n	8005cf0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_UART_Transmit+0x2a>
 8005bc6:	1dbb      	adds	r3, r7, #6
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e08f      	b.n	8005cf2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	015b      	lsls	r3, r3, #5
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d109      	bne.n	8005bf2 <HAL_UART_Transmit+0x4e>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2201      	movs	r2, #1
 8005bea:	4013      	ands	r3, r2
 8005bec:	d001      	beq.n	8005bf2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e07f      	b.n	8005cf2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	5c9b      	ldrb	r3, [r3, r2]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_UART_Transmit+0x5c>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e078      	b.n	8005cf2 <HAL_UART_Transmit+0x14e>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	2101      	movs	r1, #1
 8005c06:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	228c      	movs	r2, #140	; 0x8c
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2284      	movs	r2, #132	; 0x84
 8005c14:	2121      	movs	r1, #33	; 0x21
 8005c16:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c18:	f7fd fe52 	bl	80038c0 <HAL_GetTick>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1dba      	adds	r2, r7, #6
 8005c24:	2154      	movs	r1, #84	; 0x54
 8005c26:	8812      	ldrh	r2, [r2, #0]
 8005c28:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1dba      	adds	r2, r7, #6
 8005c2e:	2156      	movs	r1, #86	; 0x56
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	015b      	lsls	r3, r3, #5
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d108      	bne.n	8005c52 <HAL_UART_Transmit+0xae>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	e003      	b.n	8005c5a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	2100      	movs	r1, #0
 8005c60:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005c62:	e02c      	b.n	8005cbe <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	0013      	movs	r3, r2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2180      	movs	r1, #128	; 0x80
 8005c72:	f000 fd3f 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 8005c76:	1e03      	subs	r3, r0, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e039      	b.n	8005cf2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	001a      	movs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	05d2      	lsls	r2, r2, #23
 8005c90:	0dd2      	lsrs	r2, r2, #23
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	3302      	adds	r3, #2
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e007      	b.n	8005cac <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	781a      	ldrb	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2256      	movs	r2, #86	; 0x56
 8005cb0:	5a9b      	ldrh	r3, [r3, r2]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2256      	movs	r2, #86	; 0x56
 8005cbc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2256      	movs	r2, #86	; 0x56
 8005cc2:	5a9b      	ldrh	r3, [r3, r2]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1cc      	bne.n	8005c64 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	0013      	movs	r3, r2
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2140      	movs	r1, #64	; 0x40
 8005cd8:	f000 fd0c 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e006      	b.n	8005cf2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2284      	movs	r2, #132	; 0x84
 8005ce8:	2120      	movs	r1, #32
 8005cea:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b008      	add	sp, #32
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4abb      	ldr	r2, [pc, #748]	; (800600c <HAL_UART_IRQHandler+0x310>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d117      	bne.n	8005d5a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2220      	movs	r2, #32
 8005d36:	4013      	ands	r3, r2
 8005d38:	d104      	bne.n	8005d44 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	055b      	lsls	r3, r3, #21
 8005d40:	4013      	ands	r3, r2
 8005d42:	d00a      	beq.n	8005d5a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d100      	bne.n	8005d4e <HAL_UART_IRQHandler+0x52>
 8005d4c:	e1fd      	b.n	800614a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	0010      	movs	r0, r2
 8005d56:	4798      	blx	r3
      }
      return;
 8005d58:	e1f7      	b.n	800614a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d100      	bne.n	8005d62 <HAL_UART_IRQHandler+0x66>
 8005d60:	e0de      	b.n	8005f20 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4aaa      	ldr	r2, [pc, #680]	; (8006010 <HAL_UART_IRQHandler+0x314>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	d104      	bne.n	8005d74 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	4aa9      	ldr	r2, [pc, #676]	; (8006014 <HAL_UART_IRQHandler+0x318>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d100      	bne.n	8005d74 <HAL_UART_IRQHandler+0x78>
 8005d72:	e0d5      	b.n	8005f20 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2201      	movs	r2, #1
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d010      	beq.n	8005d9e <HAL_UART_IRQHandler+0xa2>
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	2380      	movs	r3, #128	; 0x80
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4013      	ands	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	228c      	movs	r2, #140	; 0x8c
 8005d92:	589b      	ldr	r3, [r3, r2]
 8005d94:	2201      	movs	r2, #1
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	218c      	movs	r1, #140	; 0x8c
 8005d9c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2202      	movs	r2, #2
 8005da2:	4013      	ands	r3, r2
 8005da4:	d00f      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xca>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2201      	movs	r2, #1
 8005daa:	4013      	ands	r3, r2
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2202      	movs	r2, #2
 8005db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	228c      	movs	r2, #140	; 0x8c
 8005dba:	589b      	ldr	r3, [r3, r2]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	218c      	movs	r1, #140	; 0x8c
 8005dc4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <HAL_UART_IRQHandler+0xf2>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	228c      	movs	r2, #140	; 0x8c
 8005de2:	589b      	ldr	r3, [r3, r2]
 8005de4:	2202      	movs	r2, #2
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	218c      	movs	r1, #140	; 0x8c
 8005dec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2208      	movs	r2, #8
 8005df2:	4013      	ands	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d103      	bne.n	8005e06 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4a83      	ldr	r2, [pc, #524]	; (8006010 <HAL_UART_IRQHandler+0x314>)
 8005e02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e04:	d00b      	beq.n	8005e1e <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	228c      	movs	r2, #140	; 0x8c
 8005e12:	589b      	ldr	r3, [r3, r2]
 8005e14:	2208      	movs	r2, #8
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	218c      	movs	r1, #140	; 0x8c
 8005e1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	4013      	ands	r3, r2
 8005e26:	d011      	beq.n	8005e4c <HAL_UART_IRQHandler+0x150>
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	2380      	movs	r3, #128	; 0x80
 8005e2c:	04db      	lsls	r3, r3, #19
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d00c      	beq.n	8005e4c <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	0112      	lsls	r2, r2, #4
 8005e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	228c      	movs	r2, #140	; 0x8c
 8005e40:	589b      	ldr	r3, [r3, r2]
 8005e42:	2220      	movs	r2, #32
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	218c      	movs	r1, #140	; 0x8c
 8005e4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	228c      	movs	r2, #140	; 0x8c
 8005e50:	589b      	ldr	r3, [r3, r2]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d100      	bne.n	8005e58 <HAL_UART_IRQHandler+0x15c>
 8005e56:	e17a      	b.n	800614e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d011      	beq.n	8005e84 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2220      	movs	r2, #32
 8005e64:	4013      	ands	r3, r2
 8005e66:	d104      	bne.n	8005e72 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	055b      	lsls	r3, r3, #21
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d008      	beq.n	8005e84 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d004      	beq.n	8005e84 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	0010      	movs	r0, r2
 8005e82:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	228c      	movs	r2, #140	; 0x8c
 8005e88:	589b      	ldr	r3, [r3, r2]
 8005e8a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d003      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2228      	movs	r2, #40	; 0x28
 8005e9e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea0:	d033      	beq.n	8005f0a <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f000 fca7 	bl	80067f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2240      	movs	r2, #64	; 0x40
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d123      	bne.n	8005f00 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2140      	movs	r1, #64	; 0x40
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d012      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed4:	4a50      	ldr	r2, [pc, #320]	; (8006018 <HAL_UART_IRQHandler+0x31c>)
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005edc:	0018      	movs	r0, r3
 8005ede:	f7fe fae9 	bl	80044b4 <HAL_DMA_Abort_IT>
 8005ee2:	1e03      	subs	r3, r0, #0
 8005ee4:	d01a      	beq.n	8005f1c <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e012      	b.n	8005f1c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f000 f93f 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005efe:	e00d      	b.n	8005f1c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 f93a 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	e008      	b.n	8005f1c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 f935 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	228c      	movs	r2, #140	; 0x8c
 8005f16:	2100      	movs	r1, #0
 8005f18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005f1a:	e118      	b.n	800614e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	46c0      	nop			; (mov r8, r8)
    return;
 8005f1e:	e116      	b.n	800614e <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d000      	beq.n	8005f2a <HAL_UART_IRQHandler+0x22e>
 8005f28:	e0bb      	b.n	80060a2 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d100      	bne.n	8005f34 <HAL_UART_IRQHandler+0x238>
 8005f32:	e0b6      	b.n	80060a2 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2210      	movs	r2, #16
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d100      	bne.n	8005f3e <HAL_UART_IRQHandler+0x242>
 8005f3c:	e0b1      	b.n	80060a2 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2210      	movs	r2, #16
 8005f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2240      	movs	r2, #64	; 0x40
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d165      	bne.n	8006020 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	2108      	movs	r1, #8
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8005f62:	187b      	adds	r3, r7, r1
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d100      	bne.n	8005f6c <HAL_UART_IRQHandler+0x270>
 8005f6a:	e0f2      	b.n	8006152 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	225c      	movs	r2, #92	; 0x5c
 8005f70:	5a9b      	ldrh	r3, [r3, r2]
 8005f72:	187a      	adds	r2, r7, r1
 8005f74:	8812      	ldrh	r2, [r2, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d300      	bcc.n	8005f7c <HAL_UART_IRQHandler+0x280>
 8005f7a:	e0ea      	b.n	8006152 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	187a      	adds	r2, r7, r1
 8005f80:	215e      	movs	r1, #94	; 0x5e
 8005f82:	8812      	ldrh	r2, [r2, #0]
 8005f84:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	4013      	ands	r3, r2
 8005f92:	d12b      	bne.n	8005fec <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	491f      	ldr	r1, [pc, #124]	; (800601c <HAL_UART_IRQHandler+0x320>)
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2101      	movs	r1, #1
 8005fb0:	438a      	bics	r2, r1
 8005fb2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2140      	movs	r1, #64	; 0x40
 8005fc0:	438a      	bics	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2288      	movs	r2, #136	; 0x88
 8005fc8:	2120      	movs	r1, #32
 8005fca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2110      	movs	r1, #16
 8005fde:	438a      	bics	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7fe fa02 	bl	80043f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	225c      	movs	r2, #92	; 0x5c
 8005ff0:	5a9a      	ldrh	r2, [r3, r2]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	215e      	movs	r1, #94	; 0x5e
 8005ff6:	5a5b      	ldrh	r3, [r3, r1]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0011      	movs	r1, r2
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f8c2 	bl	800618c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006008:	e0a3      	b.n	8006152 <HAL_UART_IRQHandler+0x456>
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	0000080f 	.word	0x0000080f
 8006010:	10000001 	.word	0x10000001
 8006014:	04000120 	.word	0x04000120
 8006018:	0800685d 	.word	0x0800685d
 800601c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	225c      	movs	r2, #92	; 0x5c
 8006024:	5a99      	ldrh	r1, [r3, r2]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	225e      	movs	r2, #94	; 0x5e
 800602a:	5a9b      	ldrh	r3, [r3, r2]
 800602c:	b29a      	uxth	r2, r3
 800602e:	200a      	movs	r0, #10
 8006030:	183b      	adds	r3, r7, r0
 8006032:	1a8a      	subs	r2, r1, r2
 8006034:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	225e      	movs	r2, #94	; 0x5e
 800603a:	5a9b      	ldrh	r3, [r3, r2]
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d100      	bne.n	8006044 <HAL_UART_IRQHandler+0x348>
 8006042:	e088      	b.n	8006156 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006044:	183b      	adds	r3, r7, r0
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d100      	bne.n	800604e <HAL_UART_IRQHandler+0x352>
 800604c:	e083      	b.n	8006156 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4942      	ldr	r1, [pc, #264]	; (8006164 <HAL_UART_IRQHandler+0x468>)
 800605a:	400a      	ands	r2, r1
 800605c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	493f      	ldr	r1, [pc, #252]	; (8006168 <HAL_UART_IRQHandler+0x46c>)
 800606a:	400a      	ands	r2, r1
 800606c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2288      	movs	r2, #136	; 0x88
 8006072:	2120      	movs	r1, #32
 8006074:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2110      	movs	r1, #16
 800608e:	438a      	bics	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006092:	183b      	adds	r3, r7, r0
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0011      	movs	r1, r2
 800609a:	0018      	movs	r0, r3
 800609c:	f000 f876 	bl	800618c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060a0:	e059      	b.n	8006156 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	035b      	lsls	r3, r3, #13
 80060a8:	4013      	ands	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_UART_IRQHandler+0x3ce>
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	03db      	lsls	r3, r3, #15
 80060b2:	4013      	ands	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	0352      	lsls	r2, r2, #13
 80060be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0018      	movs	r0, r3
 80060c4:	f000 fbfc 	bl	80068c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c8:	e048      	b.n	800615c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	4013      	ands	r3, r2
 80060d0:	d012      	beq.n	80060f8 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	4013      	ands	r3, r2
 80060d8:	d104      	bne.n	80060e4 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	4013      	ands	r3, r2
 80060e2:	d009      	beq.n	80060f8 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d036      	beq.n	800615a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	0010      	movs	r0, r2
 80060f4:	4798      	blx	r3
    }
    return;
 80060f6:	e030      	b.n	800615a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	4013      	ands	r3, r2
 80060fe:	d008      	beq.n	8006112 <HAL_UART_IRQHandler+0x416>
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	4013      	ands	r3, r2
 8006106:	d004      	beq.n	8006112 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	0018      	movs	r0, r3
 800610c:	f000 fbbd 	bl	800688a <UART_EndTransmit_IT>
    return;
 8006110:	e024      	b.n	800615c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	041b      	lsls	r3, r3, #16
 8006118:	4013      	ands	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_UART_IRQHandler+0x434>
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	05db      	lsls	r3, r3, #23
 8006122:	4013      	ands	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f000 fbd9 	bl	80068e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800612e:	e015      	b.n	800615c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	045b      	lsls	r3, r3, #17
 8006136:	4013      	ands	r3, r2
 8006138:	d010      	beq.n	800615c <HAL_UART_IRQHandler+0x460>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da0d      	bge.n	800615c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	0018      	movs	r0, r3
 8006144:	f000 fbc4 	bl	80068d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006148:	e008      	b.n	800615c <HAL_UART_IRQHandler+0x460>
      return;
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	e006      	b.n	800615c <HAL_UART_IRQHandler+0x460>
    return;
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	e004      	b.n	800615c <HAL_UART_IRQHandler+0x460>
      return;
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	e002      	b.n	800615c <HAL_UART_IRQHandler+0x460>
      return;
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	e000      	b.n	800615c <HAL_UART_IRQHandler+0x460>
    return;
 800615a:	46c0      	nop			; (mov r8, r8)
  }
}
 800615c:	46bd      	mov	sp, r7
 800615e:	b008      	add	sp, #32
 8006160:	bd80      	pop	{r7, pc}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	fffffedf 	.word	0xfffffedf
 8006168:	effffffe 	.word	0xeffffffe

0800616c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006174:	46c0      	nop			; (mov r8, r8)
 8006176:	46bd      	mov	sp, r7
 8006178:	b002      	add	sp, #8
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b002      	add	sp, #8
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	000a      	movs	r2, r1
 8006196:	1cbb      	adds	r3, r7, #2
 8006198:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	46bd      	mov	sp, r7
 800619e:	b002      	add	sp, #8
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061ac:	231a      	movs	r3, #26
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4abc      	ldr	r2, [pc, #752]	; (80064d0 <UART_SetConfig+0x32c>)
 80061de:	4013      	ands	r3, r2
 80061e0:	0019      	movs	r1, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4ab8      	ldr	r2, [pc, #736]	; (80064d4 <UART_SetConfig+0x330>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	0019      	movs	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	4313      	orrs	r3, r2
 8006212:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	4aaf      	ldr	r2, [pc, #700]	; (80064d8 <UART_SetConfig+0x334>)
 800621c:	4013      	ands	r3, r2
 800621e:	0019      	movs	r1, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	220f      	movs	r2, #15
 8006232:	4393      	bics	r3, r2
 8006234:	0019      	movs	r1, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4aa5      	ldr	r2, [pc, #660]	; (80064dc <UART_SetConfig+0x338>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d127      	bne.n	800629c <UART_SetConfig+0xf8>
 800624c:	4ba4      	ldr	r3, [pc, #656]	; (80064e0 <UART_SetConfig+0x33c>)
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	2203      	movs	r2, #3
 8006252:	4013      	ands	r3, r2
 8006254:	2b03      	cmp	r3, #3
 8006256:	d017      	beq.n	8006288 <UART_SetConfig+0xe4>
 8006258:	d81b      	bhi.n	8006292 <UART_SetConfig+0xee>
 800625a:	2b02      	cmp	r3, #2
 800625c:	d00a      	beq.n	8006274 <UART_SetConfig+0xd0>
 800625e:	d818      	bhi.n	8006292 <UART_SetConfig+0xee>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <UART_SetConfig+0xc6>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00a      	beq.n	800627e <UART_SetConfig+0xda>
 8006268:	e013      	b.n	8006292 <UART_SetConfig+0xee>
 800626a:	231b      	movs	r3, #27
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e058      	b.n	8006326 <UART_SetConfig+0x182>
 8006274:	231b      	movs	r3, #27
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	2202      	movs	r2, #2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e053      	b.n	8006326 <UART_SetConfig+0x182>
 800627e:	231b      	movs	r3, #27
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	2204      	movs	r2, #4
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e04e      	b.n	8006326 <UART_SetConfig+0x182>
 8006288:	231b      	movs	r3, #27
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	2208      	movs	r2, #8
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e049      	b.n	8006326 <UART_SetConfig+0x182>
 8006292:	231b      	movs	r3, #27
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	2210      	movs	r2, #16
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e044      	b.n	8006326 <UART_SetConfig+0x182>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a90      	ldr	r2, [pc, #576]	; (80064e4 <UART_SetConfig+0x340>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d127      	bne.n	80062f6 <UART_SetConfig+0x152>
 80062a6:	4b8e      	ldr	r3, [pc, #568]	; (80064e0 <UART_SetConfig+0x33c>)
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	220c      	movs	r2, #12
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d017      	beq.n	80062e2 <UART_SetConfig+0x13e>
 80062b2:	d81b      	bhi.n	80062ec <UART_SetConfig+0x148>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d00a      	beq.n	80062ce <UART_SetConfig+0x12a>
 80062b8:	d818      	bhi.n	80062ec <UART_SetConfig+0x148>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x120>
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d00a      	beq.n	80062d8 <UART_SetConfig+0x134>
 80062c2:	e013      	b.n	80062ec <UART_SetConfig+0x148>
 80062c4:	231b      	movs	r3, #27
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e02b      	b.n	8006326 <UART_SetConfig+0x182>
 80062ce:	231b      	movs	r3, #27
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	2202      	movs	r2, #2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e026      	b.n	8006326 <UART_SetConfig+0x182>
 80062d8:	231b      	movs	r3, #27
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	2204      	movs	r2, #4
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e021      	b.n	8006326 <UART_SetConfig+0x182>
 80062e2:	231b      	movs	r3, #27
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	2208      	movs	r2, #8
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e01c      	b.n	8006326 <UART_SetConfig+0x182>
 80062ec:	231b      	movs	r3, #27
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	2210      	movs	r2, #16
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e017      	b.n	8006326 <UART_SetConfig+0x182>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a7b      	ldr	r2, [pc, #492]	; (80064e8 <UART_SetConfig+0x344>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d104      	bne.n	800630a <UART_SetConfig+0x166>
 8006300:	231b      	movs	r3, #27
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e00d      	b.n	8006326 <UART_SetConfig+0x182>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a77      	ldr	r2, [pc, #476]	; (80064ec <UART_SetConfig+0x348>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d104      	bne.n	800631e <UART_SetConfig+0x17a>
 8006314:	231b      	movs	r3, #27
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	e003      	b.n	8006326 <UART_SetConfig+0x182>
 800631e:	231b      	movs	r3, #27
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	2210      	movs	r2, #16
 8006324:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69da      	ldr	r2, [r3, #28]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	429a      	cmp	r2, r3
 8006330:	d000      	beq.n	8006334 <UART_SetConfig+0x190>
 8006332:	e066      	b.n	8006402 <UART_SetConfig+0x25e>
  {
    switch (clocksource)
 8006334:	231b      	movs	r3, #27
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b08      	cmp	r3, #8
 800633c:	d015      	beq.n	800636a <UART_SetConfig+0x1c6>
 800633e:	dc18      	bgt.n	8006372 <UART_SetConfig+0x1ce>
 8006340:	2b04      	cmp	r3, #4
 8006342:	d00d      	beq.n	8006360 <UART_SetConfig+0x1bc>
 8006344:	dc15      	bgt.n	8006372 <UART_SetConfig+0x1ce>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <UART_SetConfig+0x1ac>
 800634a:	2b02      	cmp	r3, #2
 800634c:	d005      	beq.n	800635a <UART_SetConfig+0x1b6>
 800634e:	e010      	b.n	8006372 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fe ff92 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 8006354:	0003      	movs	r3, r0
 8006356:	617b      	str	r3, [r7, #20]
        break;
 8006358:	e012      	b.n	8006380 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800635a:	4b65      	ldr	r3, [pc, #404]	; (80064f0 <UART_SetConfig+0x34c>)
 800635c:	617b      	str	r3, [r7, #20]
        break;
 800635e:	e00f      	b.n	8006380 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006360:	f7fe fefe 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8006364:	0003      	movs	r3, r0
 8006366:	617b      	str	r3, [r7, #20]
        break;
 8006368:	e00a      	b.n	8006380 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636a:	2380      	movs	r3, #128	; 0x80
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	617b      	str	r3, [r7, #20]
        break;
 8006370:	e006      	b.n	8006380 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006376:	231a      	movs	r3, #26
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
        break;
 800637e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d100      	bne.n	8006388 <UART_SetConfig+0x1e4>
 8006386:	e08e      	b.n	80064a6 <UART_SetConfig+0x302>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638c:	4b59      	ldr	r3, [pc, #356]	; (80064f4 <UART_SetConfig+0x350>)
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	5ad3      	ldrh	r3, [r2, r3]
 8006392:	0019      	movs	r1, r3
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7f9 fec1 	bl	800011c <__udivsi3>
 800639a:	0003      	movs	r3, r0
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	18d2      	adds	r2, r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	0019      	movs	r1, r3
 80063ac:	0010      	movs	r0, r2
 80063ae:	f7f9 feb5 	bl	800011c <__udivsi3>
 80063b2:	0003      	movs	r3, r0
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d91c      	bls.n	80063f8 <UART_SetConfig+0x254>
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	025b      	lsls	r3, r3, #9
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d217      	bcs.n	80063f8 <UART_SetConfig+0x254>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	200e      	movs	r0, #14
 80063ce:	183b      	adds	r3, r7, r0
 80063d0:	210f      	movs	r1, #15
 80063d2:	438a      	bics	r2, r1
 80063d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2207      	movs	r2, #7
 80063de:	4013      	ands	r3, r2
 80063e0:	b299      	uxth	r1, r3
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	183a      	adds	r2, r7, r0
 80063e6:	8812      	ldrh	r2, [r2, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	183a      	adds	r2, r7, r0
 80063f2:	8812      	ldrh	r2, [r2, #0]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	e056      	b.n	80064a6 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 80063f8:	231a      	movs	r3, #26
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e051      	b.n	80064a6 <UART_SetConfig+0x302>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006402:	231b      	movs	r3, #27
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d015      	beq.n	8006438 <UART_SetConfig+0x294>
 800640c:	dc18      	bgt.n	8006440 <UART_SetConfig+0x29c>
 800640e:	2b04      	cmp	r3, #4
 8006410:	d00d      	beq.n	800642e <UART_SetConfig+0x28a>
 8006412:	dc15      	bgt.n	8006440 <UART_SetConfig+0x29c>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <UART_SetConfig+0x27a>
 8006418:	2b02      	cmp	r3, #2
 800641a:	d005      	beq.n	8006428 <UART_SetConfig+0x284>
 800641c:	e010      	b.n	8006440 <UART_SetConfig+0x29c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641e:	f7fe ff2b 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 8006422:	0003      	movs	r3, r0
 8006424:	617b      	str	r3, [r7, #20]
        break;
 8006426:	e012      	b.n	800644e <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <UART_SetConfig+0x34c>)
 800642a:	617b      	str	r3, [r7, #20]
        break;
 800642c:	e00f      	b.n	800644e <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fe fe97 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8006432:	0003      	movs	r3, r0
 8006434:	617b      	str	r3, [r7, #20]
        break;
 8006436:	e00a      	b.n	800644e <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	617b      	str	r3, [r7, #20]
        break;
 800643e:	e006      	b.n	800644e <UART_SetConfig+0x2aa>
      default:
        pclk = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006444:	231a      	movs	r3, #26
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
        break;
 800644c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d028      	beq.n	80064a6 <UART_SetConfig+0x302>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006458:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <UART_SetConfig+0x350>)
 800645a:	0052      	lsls	r2, r2, #1
 800645c:	5ad3      	ldrh	r3, [r2, r3]
 800645e:	0019      	movs	r1, r3
 8006460:	6978      	ldr	r0, [r7, #20]
 8006462:	f7f9 fe5b 	bl	800011c <__udivsi3>
 8006466:	0003      	movs	r3, r0
 8006468:	001a      	movs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	18d2      	adds	r2, r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	0019      	movs	r1, r3
 8006478:	0010      	movs	r0, r2
 800647a:	f7f9 fe4f 	bl	800011c <__udivsi3>
 800647e:	0003      	movs	r3, r0
 8006480:	b29b      	uxth	r3, r3
 8006482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d909      	bls.n	800649e <UART_SetConfig+0x2fa>
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	2380      	movs	r3, #128	; 0x80
 800648e:	025b      	lsls	r3, r3, #9
 8006490:	429a      	cmp	r2, r3
 8006492:	d204      	bcs.n	800649e <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = usartdiv;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e003      	b.n	80064a6 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 800649e:	231a      	movs	r3, #26
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	226a      	movs	r2, #106	; 0x6a
 80064aa:	2101      	movs	r1, #1
 80064ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2268      	movs	r2, #104	; 0x68
 80064b2:	2101      	movs	r1, #1
 80064b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064c2:	231a      	movs	r3, #26
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	781b      	ldrb	r3, [r3, #0]
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b008      	add	sp, #32
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	cfff69f3 	.word	0xcfff69f3
 80064d4:	ffffcfff 	.word	0xffffcfff
 80064d8:	11fff4ff 	.word	0x11fff4ff
 80064dc:	40013800 	.word	0x40013800
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40004800 	.word	0x40004800
 80064ec:	40004c00 	.word	0x40004c00
 80064f0:	00f42400 	.word	0x00f42400
 80064f4:	0800a260 	.word	0x0800a260

080064f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	2201      	movs	r2, #1
 8006506:	4013      	ands	r3, r2
 8006508:	d00b      	beq.n	8006522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a4a      	ldr	r2, [pc, #296]	; (800663c <UART_AdvFeatureConfig+0x144>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	2202      	movs	r2, #2
 8006528:	4013      	ands	r3, r2
 800652a:	d00b      	beq.n	8006544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a43      	ldr	r2, [pc, #268]	; (8006640 <UART_AdvFeatureConfig+0x148>)
 8006534:	4013      	ands	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	2204      	movs	r2, #4
 800654a:	4013      	ands	r3, r2
 800654c:	d00b      	beq.n	8006566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a3b      	ldr	r2, [pc, #236]	; (8006644 <UART_AdvFeatureConfig+0x14c>)
 8006556:	4013      	ands	r3, r2
 8006558:	0019      	movs	r1, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	2208      	movs	r2, #8
 800656c:	4013      	ands	r3, r2
 800656e:	d00b      	beq.n	8006588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <UART_AdvFeatureConfig+0x150>)
 8006578:	4013      	ands	r3, r2
 800657a:	0019      	movs	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	2210      	movs	r2, #16
 800658e:	4013      	ands	r3, r2
 8006590:	d00b      	beq.n	80065aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <UART_AdvFeatureConfig+0x154>)
 800659a:	4013      	ands	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	2220      	movs	r2, #32
 80065b0:	4013      	ands	r3, r2
 80065b2:	d00b      	beq.n	80065cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	4a25      	ldr	r2, [pc, #148]	; (8006650 <UART_AdvFeatureConfig+0x158>)
 80065bc:	4013      	ands	r3, r2
 80065be:	0019      	movs	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	2240      	movs	r2, #64	; 0x40
 80065d2:	4013      	ands	r3, r2
 80065d4:	d01d      	beq.n	8006612 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <UART_AdvFeatureConfig+0x15c>)
 80065de:	4013      	ands	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	035b      	lsls	r3, r3, #13
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d10b      	bne.n	8006612 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	; (8006658 <UART_AdvFeatureConfig+0x160>)
 8006602:	4013      	ands	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	4013      	ands	r3, r2
 800661a:	d00b      	beq.n	8006634 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4a0e      	ldr	r2, [pc, #56]	; (800665c <UART_AdvFeatureConfig+0x164>)
 8006624:	4013      	ands	r3, r2
 8006626:	0019      	movs	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b002      	add	sp, #8
 800663a:	bd80      	pop	{r7, pc}
 800663c:	fffdffff 	.word	0xfffdffff
 8006640:	fffeffff 	.word	0xfffeffff
 8006644:	fffbffff 	.word	0xfffbffff
 8006648:	ffff7fff 	.word	0xffff7fff
 800664c:	ffffefff 	.word	0xffffefff
 8006650:	ffffdfff 	.word	0xffffdfff
 8006654:	ffefffff 	.word	0xffefffff
 8006658:	ff9fffff 	.word	0xff9fffff
 800665c:	fff7ffff 	.word	0xfff7ffff

08006660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af02      	add	r7, sp, #8
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	228c      	movs	r2, #140	; 0x8c
 800666c:	2100      	movs	r1, #0
 800666e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006670:	f7fd f926 	bl	80038c0 <HAL_GetTick>
 8006674:	0003      	movs	r3, r0
 8006676:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2208      	movs	r2, #8
 8006680:	4013      	ands	r3, r2
 8006682:	2b08      	cmp	r3, #8
 8006684:	d10c      	bne.n	80066a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	0391      	lsls	r1, r2, #14
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <UART_CheckIdleState+0x90>)
 8006690:	9200      	str	r2, [sp, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	f000 f82e 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d001      	beq.n	80066a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e023      	b.n	80066e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2204      	movs	r2, #4
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d10c      	bne.n	80066c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2280      	movs	r2, #128	; 0x80
 80066b2:	03d1      	lsls	r1, r2, #15
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <UART_CheckIdleState+0x90>)
 80066b8:	9200      	str	r2, [sp, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f000 f81a 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d001      	beq.n	80066c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e00f      	b.n	80066e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2284      	movs	r2, #132	; 0x84
 80066cc:	2120      	movs	r1, #32
 80066ce:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2288      	movs	r2, #136	; 0x88
 80066d4:	2120      	movs	r1, #32
 80066d6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2280      	movs	r2, #128	; 0x80
 80066e2:	2100      	movs	r1, #0
 80066e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b004      	add	sp, #16
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	01ffffff 	.word	0x01ffffff

080066f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	1dfb      	adds	r3, r7, #7
 8006702:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	e062      	b.n	80067cc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	3301      	adds	r3, #1
 800670a:	d05f      	beq.n	80067cc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fd f8d8 	bl	80038c0 <HAL_GetTick>
 8006710:	0002      	movs	r2, r0
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <UART_WaitOnFlagUntilTimeout+0x2e>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11d      	bne.n	800675e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4931      	ldr	r1, [pc, #196]	; (80067f4 <UART_WaitOnFlagUntilTimeout+0x100>)
 800672e:	400a      	ands	r2, r1
 8006730:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2101      	movs	r1, #1
 800673e:	438a      	bics	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2284      	movs	r2, #132	; 0x84
 8006746:	2120      	movs	r1, #32
 8006748:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2288      	movs	r2, #136	; 0x88
 800674e:	2120      	movs	r1, #32
 8006750:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2280      	movs	r2, #128	; 0x80
 8006756:	2100      	movs	r1, #0
 8006758:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e046      	b.n	80067ec <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2204      	movs	r2, #4
 8006766:	4013      	ands	r3, r2
 8006768:	d030      	beq.n	80067cc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	401a      	ands	r2, r3
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	429a      	cmp	r2, r3
 800677c:	d126      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	0112      	lsls	r2, r2, #4
 8006786:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4918      	ldr	r1, [pc, #96]	; (80067f4 <UART_WaitOnFlagUntilTimeout+0x100>)
 8006794:	400a      	ands	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2101      	movs	r1, #1
 80067a4:	438a      	bics	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2284      	movs	r2, #132	; 0x84
 80067ac:	2120      	movs	r1, #32
 80067ae:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2288      	movs	r2, #136	; 0x88
 80067b4:	2120      	movs	r1, #32
 80067b6:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	228c      	movs	r2, #140	; 0x8c
 80067bc:	2120      	movs	r1, #32
 80067be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2280      	movs	r2, #128	; 0x80
 80067c4:	2100      	movs	r1, #0
 80067c6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e00f      	b.n	80067ec <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	4013      	ands	r3, r2
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	425a      	negs	r2, r3
 80067dc:	4153      	adcs	r3, r2
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	001a      	movs	r2, r3
 80067e2:	1dfb      	adds	r3, r7, #7
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d08d      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b004      	add	sp, #16
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	fffffe5f 	.word	0xfffffe5f

080067f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4912      	ldr	r1, [pc, #72]	; (8006854 <UART_EndRxTransfer+0x5c>)
 800680c:	400a      	ands	r2, r1
 800680e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	490f      	ldr	r1, [pc, #60]	; (8006858 <UART_EndRxTransfer+0x60>)
 800681c:	400a      	ands	r2, r1
 800681e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d107      	bne.n	8006838 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2110      	movs	r1, #16
 8006834:	438a      	bics	r2, r1
 8006836:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2288      	movs	r2, #136	; 0x88
 800683c:	2120      	movs	r1, #32
 800683e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800684c:	46c0      	nop			; (mov r8, r8)
 800684e:	46bd      	mov	sp, r7
 8006850:	b002      	add	sp, #8
 8006852:	bd80      	pop	{r7, pc}
 8006854:	fffffedf 	.word	0xfffffedf
 8006858:	effffffe 	.word	0xeffffffe

0800685c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	225e      	movs	r2, #94	; 0x5e
 800686e:	2100      	movs	r1, #0
 8006870:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2256      	movs	r2, #86	; 0x56
 8006876:	2100      	movs	r1, #0
 8006878:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	0018      	movs	r0, r3
 800687e:	f7ff fc7d 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	46bd      	mov	sp, r7
 8006886:	b004      	add	sp, #16
 8006888:	bd80      	pop	{r7, pc}

0800688a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2140      	movs	r1, #64	; 0x40
 800689e:	438a      	bics	r2, r1
 80068a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2284      	movs	r2, #132	; 0x84
 80068a6:	2120      	movs	r1, #32
 80068a8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7ff fc5a 	bl	800616c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068d8:	46c0      	nop			; (mov r8, r8)
 80068da:	46bd      	mov	sp, r7
 80068dc:	b002      	add	sp, #8
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068e8:	46c0      	nop			; (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b002      	add	sp, #8
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	5c9b      	ldrb	r3, [r3, r2]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_UARTEx_DisableFifoMode+0x16>
 8006902:	2302      	movs	r3, #2
 8006904:	e027      	b.n	8006956 <HAL_UARTEx_DisableFifoMode+0x66>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2280      	movs	r2, #128	; 0x80
 800690a:	2101      	movs	r1, #1
 800690c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2284      	movs	r2, #132	; 0x84
 8006912:	2124      	movs	r1, #36	; 0x24
 8006914:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2101      	movs	r1, #1
 800692a:	438a      	bics	r2, r1
 800692c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006932:	4013      	ands	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2284      	movs	r2, #132	; 0x84
 8006948:	2120      	movs	r1, #32
 800694a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2280      	movs	r2, #128	; 0x80
 8006950:	2100      	movs	r1, #0
 8006952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b004      	add	sp, #16
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	dfffffff 	.word	0xdfffffff

08006964 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2280      	movs	r2, #128	; 0x80
 8006972:	5c9b      	ldrb	r3, [r3, r2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e02e      	b.n	80069da <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2280      	movs	r2, #128	; 0x80
 8006980:	2101      	movs	r1, #1
 8006982:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2284      	movs	r2, #132	; 0x84
 8006988:	2124      	movs	r1, #36	; 0x24
 800698a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2101      	movs	r1, #1
 80069a0:	438a      	bics	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	08d9      	lsrs	r1, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0018      	movs	r0, r3
 80069bc:	f000 f854 	bl	8006a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2284      	movs	r2, #132	; 0x84
 80069cc:	2120      	movs	r1, #32
 80069ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2280      	movs	r2, #128	; 0x80
 80069d4:	2100      	movs	r1, #0
 80069d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b004      	add	sp, #16
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	5c9b      	ldrb	r3, [r3, r2]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e02f      	b.n	8006a5c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2280      	movs	r2, #128	; 0x80
 8006a00:	2101      	movs	r1, #1
 8006a02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2284      	movs	r2, #132	; 0x84
 8006a08:	2124      	movs	r1, #36	; 0x24
 8006a0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2101      	movs	r1, #1
 8006a20:	438a      	bics	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4a0e      	ldr	r2, [pc, #56]	; (8006a64 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	0019      	movs	r1, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 f813 	bl	8006a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2284      	movs	r2, #132	; 0x84
 8006a4e:	2120      	movs	r1, #32
 8006a50:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2280      	movs	r2, #128	; 0x80
 8006a56:	2100      	movs	r1, #0
 8006a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b004      	add	sp, #16
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	f1ffffff 	.word	0xf1ffffff

08006a68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a70:	2314      	movs	r3, #20
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	4a2f      	ldr	r2, [pc, #188]	; (8006b34 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a76:	ca03      	ldmia	r2!, {r0, r1}
 8006a78:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	4a2e      	ldr	r2, [pc, #184]	; (8006b38 <UARTEx_SetNbDataToProcess+0xd0>)
 8006a80:	ca03      	ldmia	r2!, {r0, r1}
 8006a82:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d108      	bne.n	8006a9e <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	226a      	movs	r2, #106	; 0x6a
 8006a90:	2101      	movs	r1, #1
 8006a92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2268      	movs	r2, #104	; 0x68
 8006a98:	2101      	movs	r1, #1
 8006a9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a9c:	e046      	b.n	8006b2c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a9e:	261f      	movs	r6, #31
 8006aa0:	19bb      	adds	r3, r7, r6
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aa6:	201e      	movs	r0, #30
 8006aa8:	183b      	adds	r3, r7, r0
 8006aaa:	2208      	movs	r2, #8
 8006aac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	0e5b      	lsrs	r3, r3, #25
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	241d      	movs	r4, #29
 8006aba:	193b      	adds	r3, r7, r4
 8006abc:	2107      	movs	r1, #7
 8006abe:	400a      	ands	r2, r1
 8006ac0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0f5b      	lsrs	r3, r3, #29
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	251c      	movs	r5, #28
 8006ace:	197b      	adds	r3, r7, r5
 8006ad0:	2107      	movs	r1, #7
 8006ad2:	400a      	ands	r2, r1
 8006ad4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ad6:	183b      	adds	r3, r7, r0
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	197a      	adds	r2, r7, r5
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	2114      	movs	r1, #20
 8006ae0:	1879      	adds	r1, r7, r1
 8006ae2:	5c8a      	ldrb	r2, [r1, r2]
 8006ae4:	435a      	muls	r2, r3
 8006ae6:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ae8:	197b      	adds	r3, r7, r5
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	250c      	movs	r5, #12
 8006aee:	197a      	adds	r2, r7, r5
 8006af0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af2:	0019      	movs	r1, r3
 8006af4:	f7f9 fb9c 	bl	8000230 <__divsi3>
 8006af8:	0003      	movs	r3, r0
 8006afa:	b299      	uxth	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	226a      	movs	r2, #106	; 0x6a
 8006b00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b02:	19bb      	adds	r3, r7, r6
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	193a      	adds	r2, r7, r4
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	2114      	movs	r1, #20
 8006b0c:	1879      	adds	r1, r7, r1
 8006b0e:	5c8a      	ldrb	r2, [r1, r2]
 8006b10:	435a      	muls	r2, r3
 8006b12:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b14:	193b      	adds	r3, r7, r4
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	197a      	adds	r2, r7, r5
 8006b1a:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	f7f9 fb87 	bl	8000230 <__divsi3>
 8006b22:	0003      	movs	r3, r0
 8006b24:	b299      	uxth	r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2268      	movs	r2, #104	; 0x68
 8006b2a:	5299      	strh	r1, [r3, r2]
}
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b009      	add	sp, #36	; 0x24
 8006b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b34:	0800a1d8 	.word	0x0800a1d8
 8006b38:	0800a1e0 	.word	0x0800a1e0

08006b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3308      	adds	r3, #8
 8006b48:	001a      	movs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	4252      	negs	r2, r2
 8006b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3308      	adds	r3, #8
 8006b64:	001a      	movs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	b002      	add	sp, #8
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	b004      	add	sp, #16
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	3301      	adds	r3, #1
 8006be6:	d103      	bne.n	8006bf0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e00c      	b.n	8006c0a <vListInsert+0x38>
			insertion position. */
		}

	#else

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e002      	b.n	8006bfe <vListInsert+0x2c>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d2f6      	bcs.n	8006bf8 <vListInsert+0x26>
			insertion position. */
		}
	#endif
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
}
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b004      	add	sp, #16
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6892      	ldr	r2, [r2, #8]
 8006c54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6852      	ldr	r2, [r2, #4]
 8006c5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d103      	bne.n	8006c72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
}
 8006c86:	0018      	movs	r0, r3
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	b004      	add	sp, #16
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueGenericReset+0x18>
 8006ca2:	b672      	cpsid	i
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006ca6:	f001 febb 	bl	8008a20 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	434b      	muls	r3, r1
 8006cb8:	18d2      	adds	r2, r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	1e59      	subs	r1, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	434b      	muls	r3, r1
 8006cdc:	18d2      	adds	r2, r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2244      	movs	r2, #68	; 0x44
 8006ce6:	21ff      	movs	r1, #255	; 0xff
 8006ce8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2245      	movs	r2, #69	; 0x45
 8006cee:	21ff      	movs	r1, #255	; 0xff
 8006cf0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d013      	beq.n	8006d28 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3310      	adds	r3, #16
 8006d04:	0018      	movs	r0, r3
 8006d06:	f001 f8e3 	bl	8007ed0 <xTaskRemoveFromEventList>
 8006d0a:	1e03      	subs	r3, r0, #0
 8006d0c:	d00c      	beq.n	8006d28 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d0e:	f001 fe77 	bl	8008a00 <vPortYield>
 8006d12:	e009      	b.n	8006d28 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3310      	adds	r3, #16
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7ff ff0f 	bl	8006b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3324      	adds	r3, #36	; 0x24
 8006d22:	0018      	movs	r0, r3
 8006d24:	f7ff ff0a 	bl	8006b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d28:	f001 fe8c 	bl	8008a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d2c:	2301      	movs	r3, #1
}
 8006d2e:	0018      	movs	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b004      	add	sp, #16
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d36:	b590      	push	{r4, r7, lr}
 8006d38:	b08b      	sub	sp, #44	; 0x2c
 8006d3a:	af02      	add	r7, sp, #8
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	1dfb      	adds	r3, r7, #7
 8006d42:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <xQueueGenericCreate+0x18>
 8006d4a:	b672      	cpsid	i
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	4353      	muls	r3, r2
 8006d54:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	3348      	adds	r3, #72	; 0x48
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f001 fefa 	bl	8008b54 <pvPortMalloc>
 8006d60:	0003      	movs	r3, r0
 8006d62:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	3348      	adds	r3, #72	; 0x48
 8006d72:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d74:	1dfb      	adds	r3, r7, #7
 8006d76:	781c      	ldrb	r4, [r3, #0]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	0023      	movs	r3, r4
 8006d84:	f000 f805 	bl	8006d92 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d88:	69bb      	ldr	r3, [r7, #24]
	}
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b009      	add	sp, #36	; 0x24
 8006d90:	bd90      	pop	{r4, r7, pc}

08006d92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	001a      	movs	r2, r3
 8006da0:	1cfb      	adds	r3, r7, #3
 8006da2:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e002      	b.n	8006db8 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f7ff ff60 	bl	8006c8e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	b004      	add	sp, #16
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08a      	sub	sp, #40	; 0x28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006de4:	2300      	movs	r3, #0
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <xQueueGenericSend+0x20>
 8006df2:	b672      	cpsid	i
 8006df4:	e7fe      	b.n	8006df4 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <xQueueGenericSend+0x2e>
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xQueueGenericSend+0x32>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <xQueueGenericSend+0x34>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <xQueueGenericSend+0x3c>
 8006e0e:	b672      	cpsid	i
 8006e10:	e7fe      	b.n	8006e10 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d103      	bne.n	8006e20 <xQueueGenericSend+0x4a>
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <xQueueGenericSend+0x4e>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <xQueueGenericSend+0x50>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <xQueueGenericSend+0x58>
 8006e2a:	b672      	cpsid	i
 8006e2c:	e7fe      	b.n	8006e2c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e2e:	f001 f9ed 	bl	800820c <xTaskGetSchedulerState>
 8006e32:	1e03      	subs	r3, r0, #0
 8006e34:	d102      	bne.n	8006e3c <xQueueGenericSend+0x66>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <xQueueGenericSend+0x6a>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <xQueueGenericSend+0x6c>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <xQueueGenericSend+0x74>
 8006e46:	b672      	cpsid	i
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e4a:	f001 fde9 	bl	8008a20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <xQueueGenericSend+0x8a>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d11e      	bne.n	8006e9e <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	0018      	movs	r0, r3
 8006e68:	f000 f9a2 	bl	80071b0 <prvCopyDataToQueue>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f001 f827 	bl	8007ed0 <xTaskRemoveFromEventList>
 8006e82:	1e03      	subs	r3, r0, #0
 8006e84:	d007      	beq.n	8006e96 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e86:	f001 fdbb 	bl	8008a00 <vPortYield>
 8006e8a:	e004      	b.n	8006e96 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e92:	f001 fdb5 	bl	8008a00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e96:	f001 fdd5 	bl	8008a44 <vPortExitCritical>
				return pdPASS;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e05b      	b.n	8006f56 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea4:	f001 fdce 	bl	8008a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e054      	b.n	8006f56 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb2:	2314      	movs	r3, #20
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f001 f878 	bl	8007fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec0:	f001 fdc0 	bl	8008a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec4:	f000 fdf6 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ec8:	f001 fdaa 	bl	8008a20 <vPortEnterCritical>
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	2244      	movs	r2, #68	; 0x44
 8006ed0:	5c9b      	ldrb	r3, [r3, r2]
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	d103      	bne.n	8006ee0 <xQueueGenericSend+0x10a>
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	2244      	movs	r2, #68	; 0x44
 8006edc:	2100      	movs	r1, #0
 8006ede:	5499      	strb	r1, [r3, r2]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2245      	movs	r2, #69	; 0x45
 8006ee4:	5c9b      	ldrb	r3, [r3, r2]
 8006ee6:	b25b      	sxtb	r3, r3
 8006ee8:	3301      	adds	r3, #1
 8006eea:	d103      	bne.n	8006ef4 <xQueueGenericSend+0x11e>
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	2245      	movs	r2, #69	; 0x45
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	5499      	strb	r1, [r3, r2]
 8006ef4:	f001 fda6 	bl	8008a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef8:	1d3a      	adds	r2, r7, #4
 8006efa:	2314      	movs	r3, #20
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	0011      	movs	r1, r2
 8006f00:	0018      	movs	r0, r3
 8006f02:	f001 f867 	bl	8007fd4 <xTaskCheckForTimeOut>
 8006f06:	1e03      	subs	r3, r0, #0
 8006f08:	d11e      	bne.n	8006f48 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f000 fa45 	bl	800739c <prvIsQueueFull>
 8006f12:	1e03      	subs	r3, r0, #0
 8006f14:	d011      	beq.n	8006f3a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );	/*ht: task put on event list based on its priority*/
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	3310      	adds	r3, #16
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	0011      	movs	r1, r2
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 ff92 	bl	8007e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 f9c4 	bl	80072b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f2c:	f000 fdce 	bl	8007acc <xTaskResumeAll>
 8006f30:	1e03      	subs	r3, r0, #0
 8006f32:	d18a      	bne.n	8006e4a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006f34:	f001 fd64 	bl	8008a00 <vPortYield>
 8006f38:	e787      	b.n	8006e4a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 f9b9 	bl	80072b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f42:	f000 fdc3 	bl	8007acc <xTaskResumeAll>
 8006f46:	e780      	b.n	8006e4a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f000 f9b2 	bl	80072b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f50:	f000 fdbc 	bl	8007acc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f54:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f56:	0018      	movs	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b00a      	add	sp, #40	; 0x28
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f5e:	b590      	push	{r4, r7, lr}
 8006f60:	b08b      	sub	sp, #44	; 0x2c
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <xQueueGenericSendFromISR+0x1c>
 8006f76:	b672      	cpsid	i
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <xQueueGenericSendFromISR+0x2a>
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <xQueueGenericSendFromISR+0x2e>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <xQueueGenericSendFromISR+0x30>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <xQueueGenericSendFromISR+0x38>
 8006f92:	b672      	cpsid	i
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d103      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x46>
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <xQueueGenericSendFromISR+0x4a>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <xQueueGenericSendFromISR+0x4c>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <xQueueGenericSendFromISR+0x54>
 8006fae:	b672      	cpsid	i
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fb2:	f001 fd5f 	bl	8008a74 <ulSetInterruptMaskFromISR>
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d302      	bcc.n	8006fcc <xQueueGenericSendFromISR+0x6e>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d131      	bne.n	8007030 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fcc:	241b      	movs	r4, #27
 8006fce:	193b      	adds	r3, r7, r4
 8006fd0:	6a3a      	ldr	r2, [r7, #32]
 8006fd2:	2145      	movs	r1, #69	; 0x45
 8006fd4:	5c52      	ldrb	r2, [r2, r1]
 8006fd6:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f000 f8e3 	bl	80071b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fea:	193b      	adds	r3, r7, r4
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b25b      	sxtb	r3, r3
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	d111      	bne.n	8007018 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	0018      	movs	r0, r3
 8007002:	f000 ff65 	bl	8007ed0 <xTaskRemoveFromEventList>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d00f      	beq.n	800702a <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00c      	beq.n	800702a <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e008      	b.n	800702a <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007018:	231b      	movs	r3, #27
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	3301      	adds	r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	b259      	sxtb	r1, r3
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	2245      	movs	r2, #69	; 0x45
 8007028:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800702a:	2301      	movs	r3, #1
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800702e:	e001      	b.n	8007034 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007030:	2300      	movs	r3, #0
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	0018      	movs	r0, r3
 8007038:	f001 fd22 	bl	8008a80 <vClearInterruptMaskFromISR>

	return xReturn;
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800703e:	0018      	movs	r0, r3
 8007040:	46bd      	mov	sp, r7
 8007042:	b00b      	add	sp, #44	; 0x2c
 8007044:	bd90      	pop	{r4, r7, pc}

08007046 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b08a      	sub	sp, #40	; 0x28
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <xQueueReceive+0x1e>
 8007060:	b672      	cpsid	i
 8007062:	e7fe      	b.n	8007062 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <xQueueReceive+0x2c>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <xQueueReceive+0x30>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <xQueueReceive+0x32>
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <xQueueReceive+0x3a>
 800707c:	b672      	cpsid	i
 800707e:	e7fe      	b.n	800707e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007080:	f001 f8c4 	bl	800820c <xTaskGetSchedulerState>
 8007084:	1e03      	subs	r3, r0, #0
 8007086:	d102      	bne.n	800708e <xQueueReceive+0x48>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xQueueReceive+0x4c>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueReceive+0x4e>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <xQueueReceive+0x56>
 8007098:	b672      	cpsid	i
 800709a:	e7fe      	b.n	800709a <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800709c:	f001 fcc0 	bl	8008a20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	0011      	movs	r1, r2
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 f8d8 	bl	8007268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	3310      	adds	r3, #16
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 feff 	bl	8007ed0 <xTaskRemoveFromEventList>
 80070d2:	1e03      	subs	r3, r0, #0
 80070d4:	d001      	beq.n	80070da <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070d6:	f001 fc93 	bl	8008a00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070da:	f001 fcb3 	bl	8008a44 <vPortExitCritical>
				return pdPASS;
 80070de:	2301      	movs	r3, #1
 80070e0:	e062      	b.n	80071a8 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070e8:	f001 fcac 	bl	8008a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e05b      	b.n	80071a8 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070f6:	2314      	movs	r3, #20
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	0018      	movs	r0, r3
 80070fc:	f000 ff56 	bl	8007fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007104:	f001 fc9e 	bl	8008a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007108:	f000 fcd4 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800710c:	f001 fc88 	bl	8008a20 <vPortEnterCritical>
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2244      	movs	r2, #68	; 0x44
 8007114:	5c9b      	ldrb	r3, [r3, r2]
 8007116:	b25b      	sxtb	r3, r3
 8007118:	3301      	adds	r3, #1
 800711a:	d103      	bne.n	8007124 <xQueueReceive+0xde>
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2244      	movs	r2, #68	; 0x44
 8007120:	2100      	movs	r1, #0
 8007122:	5499      	strb	r1, [r3, r2]
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	2245      	movs	r2, #69	; 0x45
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	b25b      	sxtb	r3, r3
 800712c:	3301      	adds	r3, #1
 800712e:	d103      	bne.n	8007138 <xQueueReceive+0xf2>
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2245      	movs	r2, #69	; 0x45
 8007134:	2100      	movs	r1, #0
 8007136:	5499      	strb	r1, [r3, r2]
 8007138:	f001 fc84 	bl	8008a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800713c:	1d3a      	adds	r2, r7, #4
 800713e:	2314      	movs	r3, #20
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	0011      	movs	r1, r2
 8007144:	0018      	movs	r0, r3
 8007146:	f000 ff45 	bl	8007fd4 <xTaskCheckForTimeOut>
 800714a:	1e03      	subs	r3, r0, #0
 800714c:	d11e      	bne.n	800718c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	0018      	movs	r0, r3
 8007152:	f000 f90d 	bl	8007370 <prvIsQueueEmpty>
 8007156:	1e03      	subs	r3, r0, #0
 8007158:	d011      	beq.n	800717e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	3324      	adds	r3, #36	; 0x24
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	0011      	movs	r1, r2
 8007162:	0018      	movs	r0, r3
 8007164:	f000 fe70 	bl	8007e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	0018      	movs	r0, r3
 800716c:	f000 f8a2 	bl	80072b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007170:	f000 fcac 	bl	8007acc <xTaskResumeAll>
 8007174:	1e03      	subs	r3, r0, #0
 8007176:	d191      	bne.n	800709c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8007178:	f001 fc42 	bl	8008a00 <vPortYield>
 800717c:	e78e      	b.n	800709c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	0018      	movs	r0, r3
 8007182:	f000 f897 	bl	80072b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007186:	f000 fca1 	bl	8007acc <xTaskResumeAll>
 800718a:	e787      	b.n	800709c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	0018      	movs	r0, r3
 8007190:	f000 f890 	bl	80072b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007194:	f000 fc9a 	bl	8007acc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	0018      	movs	r0, r3
 800719c:	f000 f8e8 	bl	8007370 <prvIsQueueEmpty>
 80071a0:	1e03      	subs	r3, r0, #0
 80071a2:	d100      	bne.n	80071a6 <xQueueReceive+0x160>
 80071a4:	e77a      	b.n	800709c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b00a      	add	sp, #40	; 0x28
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d043      	beq.n	8007256 <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d119      	bne.n	8007208 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6858      	ldr	r0, [r3, #4]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	0019      	movs	r1, r3
 80071e0:	f001 fe94 	bl	8008f0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	18d2      	adds	r2, r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d32b      	bcc.n	8007256 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	e026      	b.n	8007256 <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68d8      	ldr	r0, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	0019      	movs	r1, r3
 8007214:	f001 fe7a 	bl	8008f0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	425b      	negs	r3, r3
 8007222:	18d2      	adds	r2, r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d207      	bcs.n	8007244 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	425b      	negs	r3, r3
 800723e:	18d2      	adds	r2, r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d105      	bne.n	8007256 <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3b01      	subs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800725e:	693b      	ldr	r3, [r7, #16]
}
 8007260:	0018      	movs	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	b006      	add	sp, #24
 8007266:	bd80      	pop	{r7, pc}

08007268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	18d2      	adds	r2, r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	d303      	bcc.n	800729c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68d9      	ldr	r1, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f001 fe30 	bl	8008f0c <memcpy>
	}
}
 80072ac:	46c0      	nop			; (mov r8, r8)
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b002      	add	sp, #8
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072bc:	f001 fbb0 	bl	8008a20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072c0:	230f      	movs	r3, #15
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	2145      	movs	r1, #69	; 0x45
 80072c8:	5c52      	ldrb	r2, [r2, r1]
 80072ca:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072cc:	e013      	b.n	80072f6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3324      	adds	r3, #36	; 0x24
 80072da:	0018      	movs	r0, r3
 80072dc:	f000 fdf8 	bl	8007ed0 <xTaskRemoveFromEventList>
 80072e0:	1e03      	subs	r3, r0, #0
 80072e2:	d001      	beq.n	80072e8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072e4:	f000 fed6 	bl	8008094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072e8:	210f      	movs	r1, #15
 80072ea:	187b      	adds	r3, r7, r1
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072f6:	230f      	movs	r3, #15
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dce5      	bgt.n	80072ce <prvUnlockQueue+0x1a>
 8007302:	e000      	b.n	8007306 <prvUnlockQueue+0x52>
					break;
 8007304:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2245      	movs	r2, #69	; 0x45
 800730a:	21ff      	movs	r1, #255	; 0xff
 800730c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800730e:	f001 fb99 	bl	8008a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007312:	f001 fb85 	bl	8008a20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007316:	230e      	movs	r3, #14
 8007318:	18fb      	adds	r3, r7, r3
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	2144      	movs	r1, #68	; 0x44
 800731e:	5c52      	ldrb	r2, [r2, r1]
 8007320:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007322:	e013      	b.n	800734c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d016      	beq.n	800735a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3310      	adds	r3, #16
 8007330:	0018      	movs	r0, r3
 8007332:	f000 fdcd 	bl	8007ed0 <xTaskRemoveFromEventList>
 8007336:	1e03      	subs	r3, r0, #0
 8007338:	d001      	beq.n	800733e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800733a:	f000 feab 	bl	8008094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800733e:	210e      	movs	r1, #14
 8007340:	187b      	adds	r3, r7, r1
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	3b01      	subs	r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	187b      	adds	r3, r7, r1
 800734a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800734c:	230e      	movs	r3, #14
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b25b      	sxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	dce5      	bgt.n	8007324 <prvUnlockQueue+0x70>
 8007358:	e000      	b.n	800735c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800735a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2244      	movs	r2, #68	; 0x44
 8007360:	21ff      	movs	r1, #255	; 0xff
 8007362:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007364:	f001 fb6e 	bl	8008a44 <vPortExitCritical>
}
 8007368:	46c0      	nop			; (mov r8, r8)
 800736a:	46bd      	mov	sp, r7
 800736c:	b004      	add	sp, #16
 800736e:	bd80      	pop	{r7, pc}

08007370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007378:	f001 fb52 	bl	8008a20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e001      	b.n	800738e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800738e:	f001 fb59 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 8007392:	68fb      	ldr	r3, [r7, #12]
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b004      	add	sp, #16
 800739a:	bd80      	pop	{r7, pc}

0800739c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a4:	f001 fb3c 	bl	8008a20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d102      	bne.n	80073ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e001      	b.n	80073be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073be:	f001 fb41 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	0018      	movs	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b004      	add	sp, #16
 80073ca:	bd80      	pop	{r7, pc}

080073cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e015      	b.n	8007408 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <vQueueAddToRegistry+0x4c>)
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	00d2      	lsls	r2, r2, #3
 80073e2:	58d3      	ldr	r3, [r2, r3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10c      	bne.n	8007402 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <vQueueAddToRegistry+0x4c>)
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	00d2      	lsls	r2, r2, #3
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073f2:	4a09      	ldr	r2, [pc, #36]	; (8007418 <vQueueAddToRegistry+0x4c>)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	18d3      	adds	r3, r2, r3
 80073fa:	3304      	adds	r3, #4
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007400:	e006      	b.n	8007410 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b09      	cmp	r3, #9
 800740c:	d9e6      	bls.n	80073dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	46c0      	nop			; (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	b004      	add	sp, #16
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20008914 	.word	0x20008914

0800741c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800742c:	f001 faf8 	bl	8008a20 <vPortEnterCritical>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2244      	movs	r2, #68	; 0x44
 8007434:	5c9b      	ldrb	r3, [r3, r2]
 8007436:	b25b      	sxtb	r3, r3
 8007438:	3301      	adds	r3, #1
 800743a:	d103      	bne.n	8007444 <vQueueWaitForMessageRestricted+0x28>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2244      	movs	r2, #68	; 0x44
 8007440:	2100      	movs	r1, #0
 8007442:	5499      	strb	r1, [r3, r2]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2245      	movs	r2, #69	; 0x45
 8007448:	5c9b      	ldrb	r3, [r3, r2]
 800744a:	b25b      	sxtb	r3, r3
 800744c:	3301      	adds	r3, #1
 800744e:	d103      	bne.n	8007458 <vQueueWaitForMessageRestricted+0x3c>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2245      	movs	r2, #69	; 0x45
 8007454:	2100      	movs	r1, #0
 8007456:	5499      	strb	r1, [r3, r2]
 8007458:	f001 faf4 	bl	8008a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	0018      	movs	r0, r3
 800746e:	f000 fd09 	bl	8007e84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	0018      	movs	r0, r3
 8007476:	f7ff ff1d 	bl	80072b4 <prvUnlockQueue>
	}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	46bd      	mov	sp, r7
 800747e:	b006      	add	sp, #24
 8007480:	bd80      	pop	{r7, pc}

08007482 <xTaskCreate>:
									const configSTACK_DEPTH_TYPE usStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TickType_t xDeadline)		/* ht: xRelDeadline was added, this is the variable set the deadline for task*/
	{
 8007482:	b590      	push	{r4, r7, lr}
 8007484:	b08f      	sub	sp, #60	; 0x3c
 8007486:	af06      	add	r7, sp, #24
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	1dbb      	adds	r3, r7, #6
 8007490:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007492:	1dbb      	adds	r3, r7, #6
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	0018      	movs	r0, r3
 800749a:	f001 fb5b 	bl	8008b54 <pvPortMalloc>
 800749e:	0003      	movs	r3, r0
 80074a0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074a8:	205c      	movs	r0, #92	; 0x5c
 80074aa:	f001 fb53 	bl	8008b54 <pvPortMalloc>
 80074ae:	0003      	movs	r3, r0
 80074b0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
 80074be:	e006      	b.n	80074ce <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	0018      	movs	r0, r3
 80074c4:	f001 fbf2 	bl	8008cac <vPortFree>
 80074c8:	e001      	b.n	80074ce <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d018      	beq.n	8007506 <xTaskCreate+0x84>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			// #if ( configDYNAMIC_SCHEDULING == 1 )
				prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL, xDeadline ); /*ht: this task should recieve deadline also*/
 80074d4:	1dbb      	adds	r3, r7, #6
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	683c      	ldr	r4, [r7, #0]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9303      	str	r3, [sp, #12]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	9302      	str	r3, [sp, #8]
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	0023      	movs	r3, r4
 80074f4:	f000 f810 	bl	8007518 <prvInitialiseNewTask>
			// #else
			// 	prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			// #endif

			prvAddNewTaskToReadyList( pxNewTCB );
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 f8ae 	bl	800765c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	e002      	b.n	800750c <xTaskCreate+0x8a>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007506:	2301      	movs	r3, #1
 8007508:	425b      	negs	r3, r3
 800750a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800750c:	69bb      	ldr	r3, [r7, #24]
	}
 800750e:	0018      	movs	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	b009      	add	sp, #36	; 0x24
 8007514:	bd90      	pop	{r4, r7, pc}
	...

08007518 <prvInitialiseNewTask>:
// 										TaskHandle_t * const pxCreatedTask,
// 										TCB_t *pxNewTCB,
// 										const MemoryRegion_t * const xRegions)
// #endif

{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	001a      	movs	r2, r3
 8007530:	21a5      	movs	r1, #165	; 0xa5
 8007532:	f001 fcf4 	bl	8008f1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4945      	ldr	r1, [pc, #276]	; (8007654 <prvInitialiseNewTask+0x13c>)
 800753e:	468c      	mov	ip, r1
 8007540:	4463      	add	r3, ip
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	18d3      	adds	r3, r2, r3
 8007546:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2207      	movs	r2, #7
 800754c:	4393      	bics	r3, r2
 800754e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2207      	movs	r2, #7
 8007554:	4013      	ands	r3, r2
 8007556:	d001      	beq.n	800755c <prvInitialiseNewTask+0x44>
 8007558:	b672      	cpsid	i
 800755a:	e7fe      	b.n	800755a <prvInitialiseNewTask+0x42>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d020      	beq.n	80075aa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e013      	b.n	8007596 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	18d3      	adds	r3, r2, r3
 8007574:	7818      	ldrb	r0, [r3, #0]
 8007576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007578:	213c      	movs	r1, #60	; 0x3c
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	18d3      	adds	r3, r2, r3
 800757e:	185b      	adds	r3, r3, r1
 8007580:	1c02      	adds	r2, r0, #0
 8007582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d006      	beq.n	800759e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	3301      	adds	r3, #1
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b0f      	cmp	r3, #15
 800759a:	d9e8      	bls.n	800756e <prvInitialiseNewTask+0x56>
 800759c:	e000      	b.n	80075a0 <prvInitialiseNewTask+0x88>
			{
				break;
 800759e:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	224b      	movs	r2, #75	; 0x4b
 80075a4:	2100      	movs	r1, #0
 80075a6:	5499      	strb	r1, [r3, r2]
 80075a8:	e003      	b.n	80075b2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	223c      	movs	r2, #60	; 0x3c
 80075ae:	2100      	movs	r1, #0
 80075b0:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b0e      	cmp	r3, #14
 80075b6:	d901      	bls.n	80075bc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075b8:	230e      	movs	r3, #14
 80075ba:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	635a      	str	r2, [r3, #52]	; 0x34

	// #if ( configDYNAMIC_SCHEDULING == 1 )
		pxNewTCB->xDeadlineRel = xDeadline;	/*ht: deadline is set in the TCB*/
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
		if (pxNewTCB->xDeadlineRel == portMAX_DELAY)
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	3301      	adds	r3, #1
 80075ce:	d104      	bne.n	80075da <prvInitialiseNewTask+0xc2>
			pxNewTCB->xDeadlineAbs = portMAX_DELAY;
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	2201      	movs	r2, #1
 80075d4:	4252      	negs	r2, r2
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80075d8:	e006      	b.n	80075e8 <prvInitialiseNewTask+0xd0>
		else
			pxNewTCB->xDeadlineAbs = pxNewTCB->xDeadlineRel + xTickCount;
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075de:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <prvInitialiseNewTask+0x140>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	18d2      	adds	r2, r2, r3
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	#endif /* configUSE_MUTEXES */



	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	3304      	adds	r3, #4
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7ff fac3 	bl	8006b78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	3318      	adds	r3, #24
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7ff fabe 	bl	8006b78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007600:	611a      	str	r2, [r3, #16]
	#if ( configDYNAMIC_SCHEDULING == 1 )
	/*ht: New event list is based on deadline instead of priority*/
		listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), pxNewTCB->xDeadlineAbs ); /*ht: logic is higher priority, lower the value, so I put directly deadline*/
	#else
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	220f      	movs	r2, #15
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	619a      	str	r2, [r3, #24]
	#endif

	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007610:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	2200      	movs	r2, #0
 8007616:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	2200      	movs	r2, #0
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	2258      	movs	r2, #88	; 0x58
 8007622:	2100      	movs	r1, #0
 8007624:	5499      	strb	r1, [r3, r2]
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2259      	movs	r2, #89	; 0x59
 800762a:	2100      	movs	r1, #0
 800762c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	0018      	movs	r0, r3
 8007636:	f001 f959 	bl	80088ec <pxPortInitialiseStack>
 800763a:	0002      	movs	r2, r0
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <prvInitialiseNewTask+0x134>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800764a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764c:	46c0      	nop			; (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b006      	add	sp, #24
 8007652:	bd80      	pop	{r7, pc}
 8007654:	3fffffff 	.word	0x3fffffff
 8007658:	20000710 	.word	0x20000710

0800765c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007664:	f001 f9dc 	bl	8008a20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007668:	4b30      	ldr	r3, [pc, #192]	; (800772c <prvAddNewTaskToReadyList+0xd0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	4b2f      	ldr	r3, [pc, #188]	; (800772c <prvAddNewTaskToReadyList+0xd0>)
 8007670:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007672:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <prvAddNewTaskToReadyList+0xd4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800767a:	4b2d      	ldr	r3, [pc, #180]	; (8007730 <prvAddNewTaskToReadyList+0xd4>)
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007680:	4b2a      	ldr	r3, [pc, #168]	; (800772c <prvAddNewTaskToReadyList+0xd0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d110      	bne.n	80076aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007688:	f000 fd1e 	bl	80080c8 <prvInitialiseTaskLists>
 800768c:	e00d      	b.n	80076aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800768e:	4b29      	ldr	r3, [pc, #164]	; (8007734 <prvAddNewTaskToReadyList+0xd8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <prvAddNewTaskToReadyList+0x4e>
					if( pxCurrentTCB->xDeadlineAbs >= pxNewTCB->xDeadlineAbs )
					{
						pxCurrentTCB = pxNewTCB;
					}
				#else
					if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007696:	4b26      	ldr	r3, [pc, #152]	; (8007730 <prvAddNewTaskToReadyList+0xd4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d802      	bhi.n	80076aa <prvAddNewTaskToReadyList+0x4e>
					{
						pxCurrentTCB = pxNewTCB;
 80076a4:	4b22      	ldr	r3, [pc, #136]	; (8007730 <prvAddNewTaskToReadyList+0xd4>)
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076aa:	4b23      	ldr	r3, [pc, #140]	; (8007738 <prvAddNewTaskToReadyList+0xdc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	4b21      	ldr	r3, [pc, #132]	; (8007738 <prvAddNewTaskToReadyList+0xdc>)
 80076b2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076b8:	4b20      	ldr	r3, [pc, #128]	; (800773c <prvAddNewTaskToReadyList+0xe0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d903      	bls.n	80076c8 <prvAddNewTaskToReadyList+0x6c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c4:	4b1d      	ldr	r3, [pc, #116]	; (800773c <prvAddNewTaskToReadyList+0xe0>)
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	3301      	adds	r3, #1
 80076ce:	d104      	bne.n	80076da <prvAddNewTaskToReadyList+0x7e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	4252      	negs	r2, r2
 80076d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80076d8:	e006      	b.n	80076e8 <prvAddNewTaskToReadyList+0x8c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076de:	4b18      	ldr	r3, [pc, #96]	; (8007740 <prvAddNewTaskToReadyList+0xe4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	18d2      	adds	r2, r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ec:	0013      	movs	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <prvAddNewTaskToReadyList+0xe8>)
 80076f6:	189a      	adds	r2, r3, r2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	0019      	movs	r1, r3
 80076fe:	0010      	movs	r0, r2
 8007700:	f7ff fa45 	bl	8006b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007704:	f001 f99e 	bl	8008a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <prvAddNewTaskToReadyList+0xd8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <prvAddNewTaskToReadyList+0xc6>
			if( pxCurrentTCB->xDeadlineAbs > pxNewTCB->xDeadlineAbs )
			{
				taskYIELD_IF_USING_PREEMPTION();
			}
		#else
			if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority ) /*ht: recent_change: im not sure but it should be fine*/
 8007710:	4b07      	ldr	r3, [pc, #28]	; (8007730 <prvAddNewTaskToReadyList+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	429a      	cmp	r2, r3
 800771c:	d201      	bcs.n	8007722 <prvAddNewTaskToReadyList+0xc6>
			{
				taskYIELD_IF_USING_PREEMPTION();
 800771e:	f001 f96f 	bl	8008a00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	2000070c 	.word	0x2000070c
 8007730:	2000056c 	.word	0x2000056c
 8007734:	20000718 	.word	0x20000718
 8007738:	20000728 	.word	0x20000728
 800773c:	20000714 	.word	0x20000714
 8007740:	20000710 	.word	0x20000710
 8007744:	20000570 	.word	0x20000570

08007748 <uxTaskDeadlineAbsGet>:

#endif /* INCLUDE_eTaskGetState */
/*-----------------------------------------------------------*/

	TickType_t uxTaskDeadlineAbsGet( const TaskHandle_t xTask )	/*ht: implemented for reading deadline*/
	{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	TickType_t uxReturn;

		taskENTER_CRITICAL();
 8007750:	f001 f966 	bl	8008a20 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <uxTaskDeadlineAbsGet+0x18>
 800775a:	4b07      	ldr	r3, [pc, #28]	; (8007778 <uxTaskDeadlineAbsGet+0x30>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	e000      	b.n	8007762 <uxTaskDeadlineAbsGet+0x1a>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->xDeadlineAbs;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800776a:	f001 f96b 	bl	8008a44 <vPortExitCritical>

		return uxReturn;
 800776e:	68bb      	ldr	r3, [r7, #8]
	}
 8007770:	0018      	movs	r0, r3
 8007772:	46bd      	mov	sp, r7
 8007774:	b004      	add	sp, #16
 8007776:	bd80      	pop	{r7, pc}
 8007778:	2000056c 	.word	0x2000056c

0800777c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007784:	f001 f94c 	bl	8008a20 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d102      	bne.n	8007794 <vTaskSuspend+0x18>
 800778e:	4b29      	ldr	r3, [pc, #164]	; (8007834 <vTaskSuspend+0xb8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	e000      	b.n	8007796 <vTaskSuspend+0x1a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3304      	adds	r3, #4
 800779c:	0018      	movs	r0, r3
 800779e:	f7ff fa4e 	bl	8006c3e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d004      	beq.n	80077b4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3318      	adds	r3, #24
 80077ae:	0018      	movs	r0, r3
 80077b0:	f7ff fa45 	bl	8006c3e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <vTaskSuspend+0xbc>)
 80077ba:	0011      	movs	r1, r2
 80077bc:	0018      	movs	r0, r3
 80077be:	f7ff f9e6 	bl	8006b8e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2258      	movs	r2, #88	; 0x58
 80077c6:	5c9b      	ldrb	r3, [r3, r2]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d103      	bne.n	80077d6 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2258      	movs	r2, #88	; 0x58
 80077d2:	2100      	movs	r1, #0
 80077d4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80077d6:	f001 f935 	bl	8008a44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80077da:	4b18      	ldr	r3, [pc, #96]	; (800783c <vTaskSuspend+0xc0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80077e2:	f001 f91d 	bl	8008a20 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80077e6:	f000 fcf3 	bl	80081d0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80077ea:	f001 f92b 	bl	8008a44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80077ee:	4b11      	ldr	r3, [pc, #68]	; (8007834 <vTaskSuspend+0xb8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d118      	bne.n	800782a <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 80077f8:	4b10      	ldr	r3, [pc, #64]	; (800783c <vTaskSuspend+0xc0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <vTaskSuspend+0xc4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <vTaskSuspend+0x90>
 8007808:	b672      	cpsid	i
 800780a:	e7fe      	b.n	800780a <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 800780c:	f001 f8f8 	bl	8008a00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007810:	e00b      	b.n	800782a <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <vTaskSuspend+0xbc>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <vTaskSuspend+0xc8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d103      	bne.n	8007826 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <vTaskSuspend+0xb8>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
	}
 8007824:	e001      	b.n	800782a <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8007826:	f000 fabd 	bl	8007da4 <vTaskSwitchContext>
	}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	46bd      	mov	sp, r7
 800782e:	b004      	add	sp, #16
 8007830:	bd80      	pop	{r7, pc}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	2000056c 	.word	0x2000056c
 8007838:	200006f8 	.word	0x200006f8
 800783c:	20000718 	.word	0x20000718
 8007840:	20000734 	.word	0x20000734
 8007844:	2000070c 	.word	0x2000070c

08007848 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <prvTaskIsTaskSuspended+0x1a>
 800785e:	b672      	cpsid	i
 8007860:	e7fe      	b.n	8007860 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <prvTaskIsTaskSuspended+0x44>)
 8007868:	429a      	cmp	r2, r3
 800786a:	d10a      	bne.n	8007882 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <prvTaskIsTaskSuspended+0x48>)
 8007872:	429a      	cmp	r2, r3
 8007874:	d005      	beq.n	8007882 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 800787e:	2301      	movs	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007882:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007884:	0018      	movs	r0, r3
 8007886:	46bd      	mov	sp, r7
 8007888:	b004      	add	sp, #16
 800788a:	bd80      	pop	{r7, pc}
 800788c:	200006f8 	.word	0x200006f8
 8007890:	200006cc 	.word	0x200006cc

08007894 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <vTaskResume+0x16>
 80078a6:	b672      	cpsid	i
 80078a8:	e7fe      	b.n	80078a8 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80078aa:	4b26      	ldr	r3, [pc, #152]	; (8007944 <vTaskResume+0xb0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d042      	beq.n	800793a <vTaskResume+0xa6>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d03f      	beq.n	800793a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80078ba:	f001 f8b1 	bl	8008a20 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	0018      	movs	r0, r3
 80078c2:	f7ff ffc1 	bl	8007848 <prvTaskIsTaskSuspended>
 80078c6:	1e03      	subs	r3, r0, #0
 80078c8:	d035      	beq.n	8007936 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3304      	adds	r3, #4
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7ff f9b5 	bl	8006c3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d8:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <vTaskResume+0xb4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d903      	bls.n	80078e8 <vTaskResume+0x54>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e4:	4b18      	ldr	r3, [pc, #96]	; (8007948 <vTaskResume+0xb4>)
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	3301      	adds	r3, #1
 80078ee:	d104      	bne.n	80078fa <vTaskResume+0x66>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	4252      	negs	r2, r2
 80078f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80078f8:	e006      	b.n	8007908 <vTaskResume+0x74>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <vTaskResume+0xb8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	18d2      	adds	r2, r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	62da      	str	r2, [r3, #44]	; 0x2c
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800790c:	0013      	movs	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	189b      	adds	r3, r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <vTaskResume+0xbc>)
 8007916:	189a      	adds	r2, r3, r2
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3304      	adds	r3, #4
 800791c:	0019      	movs	r1, r3
 800791e:	0010      	movs	r0, r2
 8007920:	f7ff f935 	bl	8006b8e <vListInsertEnd>
							pxTCB->xDeadlineAbs = pxTCB->xDeadlineRel + xTickCount;
						if( pxTCB->xDeadlineAbs <= pxCurrentTCB->xDeadlineAbs)
						{
					#else
						/* A higher priority task may have just been resumed. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007928:	4b06      	ldr	r3, [pc, #24]	; (8007944 <vTaskResume+0xb0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	429a      	cmp	r2, r3
 8007930:	d301      	bcc.n	8007936 <vTaskResume+0xa2>
					#endif

						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007932:	f001 f865 	bl	8008a00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007936:	f001 f885 	bl	8008a44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	46bd      	mov	sp, r7
 800793e:	b004      	add	sp, #16
 8007940:	bd80      	pop	{r7, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	2000056c 	.word	0x2000056c
 8007948:	20000714 	.word	0x20000714
 800794c:	20000710 	.word	0x20000710
 8007950:	20000570 	.word	0x20000570

08007954 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = xTaskToResume;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <xTaskResumeFromISR+0x1a>
 800796a:	b672      	cpsid	i
 800796c:	e7fe      	b.n	800796c <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800796e:	f001 f881 	bl	8008a74 <ulSetInterruptMaskFromISR>
 8007972:	0003      	movs	r3, r0
 8007974:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	0018      	movs	r0, r3
 800797a:	f7ff ff65 	bl	8007848 <prvTaskIsTaskSuspended>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d042      	beq.n	8007a08 <xTaskResumeFromISR+0xb4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007982:	4b26      	ldr	r3, [pc, #152]	; (8007a1c <xTaskResumeFromISR+0xc8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d136      	bne.n	80079f8 <xTaskResumeFromISR+0xa4>
							pxTCB->xDeadlineAbs = portMAX_DELAY;
						else
							pxTCB->xDeadlineAbs = pxTCB->xDeadlineRel + xTickCount; /*ht: updating based on deadline*/
						if( pxTCB->xDeadlineAbs <= pxCurrentTCB->xDeadlineAbs )
					#else
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <xTaskResumeFromISR+0xcc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007994:	429a      	cmp	r2, r3
 8007996:	d301      	bcc.n	800799c <xTaskResumeFromISR+0x48>
					#endif
					{
						xYieldRequired = pdTRUE;
 8007998:	2301      	movs	r3, #1
 800799a:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	3304      	adds	r3, #4
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7ff f94c 	bl	8006c3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079aa:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <xTaskResumeFromISR+0xd0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d903      	bls.n	80079ba <xTaskResumeFromISR+0x66>
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b6:	4b1b      	ldr	r3, [pc, #108]	; (8007a24 <xTaskResumeFromISR+0xd0>)
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	3301      	adds	r3, #1
 80079c0:	d104      	bne.n	80079cc <xTaskResumeFromISR+0x78>
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	2201      	movs	r2, #1
 80079c6:	4252      	negs	r2, r2
 80079c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80079ca:	e006      	b.n	80079da <xTaskResumeFromISR+0x86>
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d0:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <xTaskResumeFromISR+0xd4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	18d2      	adds	r2, r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079de:	0013      	movs	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a11      	ldr	r2, [pc, #68]	; (8007a2c <xTaskResumeFromISR+0xd8>)
 80079e8:	189a      	adds	r2, r3, r2
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3304      	adds	r3, #4
 80079ee:	0019      	movs	r1, r3
 80079f0:	0010      	movs	r0, r2
 80079f2:	f7ff f8cc 	bl	8006b8e <vListInsertEnd>
 80079f6:	e007      	b.n	8007a08 <xTaskResumeFromISR+0xb4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	3318      	adds	r3, #24
 80079fc:	001a      	movs	r2, r3
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <xTaskResumeFromISR+0xdc>)
 8007a00:	0011      	movs	r1, r2
 8007a02:	0018      	movs	r0, r3
 8007a04:	f7ff f8c3 	bl	8006b8e <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f001 f838 	bl	8008a80 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8007a10:	697b      	ldr	r3, [r7, #20]
	}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b006      	add	sp, #24
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	20000734 	.word	0x20000734
 8007a20:	2000056c 	.word	0x2000056c
 8007a24:	20000714 	.word	0x20000714
 8007a28:	20000710 	.word	0x20000710
 8007a2c:	20000570 	.word	0x20000570
 8007a30:	200006cc 	.word	0x200006cc

08007a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af04      	add	r7, sp, #16
			xReturn = pdFAIL;
		}
	}
	#else
	{
			xReturn = xTaskCreate(	prvIdleTask,
 8007a3a:	4918      	ldr	r1, [pc, #96]	; (8007a9c <vTaskStartScheduler+0x68>)
 8007a3c:	4818      	ldr	r0, [pc, #96]	; (8007aa0 <vTaskStartScheduler+0x6c>)
 8007a3e:	2301      	movs	r3, #1
 8007a40:	425b      	negs	r3, r3
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	4b17      	ldr	r3, [pc, #92]	; (8007aa4 <vTaskStartScheduler+0x70>)
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	22c8      	movs	r2, #200	; 0xc8
 8007a50:	f7ff fd17 	bl	8007482 <xTaskCreate>
 8007a54:	0003      	movs	r3, r0
 8007a56:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d103      	bne.n	8007a66 <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 8007a5e:	f000 fc4b 	bl	80082f8 <xTimerCreateTimerTask>
 8007a62:	0003      	movs	r3, r0
 8007a64:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d10d      	bne.n	8007a88 <vTaskStartScheduler+0x54>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007a6c:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <vTaskStartScheduler+0x74>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	4252      	negs	r2, r2
 8007a74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <vTaskStartScheduler+0x78>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <vTaskStartScheduler+0x7c>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a82:	f000 ff99 	bl	80089b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a86:	e004      	b.n	8007a92 <vTaskStartScheduler+0x5e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <vTaskStartScheduler+0x5e>
 8007a8e:	b672      	cpsid	i
 8007a90:	e7fe      	b.n	8007a90 <vTaskStartScheduler+0x5c>
}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b002      	add	sp, #8
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	0800a1e8 	.word	0x0800a1e8
 8007aa0:	080080a9 	.word	0x080080a9
 8007aa4:	20000730 	.word	0x20000730
 8007aa8:	2000072c 	.word	0x2000072c
 8007aac:	20000718 	.word	0x20000718
 8007ab0:	20000710 	.word	0x20000710

08007ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ab8:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <vTaskSuspendAll+0x14>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	4b02      	ldr	r3, [pc, #8]	; (8007ac8 <vTaskSuspendAll+0x14>)
 8007ac0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000734 	.word	0x20000734

08007acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ada:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <xTaskResumeAll+0x118>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <xTaskResumeAll+0x1a>
 8007ae2:	b672      	cpsid	i
 8007ae4:	e7fe      	b.n	8007ae4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ae6:	f000 ff9b 	bl	8008a20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007aea:	4b3e      	ldr	r3, [pc, #248]	; (8007be4 <xTaskResumeAll+0x118>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1e5a      	subs	r2, r3, #1
 8007af0:	4b3c      	ldr	r3, [pc, #240]	; (8007be4 <xTaskResumeAll+0x118>)
 8007af2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af4:	4b3b      	ldr	r3, [pc, #236]	; (8007be4 <xTaskResumeAll+0x118>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d000      	beq.n	8007afe <xTaskResumeAll+0x32>
 8007afc:	e06b      	b.n	8007bd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007afe:	4b3a      	ldr	r3, [pc, #232]	; (8007be8 <xTaskResumeAll+0x11c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d067      	beq.n	8007bd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b06:	e03f      	b.n	8007b88 <xTaskResumeAll+0xbc>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b38      	ldr	r3, [pc, #224]	; (8007bec <xTaskResumeAll+0x120>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3318      	adds	r3, #24
 8007b14:	0018      	movs	r0, r3
 8007b16:	f7ff f892 	bl	8006c3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7ff f88d 	bl	8006c3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b28:	4b31      	ldr	r3, [pc, #196]	; (8007bf0 <xTaskResumeAll+0x124>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d903      	bls.n	8007b38 <xTaskResumeAll+0x6c>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b34:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <xTaskResumeAll+0x124>)
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	d104      	bne.n	8007b4a <xTaskResumeAll+0x7e>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	4252      	negs	r2, r2
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b48:	e006      	b.n	8007b58 <xTaskResumeAll+0x8c>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4e:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <xTaskResumeAll+0x128>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	18d2      	adds	r2, r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b5c:	0013      	movs	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a24      	ldr	r2, [pc, #144]	; (8007bf8 <xTaskResumeAll+0x12c>)
 8007b66:	189a      	adds	r2, r3, r2
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	0019      	movs	r1, r3
 8007b6e:	0010      	movs	r0, r2
 8007b70:	f7ff f80d 	bl	8006b8e <vListInsertEnd>
						else
							pxTCB->xDeadlineAbs = pxTCB->xDeadlineRel + xTickCount;
						if( pxTCB->xDeadlineAbs <= pxCurrentTCB->xDeadlineAbs )
						{
					#else
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b78:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <xTaskResumeAll+0x130>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <xTaskResumeAll+0xbc>
						{
					#endif

						xYieldPending = pdTRUE;
 8007b82:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <xTaskResumeAll+0x134>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b88:	4b18      	ldr	r3, [pc, #96]	; (8007bec <xTaskResumeAll+0x120>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1bb      	bne.n	8007b08 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <xTaskResumeAll+0xce>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b96:	f000 fb1b 	bl	80081d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b9a:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <xTaskResumeAll+0x138>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00f      	beq.n	8007bc6 <xTaskResumeAll+0xfa>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ba6:	f000 f83d 	bl	8007c24 <xTaskIncrementTick>
 8007baa:	1e03      	subs	r3, r0, #0
 8007bac:	d002      	beq.n	8007bb4 <xTaskResumeAll+0xe8>
							{
								xYieldPending = pdTRUE;
 8007bae:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <xTaskResumeAll+0x134>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f2      	bne.n	8007ba6 <xTaskResumeAll+0xda>

						xPendedTicks = 0;
 8007bc0:	4b10      	ldr	r3, [pc, #64]	; (8007c04 <xTaskResumeAll+0x138>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <xTaskResumeAll+0x134>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bd2:	f000 ff15 	bl	8008a00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bd6:	f000 ff35 	bl	8008a44 <vPortExitCritical>

	return xAlreadyYielded;
 8007bda:	68bb      	ldr	r3, [r7, #8]
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000734 	.word	0x20000734
 8007be8:	2000070c 	.word	0x2000070c
 8007bec:	200006cc 	.word	0x200006cc
 8007bf0:	20000714 	.word	0x20000714
 8007bf4:	20000710 	.word	0x20000710
 8007bf8:	20000570 	.word	0x20000570
 8007bfc:	2000056c 	.word	0x2000056c
 8007c00:	20000720 	.word	0x20000720
 8007c04:	2000071c 	.word	0x2000071c

08007c08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <xTaskGetTickCount+0x18>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c14:	687b      	ldr	r3, [r7, #4]
}
 8007c16:	0018      	movs	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b002      	add	sp, #8
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	20000710 	.word	0x20000710

08007c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2e:	4b52      	ldr	r3, [pc, #328]	; (8007d78 <xTaskIncrementTick+0x154>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d000      	beq.n	8007c38 <xTaskIncrementTick+0x14>
 8007c36:	e094      	b.n	8007d62 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c38:	4b50      	ldr	r3, [pc, #320]	; (8007d7c <xTaskIncrementTick+0x158>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c40:	4b4e      	ldr	r3, [pc, #312]	; (8007d7c <xTaskIncrementTick+0x158>)
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d117      	bne.n	8007c7c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c4c:	4b4c      	ldr	r3, [pc, #304]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <xTaskIncrementTick+0x36>
 8007c56:	b672      	cpsid	i
 8007c58:	e7fe      	b.n	8007c58 <xTaskIncrementTick+0x34>
 8007c5a:	4b49      	ldr	r3, [pc, #292]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	4b48      	ldr	r3, [pc, #288]	; (8007d84 <xTaskIncrementTick+0x160>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b46      	ldr	r3, [pc, #280]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	4b46      	ldr	r3, [pc, #280]	; (8007d84 <xTaskIncrementTick+0x160>)
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	4b46      	ldr	r3, [pc, #280]	; (8007d88 <xTaskIncrementTick+0x164>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <xTaskIncrementTick+0x164>)
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f000 faaa 	bl	80081d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c7c:	4b43      	ldr	r3, [pc, #268]	; (8007d8c <xTaskIncrementTick+0x168>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d359      	bcc.n	8007d3a <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c86:	4b3e      	ldr	r3, [pc, #248]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c90:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <xTaskIncrementTick+0x168>)
 8007c92:	2201      	movs	r2, #1
 8007c94:	4252      	negs	r2, r2
 8007c96:	601a      	str	r2, [r3, #0]
					break;
 8007c98:	e04f      	b.n	8007d3a <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9a:	4b39      	ldr	r3, [pc, #228]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d203      	bcs.n	8007cba <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cb2:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <xTaskIncrementTick+0x168>)
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cb8:	e03f      	b.n	8007d3a <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f7fe ffbd 	bl	8006c3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3318      	adds	r3, #24
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f7fe ffb4 	bl	8006c3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cda:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <xTaskIncrementTick+0x16c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d903      	bls.n	8007cea <xTaskIncrementTick+0xc6>
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce6:	4b2a      	ldr	r3, [pc, #168]	; (8007d90 <xTaskIncrementTick+0x16c>)
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	3301      	adds	r3, #1
 8007cf0:	d104      	bne.n	8007cfc <xTaskIncrementTick+0xd8>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	4252      	negs	r2, r2
 8007cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007cfa:	e006      	b.n	8007d0a <xTaskIncrementTick+0xe6>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d00:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <xTaskIncrementTick+0x158>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	18d2      	adds	r2, r2, r3
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0e:	0013      	movs	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	189b      	adds	r3, r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4a1f      	ldr	r2, [pc, #124]	; (8007d94 <xTaskIncrementTick+0x170>)
 8007d18:	189a      	adds	r2, r3, r2
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	0019      	movs	r1, r3
 8007d20:	0010      	movs	r0, r2
 8007d22:	f7fe ff34 	bl	8006b8e <vListInsertEnd>
								pxTCB->xDeadlineAbs = portMAX_DELAY;
							else
								pxTCB->xDeadlineAbs = pxTCB->xDeadlineRel + xTickCount;
							if( pxTCB->xDeadlineAbs <= pxCurrentTCB->xDeadlineAbs )
						#else
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <xTaskIncrementTick+0x174>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d3a8      	bcc.n	8007c86 <xTaskIncrementTick+0x62>
						#endif
						{
							xSwitchRequired = pdTRUE;
 8007d34:	2301      	movs	r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d38:	e7a5      	b.n	8007c86 <xTaskIncrementTick+0x62>
			/* Tasks of equal priority to the currently running task will share
			processing time (time slice) if preemption is on, and the application
			writer has not explicitly turned time slicing off. */
			#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
			{
				if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d3a:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <xTaskIncrementTick+0x174>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d40:	4914      	ldr	r1, [pc, #80]	; (8007d94 <xTaskIncrementTick+0x170>)
 8007d42:	0013      	movs	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	189b      	adds	r3, r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	585b      	ldr	r3, [r3, r1]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d901      	bls.n	8007d54 <xTaskIncrementTick+0x130>
				{
					xSwitchRequired = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d54:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <xTaskIncrementTick+0x178>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <xTaskIncrementTick+0x148>
			{
				xSwitchRequired = pdTRUE;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e004      	b.n	8007d6c <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <xTaskIncrementTick+0x17c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <xTaskIncrementTick+0x17c>)
 8007d6a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d6c:	697b      	ldr	r3, [r7, #20]
}
 8007d6e:	0018      	movs	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b006      	add	sp, #24
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	20000734 	.word	0x20000734
 8007d7c:	20000710 	.word	0x20000710
 8007d80:	200006c4 	.word	0x200006c4
 8007d84:	200006c8 	.word	0x200006c8
 8007d88:	20000724 	.word	0x20000724
 8007d8c:	2000072c 	.word	0x2000072c
 8007d90:	20000714 	.word	0x20000714
 8007d94:	20000570 	.word	0x20000570
 8007d98:	2000056c 	.word	0x2000056c
 8007d9c:	20000720 	.word	0x20000720
 8007da0:	2000071c 	.word	0x2000071c

08007da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007daa:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <vTaskSwitchContext+0x90>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007db2:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <vTaskSwitchContext+0x94>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007db8:	e037      	b.n	8007e2a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8007dba:	4b1f      	ldr	r3, [pc, #124]	; (8007e38 <vTaskSwitchContext+0x94>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
			taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <vTaskSwitchContext+0x98>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	607b      	str	r3, [r7, #4]
 8007dc6:	e007      	b.n	8007dd8 <vTaskSwitchContext+0x34>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <vTaskSwitchContext+0x2e>
 8007dce:	b672      	cpsid	i
 8007dd0:	e7fe      	b.n	8007dd0 <vTaskSwitchContext+0x2c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	607b      	str	r3, [r7, #4]
 8007dd8:	4919      	ldr	r1, [pc, #100]	; (8007e40 <vTaskSwitchContext+0x9c>)
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	0013      	movs	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	189b      	adds	r3, r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	585b      	ldr	r3, [r3, r1]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ee      	beq.n	8007dc8 <vTaskSwitchContext+0x24>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	0013      	movs	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <vTaskSwitchContext+0x9c>)
 8007df6:	189b      	adds	r3, r3, r2
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d104      	bne.n	8007e1a <vTaskSwitchContext+0x76>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	605a      	str	r2, [r3, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <vTaskSwitchContext+0xa0>)
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <vTaskSwitchContext+0x98>)
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b002      	add	sp, #8
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	20000734 	.word	0x20000734
 8007e38:	20000720 	.word	0x20000720
 8007e3c:	20000714 	.word	0x20000714
 8007e40:	20000570 	.word	0x20000570
 8007e44:	2000056c 	.word	0x2000056c

08007e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <vTaskPlaceOnEventList+0x14>
 8007e58:	b672      	cpsid	i
 8007e5a:	e7fe      	b.n	8007e5a <vTaskPlaceOnEventList+0x12>
		else
			pxCurrentTCB->xDeadlineAbs = pxCurrentTCB->xDeadlineRel + xTickCount;
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), pxCurrentTCB->xDeadlineAbs );
	#endif

	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e5c:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <vTaskPlaceOnEventList+0x38>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3318      	adds	r3, #24
 8007e62:	001a      	movs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	0011      	movs	r1, r2
 8007e68:	0018      	movs	r0, r3
 8007e6a:	f7fe feb2 	bl	8006bd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2101      	movs	r1, #1
 8007e72:	0018      	movs	r0, r3
 8007e74:	f000 f9e6 	bl	8008244 <prvAddCurrentTaskToDelayedList>
}
 8007e78:	46c0      	nop			; (mov r8, r8)
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b002      	add	sp, #8
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	2000056c 	.word	0x2000056c

08007e84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <vTaskPlaceOnEventListRestricted+0x16>
 8007e96:	b672      	cpsid	i
 8007e98:	e7fe      	b.n	8007e98 <vTaskPlaceOnEventListRestricted+0x14>
				else
					pxCurrentTCB->xDeadlineAbs = pxCurrentTCB->xDeadlineRel + xTickCount;
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), pxCurrentTCB->xDeadlineAbs );
			#endif

		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );	/*ht: DONE maybe here also I need to put value for even_item*/
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <vTaskPlaceOnEventListRestricted+0x48>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3318      	adds	r3, #24
 8007ea0:	001a      	movs	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	0011      	movs	r1, r2
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	f7fe fe71 	bl	8006b8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f000 f9c0 	bl	8008244 <prvAddCurrentTaskToDelayedList>
	}
 8007ec4:	46c0      	nop			; (mov r8, r8)
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b004      	add	sp, #16
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	2000056c 	.word	0x2000056c

08007ed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <xTaskRemoveFromEventList+0x1a>
 8007ee6:	b672      	cpsid	i
 8007ee8:	e7fe      	b.n	8007ee8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3318      	adds	r3, #24
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f7fe fea5 	bl	8006c3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ef4:	4b26      	ldr	r3, [pc, #152]	; (8007f90 <xTaskRemoveFromEventList+0xc0>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d12d      	bne.n	8007f58 <xTaskRemoveFromEventList+0x88>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	3304      	adds	r3, #4
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7fe fe9c 	bl	8006c3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f0a:	4b22      	ldr	r3, [pc, #136]	; (8007f94 <xTaskRemoveFromEventList+0xc4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d903      	bls.n	8007f1a <xTaskRemoveFromEventList+0x4a>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f16:	4b1f      	ldr	r3, [pc, #124]	; (8007f94 <xTaskRemoveFromEventList+0xc4>)
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	3301      	adds	r3, #1
 8007f20:	d104      	bne.n	8007f2c <xTaskRemoveFromEventList+0x5c>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2201      	movs	r2, #1
 8007f26:	4252      	negs	r2, r2
 8007f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f2a:	e006      	b.n	8007f3a <xTaskRemoveFromEventList+0x6a>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f30:	4b19      	ldr	r3, [pc, #100]	; (8007f98 <xTaskRemoveFromEventList+0xc8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	18d2      	adds	r2, r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f3e:	0013      	movs	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	189b      	adds	r3, r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4a15      	ldr	r2, [pc, #84]	; (8007f9c <xTaskRemoveFromEventList+0xcc>)
 8007f48:	189a      	adds	r2, r3, r2
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	0019      	movs	r1, r3
 8007f50:	0010      	movs	r0, r2
 8007f52:	f7fe fe1c 	bl	8006b8e <vListInsertEnd>
 8007f56:	e007      	b.n	8007f68 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	001a      	movs	r2, r3
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <xTaskRemoveFromEventList+0xd0>)
 8007f60:	0011      	movs	r1, r2
 8007f62:	0018      	movs	r0, r3
 8007f64:	f7fe fe13 	bl	8006b8e <vListInsertEnd>
			pxUnblockedTCB->xDeadlineAbs = portMAX_DELAY;
		else
			pxUnblockedTCB->xDeadlineAbs = pxUnblockedTCB->xDeadlineRel + xTickCount;
		if( pxUnblockedTCB->xDeadlineAbs < pxCurrentTCB->xDeadlineAbs )
	#else
		if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <xTaskRemoveFromEventList+0xd4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d905      	bls.n	8007f82 <xTaskRemoveFromEventList+0xb2>
	#endif
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f76:	2301      	movs	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <xTaskRemoveFromEventList+0xd8>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e001      	b.n	8007f86 <xTaskRemoveFromEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8007f86:	68fb      	ldr	r3, [r7, #12]
}
 8007f88:	0018      	movs	r0, r3
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	b004      	add	sp, #16
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000734 	.word	0x20000734
 8007f94:	20000714 	.word	0x20000714
 8007f98:	20000710 	.word	0x20000710
 8007f9c:	20000570 	.word	0x20000570
 8007fa0:	200006cc 	.word	0x200006cc
 8007fa4:	2000056c 	.word	0x2000056c
 8007fa8:	20000720 	.word	0x20000720

08007fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <vTaskInternalSetTimeOutState+0x20>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <vTaskInternalSetTimeOutState+0x24>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]
}
 8007fc4:	46c0      	nop			; (mov r8, r8)
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20000724 	.word	0x20000724
 8007fd0:	20000710 	.word	0x20000710

08007fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <xTaskCheckForTimeOut+0x14>
 8007fe4:	b672      	cpsid	i
 8007fe6:	e7fe      	b.n	8007fe6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <xTaskCheckForTimeOut+0x1e>
 8007fee:	b672      	cpsid	i
 8007ff0:	e7fe      	b.n	8007ff0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007ff2:	f000 fd15 	bl	8008a20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <xTaskCheckForTimeOut+0xb4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	60fb      	str	r3, [r7, #12]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8008006:	4b21      	ldr	r3, [pc, #132]	; (800808c <xTaskCheckForTimeOut+0xb8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2259      	movs	r2, #89	; 0x59
 800800c:	5c9b      	ldrb	r3, [r3, r2]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <xTaskCheckForTimeOut+0x4e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008012:	4b1e      	ldr	r3, [pc, #120]	; (800808c <xTaskCheckForTimeOut+0xb8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2259      	movs	r2, #89	; 0x59
 8008018:	2100      	movs	r1, #0
 800801a:	5499      	strb	r1, [r3, r2]
				xReturn = pdTRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e02b      	b.n	800807a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3301      	adds	r3, #1
 8008028:	d102      	bne.n	8008030 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e024      	b.n	800807a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	4b16      	ldr	r3, [pc, #88]	; (8008090 <xTaskCheckForTimeOut+0xbc>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d007      	beq.n	800804c <xTaskCheckForTimeOut+0x78>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	429a      	cmp	r2, r3
 8008044:	d302      	bcc.n	800804c <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008046:	2301      	movs	r3, #1
 8008048:	617b      	str	r3, [r7, #20]
 800804a:	e016      	b.n	800807a <xTaskCheckForTimeOut+0xa6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	429a      	cmp	r2, r3
 8008054:	d20c      	bcs.n	8008070 <xTaskCheckForTimeOut+0x9c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	1ad2      	subs	r2, r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0018      	movs	r0, r3
 8008066:	f7ff ffa1 	bl	8007fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	e004      	b.n	800807a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008076:	2301      	movs	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800807a:	f000 fce3 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 800807e:	697b      	ldr	r3, [r7, #20]
}
 8008080:	0018      	movs	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	b006      	add	sp, #24
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000710 	.word	0x20000710
 800808c:	2000056c 	.word	0x2000056c
 8008090:	20000724 	.word	0x20000724

08008094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <vTaskMissedYield+0x10>)
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000720 	.word	0x20000720

080080a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080b0:	f000 f84e 	bl	8008150 <prvCheckTasksWaitingTermination>
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			#if ( configDYNAMIC_SCHEDULING == 1 )						/*ht: there is just one ready list in dynamic*/
				if( listCURRENT_LIST_LENGTH( pxReadyTasksList ) > ( UBaseType_t ) 1 )
			#else
				if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080b4:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <prvIdleTask+0x1c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d9f9      	bls.n	80080b0 <prvIdleTask+0x8>
			#endif
			{
				taskYIELD();
 80080bc:	f000 fca0 	bl	8008a00 <vPortYield>
		prvCheckTasksWaitingTermination();
 80080c0:	e7f6      	b.n	80080b0 <prvIdleTask+0x8>
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	20000570 	.word	0x20000570

080080c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
//			vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
//		}
		vListInitialise( &xReadyTasksList );	/*ht: several pxReadyTasksLists[uxPriority] are replaced with just one list pxReadyTasksList */
		pxReadyTasksList = &xReadyTasksList;
	#else
		for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	e00c      	b.n	80080ee <prvInitialiseTaskLists+0x26>
		{
			vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	0013      	movs	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a14      	ldr	r2, [pc, #80]	; (8008130 <prvInitialiseTaskLists+0x68>)
 80080e0:	189b      	adds	r3, r3, r2
 80080e2:	0018      	movs	r0, r3
 80080e4:	f7fe fd2a 	bl	8006b3c <vListInitialise>
		for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b0e      	cmp	r3, #14
 80080f2:	d9ef      	bls.n	80080d4 <prvInitialiseTaskLists+0xc>
		}
	#endif

	vListInitialise( &xDelayedTaskList1 );
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <prvInitialiseTaskLists+0x6c>)
 80080f6:	0018      	movs	r0, r3
 80080f8:	f7fe fd20 	bl	8006b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080fc:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <prvInitialiseTaskLists+0x70>)
 80080fe:	0018      	movs	r0, r3
 8008100:	f7fe fd1c 	bl	8006b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <prvInitialiseTaskLists+0x74>)
 8008106:	0018      	movs	r0, r3
 8008108:	f7fe fd18 	bl	8006b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <prvInitialiseTaskLists+0x78>)
 800810e:	0018      	movs	r0, r3
 8008110:	f7fe fd14 	bl	8006b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <prvInitialiseTaskLists+0x7c>)
 8008116:	0018      	movs	r0, r3
 8008118:	f7fe fd10 	bl	8006b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <prvInitialiseTaskLists+0x80>)
 800811e:	4a05      	ldr	r2, [pc, #20]	; (8008134 <prvInitialiseTaskLists+0x6c>)
 8008120:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008122:	4b0a      	ldr	r3, [pc, #40]	; (800814c <prvInitialiseTaskLists+0x84>)
 8008124:	4a04      	ldr	r2, [pc, #16]	; (8008138 <prvInitialiseTaskLists+0x70>)
 8008126:	601a      	str	r2, [r3, #0]
}
 8008128:	46c0      	nop			; (mov r8, r8)
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000570 	.word	0x20000570
 8008134:	2000069c 	.word	0x2000069c
 8008138:	200006b0 	.word	0x200006b0
 800813c:	200006cc 	.word	0x200006cc
 8008140:	200006e0 	.word	0x200006e0
 8008144:	200006f8 	.word	0x200006f8
 8008148:	200006c4 	.word	0x200006c4
 800814c:	200006c8 	.word	0x200006c8

08008150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008156:	e01a      	b.n	800818e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008158:	f000 fc62 	bl	8008a20 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815c:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <prvCheckTasksWaitingTermination+0x50>)
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3304      	adds	r3, #4
 8008168:	0018      	movs	r0, r3
 800816a:	f7fe fd68 	bl	8006c3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800816e:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <prvCheckTasksWaitingTermination+0x54>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <prvCheckTasksWaitingTermination+0x54>)
 8008176:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008178:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <prvCheckTasksWaitingTermination+0x58>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <prvCheckTasksWaitingTermination+0x58>)
 8008180:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008182:	f000 fc5f 	bl	8008a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0018      	movs	r0, r3
 800818a:	f000 f80f 	bl	80081ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <prvCheckTasksWaitingTermination+0x58>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e0      	bne.n	8008158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	b002      	add	sp, #8
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200006e0 	.word	0x200006e0
 80081a4:	2000070c 	.word	0x2000070c
 80081a8:	200006f4 	.word	0x200006f4

080081ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 fd77 	bl	8008cac <vPortFree>
			vPortFree( pxTCB );
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	0018      	movs	r0, r3
 80081c2:	f000 fd73 	bl	8008cac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b002      	add	sp, #8
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <prvResetNextTaskUnblockTime+0x34>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d104      	bne.n	80081ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081e0:	4b09      	ldr	r3, [pc, #36]	; (8008208 <prvResetNextTaskUnblockTime+0x38>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	4252      	negs	r2, r2
 80081e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081e8:	e008      	b.n	80081fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ea:	4b06      	ldr	r3, [pc, #24]	; (8008204 <prvResetNextTaskUnblockTime+0x34>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <prvResetNextTaskUnblockTime+0x38>)
 80081fa:	601a      	str	r2, [r3, #0]
}
 80081fc:	46c0      	nop			; (mov r8, r8)
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200006c4 	.word	0x200006c4
 8008208:	2000072c 	.word	0x2000072c

0800820c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <xTaskGetSchedulerState+0x30>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800821a:	2301      	movs	r3, #1
 800821c:	607b      	str	r3, [r7, #4]
 800821e:	e008      	b.n	8008232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <xTaskGetSchedulerState+0x34>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008228:	2302      	movs	r3, #2
 800822a:	607b      	str	r3, [r7, #4]
 800822c:	e001      	b.n	8008232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008232:	687b      	ldr	r3, [r7, #4]
	}
 8008234:	0018      	movs	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	b002      	add	sp, #8
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000718 	.word	0x20000718
 8008240:	20000734 	.word	0x20000734

08008244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800824e:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008254:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2259      	movs	r2, #89	; 0x59
 800825a:	2100      	movs	r1, #0
 800825c:	5499      	strb	r1, [r3, r2]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825e:	4b21      	ldr	r3, [pc, #132]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3304      	adds	r3, #4
 8008264:	0018      	movs	r0, r3
 8008266:	f7fe fcea 	bl	8006c3e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3301      	adds	r3, #1
 800826e:	d10b      	bne.n	8008288 <prvAddCurrentTaskToDelayedList+0x44>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008276:	4b1b      	ldr	r3, [pc, #108]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	4b1a      	ldr	r3, [pc, #104]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f7fe fc84 	bl	8006b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008286:	e026      	b.n	80082d6 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	18d3      	adds	r3, r2, r3
 800828e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008290:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	429a      	cmp	r2, r3
 800829e:	d209      	bcs.n	80082b4 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a0:	4b12      	ldr	r3, [pc, #72]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa8>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	0019      	movs	r1, r3
 80082ac:	0010      	movs	r0, r2
 80082ae:	f7fe fc90 	bl	8006bd2 <vListInsert>
}
 80082b2:	e010      	b.n	80082d6 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b4:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <prvAddCurrentTaskToDelayedList+0xac>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3304      	adds	r3, #4
 80082be:	0019      	movs	r1, r3
 80082c0:	0010      	movs	r0, r2
 80082c2:	f7fe fc86 	bl	8006bd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d202      	bcs.n	80082d6 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80082d0:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	601a      	str	r2, [r3, #0]
}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	46bd      	mov	sp, r7
 80082da:	b004      	add	sp, #16
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	20000710 	.word	0x20000710
 80082e4:	2000056c 	.word	0x2000056c
 80082e8:	200006f8 	.word	0x200006f8
 80082ec:	200006c8 	.word	0x200006c8
 80082f0:	200006c4 	.word	0x200006c4
 80082f4:	2000072c 	.word	0x2000072c

080082f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008302:	f000 fab9 	bl	8008878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <xTimerCreateTimerTask+0x4c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00f      	beq.n	800832e <xTimerCreateTimerTask+0x36>
//												NULL,
//												( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
//												&xTimerTaskHandle,
//												portMAX_DELAY); /*ht: adding deadline param as the last one*/
//			#else
				xReturn = xTaskCreate(	prvTimerTask,
 800830e:	23c8      	movs	r3, #200	; 0xc8
 8008310:	005a      	lsls	r2, r3, #1
 8008312:	490d      	ldr	r1, [pc, #52]	; (8008348 <xTimerCreateTimerTask+0x50>)
 8008314:	480d      	ldr	r0, [pc, #52]	; (800834c <xTimerCreateTimerTask+0x54>)
 8008316:	2301      	movs	r3, #1
 8008318:	425b      	negs	r3, r3
 800831a:	9302      	str	r3, [sp, #8]
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <xTimerCreateTimerTask+0x58>)
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	2302      	movs	r3, #2
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	2300      	movs	r3, #0
 8008326:	f7ff f8ac 	bl	8007482 <xTaskCreate>
 800832a:	0003      	movs	r3, r0
 800832c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <xTimerCreateTimerTask+0x40>
 8008334:	b672      	cpsid	i
 8008336:	e7fe      	b.n	8008336 <xTimerCreateTimerTask+0x3e>
	return xReturn;
 8008338:	687b      	ldr	r3, [r7, #4]
}
 800833a:	0018      	movs	r0, r3
 800833c:	46bd      	mov	sp, r7
 800833e:	b002      	add	sp, #8
 8008340:	bd80      	pop	{r7, pc}
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	20000768 	.word	0x20000768
 8008348:	0800a1f0 	.word	0x0800a1f0
 800834c:	08008471 	.word	0x08008471
 8008350:	2000076c 	.word	0x2000076c

08008354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b08b      	sub	sp, #44	; 0x2c
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <xTimerGenericCommand+0x1c>
 800836c:	b672      	cpsid	i
 800836e:	e7fe      	b.n	800836e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008370:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <xTimerGenericCommand+0x90>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d030      	beq.n	80083da <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008378:	2414      	movs	r4, #20
 800837a:	193b      	adds	r3, r7, r4
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008380:	193b      	adds	r3, r7, r4
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008386:	193b      	adds	r3, r7, r4
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b05      	cmp	r3, #5
 8008390:	dc19      	bgt.n	80083c6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008392:	f7ff ff3b 	bl	800820c <xTaskGetSchedulerState>
 8008396:	0003      	movs	r3, r0
 8008398:	2b02      	cmp	r3, #2
 800839a:	d109      	bne.n	80083b0 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <xTimerGenericCommand+0x90>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083a2:	1939      	adds	r1, r7, r4
 80083a4:	2300      	movs	r3, #0
 80083a6:	f7fe fd16 	bl	8006dd6 <xQueueGenericSend>
 80083aa:	0003      	movs	r3, r0
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
 80083ae:	e014      	b.n	80083da <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <xTimerGenericCommand+0x90>)
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	2314      	movs	r3, #20
 80083b6:	18f9      	adds	r1, r7, r3
 80083b8:	2300      	movs	r3, #0
 80083ba:	2200      	movs	r2, #0
 80083bc:	f7fe fd0b 	bl	8006dd6 <xQueueGenericSend>
 80083c0:	0003      	movs	r3, r0
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
 80083c4:	e009      	b.n	80083da <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <xTimerGenericCommand+0x90>)
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	2314      	movs	r3, #20
 80083ce:	18f9      	adds	r1, r7, r3
 80083d0:	2300      	movs	r3, #0
 80083d2:	f7fe fdc4 	bl	8006f5e <xQueueGenericSendFromISR>
 80083d6:	0003      	movs	r3, r0
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083dc:	0018      	movs	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	b00b      	add	sp, #44	; 0x2c
 80083e2:	bd90      	pop	{r4, r7, pc}
 80083e4:	20000768 	.word	0x20000768

080083e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f2:	4b1e      	ldr	r3, [pc, #120]	; (800846c <prvProcessExpiredTimer+0x84>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3304      	adds	r3, #4
 8008400:	0018      	movs	r0, r3
 8008402:	f7fe fc1c 	bl	8006c3e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2224      	movs	r2, #36	; 0x24
 800840a:	5c9b      	ldrb	r3, [r3, r2]
 800840c:	001a      	movs	r2, r3
 800840e:	2304      	movs	r3, #4
 8008410:	4013      	ands	r3, r2
 8008412:	d019      	beq.n	8008448 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	18d1      	adds	r1, r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f8c3 	bl	80085ac <prvInsertTimerInActiveList>
 8008426:	1e03      	subs	r3, r0, #0
 8008428:	d017      	beq.n	800845a <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	2300      	movs	r3, #0
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	2100      	movs	r1, #0
 8008436:	f7ff ff8d 	bl	8008354 <xTimerGenericCommand>
 800843a:	0003      	movs	r3, r0
 800843c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <prvProcessExpiredTimer+0x72>
 8008444:	b672      	cpsid	i
 8008446:	e7fe      	b.n	8008446 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2224      	movs	r2, #36	; 0x24
 800844c:	5c9b      	ldrb	r3, [r3, r2]
 800844e:	2201      	movs	r2, #1
 8008450:	4393      	bics	r3, r2
 8008452:	b2d9      	uxtb	r1, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2224      	movs	r2, #36	; 0x24
 8008458:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	0010      	movs	r0, r2
 8008462:	4798      	blx	r3
}
 8008464:	46c0      	nop			; (mov r8, r8)
 8008466:	46bd      	mov	sp, r7
 8008468:	b004      	add	sp, #16
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000760 	.word	0x20000760

08008470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008478:	2308      	movs	r3, #8
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	0018      	movs	r0, r3
 800847e:	f000 f853 	bl	8008528 <prvGetNextExpireTime>
 8008482:	0003      	movs	r3, r0
 8008484:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	0011      	movs	r1, r2
 800848c:	0018      	movs	r0, r3
 800848e:	f000 f803 	bl	8008498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008492:	f000 f8cd 	bl	8008630 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008496:	e7ef      	b.n	8008478 <prvTimerTask+0x8>

08008498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084a2:	f7ff fb07 	bl	8007ab4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084a6:	2308      	movs	r3, #8
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 f85e 	bl	800856c <prvSampleTimeNow>
 80084b0:	0003      	movs	r3, r0
 80084b2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d12b      	bne.n	8008512 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10c      	bne.n	80084da <prvProcessTimerOrBlockTask+0x42>
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d808      	bhi.n	80084da <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80084c8:	f7ff fb00 	bl	8007acc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	0011      	movs	r1, r2
 80084d2:	0018      	movs	r0, r3
 80084d4:	f7ff ff88 	bl	80083e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084d8:	e01d      	b.n	8008516 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d008      	beq.n	80084f2 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084e0:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <prvProcessTimerOrBlockTask+0x88>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <prvProcessTimerOrBlockTask+0x56>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <prvProcessTimerOrBlockTask+0x58>
 80084ee:	2300      	movs	r3, #0
 80084f0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084f2:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <prvProcessTimerOrBlockTask+0x8c>)
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	0019      	movs	r1, r3
 8008500:	f7fe ff8c 	bl	800741c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008504:	f7ff fae2 	bl	8007acc <xTaskResumeAll>
 8008508:	1e03      	subs	r3, r0, #0
 800850a:	d104      	bne.n	8008516 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800850c:	f000 fa78 	bl	8008a00 <vPortYield>
}
 8008510:	e001      	b.n	8008516 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8008512:	f7ff fadb 	bl	8007acc <xTaskResumeAll>
}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	46bd      	mov	sp, r7
 800851a:	b004      	add	sp, #16
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	20000764 	.word	0x20000764
 8008524:	20000768 	.word	0x20000768

08008528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008530:	4b0d      	ldr	r3, [pc, #52]	; (8008568 <prvGetNextExpireTime+0x40>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <prvGetNextExpireTime+0x16>
 800853a:	2201      	movs	r2, #1
 800853c:	e000      	b.n	8008540 <prvGetNextExpireTime+0x18>
 800853e:	2200      	movs	r2, #0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d105      	bne.n	8008558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800854c:	4b06      	ldr	r3, [pc, #24]	; (8008568 <prvGetNextExpireTime+0x40>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	e001      	b.n	800855c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800855c:	68fb      	ldr	r3, [r7, #12]
}
 800855e:	0018      	movs	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	b004      	add	sp, #16
 8008564:	bd80      	pop	{r7, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	20000760 	.word	0x20000760

0800856c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008574:	f7ff fb48 	bl	8007c08 <xTaskGetTickCount>
 8008578:	0003      	movs	r3, r0
 800857a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800857c:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <prvSampleTimeNow+0x3c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	429a      	cmp	r2, r3
 8008584:	d205      	bcs.n	8008592 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8008586:	f000 f919 	bl	80087bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	e002      	b.n	8008598 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008598:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <prvSampleTimeNow+0x3c>)
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800859e:	68fb      	ldr	r3, [r7, #12]
}
 80085a0:	0018      	movs	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b004      	add	sp, #16
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000770 	.word	0x20000770

080085ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d812      	bhi.n	80085f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d302      	bcc.n	80085e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e01b      	b.n	800861e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085e6:	4b10      	ldr	r3, [pc, #64]	; (8008628 <prvInsertTimerInActiveList+0x7c>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3304      	adds	r3, #4
 80085ee:	0019      	movs	r1, r3
 80085f0:	0010      	movs	r0, r2
 80085f2:	f7fe faee 	bl	8006bd2 <vListInsert>
 80085f6:	e012      	b.n	800861e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d206      	bcs.n	800860e <prvInsertTimerInActiveList+0x62>
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d302      	bcc.n	800860e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e007      	b.n	800861e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800860e:	4b07      	ldr	r3, [pc, #28]	; (800862c <prvInsertTimerInActiveList+0x80>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3304      	adds	r3, #4
 8008616:	0019      	movs	r1, r3
 8008618:	0010      	movs	r0, r2
 800861a:	f7fe fada 	bl	8006bd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800861e:	697b      	ldr	r3, [r7, #20]
}
 8008620:	0018      	movs	r0, r3
 8008622:	46bd      	mov	sp, r7
 8008624:	b006      	add	sp, #24
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000764 	.word	0x20000764
 800862c:	20000760 	.word	0x20000760

08008630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b08d      	sub	sp, #52	; 0x34
 8008634:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008636:	e0ac      	b.n	8008792 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008638:	2208      	movs	r2, #8
 800863a:	18bb      	adds	r3, r7, r2
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	da0f      	bge.n	8008662 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008642:	18bb      	adds	r3, r7, r2
 8008644:	3304      	adds	r3, #4
 8008646:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <prvProcessReceivedCommands+0x22>
 800864e:	b672      	cpsid	i
 8008650:	e7fe      	b.n	8008650 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	6858      	ldr	r0, [r3, #4]
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	0019      	movs	r1, r3
 8008660:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008662:	2208      	movs	r2, #8
 8008664:	18bb      	adds	r3, r7, r2
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da00      	bge.n	800866e <prvProcessReceivedCommands+0x3e>
 800866c:	e090      	b.n	8008790 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800866e:	18bb      	adds	r3, r7, r2
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	3304      	adds	r3, #4
 8008680:	0018      	movs	r0, r3
 8008682:	f7fe fadc 	bl	8006c3e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	0018      	movs	r0, r3
 800868a:	f7ff ff6f 	bl	800856c <prvSampleTimeNow>
 800868e:	0003      	movs	r3, r0
 8008690:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8008692:	2308      	movs	r3, #8
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b09      	cmp	r3, #9
 800869a:	d900      	bls.n	800869e <prvProcessReceivedCommands+0x6e>
 800869c:	e079      	b.n	8008792 <prvProcessReceivedCommands+0x162>
 800869e:	009a      	lsls	r2, r3, #2
 80086a0:	4b44      	ldr	r3, [pc, #272]	; (80087b4 <prvProcessReceivedCommands+0x184>)
 80086a2:	18d3      	adds	r3, r2, r3
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	2224      	movs	r2, #36	; 0x24
 80086ac:	5c9b      	ldrb	r3, [r3, r2]
 80086ae:	2201      	movs	r2, #1
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b2d9      	uxtb	r1, r3
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	2224      	movs	r2, #36	; 0x24
 80086b8:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086ba:	2408      	movs	r4, #8
 80086bc:	193b      	adds	r3, r7, r4
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	18d1      	adds	r1, r2, r3
 80086c6:	193b      	adds	r3, r7, r4
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	6a38      	ldr	r0, [r7, #32]
 80086ce:	f7ff ff6d 	bl	80085ac <prvInsertTimerInActiveList>
 80086d2:	1e03      	subs	r3, r0, #0
 80086d4:	d05d      	beq.n	8008792 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	0010      	movs	r0, r2
 80086de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2224      	movs	r2, #36	; 0x24
 80086e4:	5c9b      	ldrb	r3, [r3, r2]
 80086e6:	001a      	movs	r2, r3
 80086e8:	2304      	movs	r3, #4
 80086ea:	4013      	ands	r3, r2
 80086ec:	d051      	beq.n	8008792 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086ee:	193b      	adds	r3, r7, r4
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	18d2      	adds	r2, r2, r3
 80086f8:	6a38      	ldr	r0, [r7, #32]
 80086fa:	2300      	movs	r3, #0
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	2300      	movs	r3, #0
 8008700:	2100      	movs	r1, #0
 8008702:	f7ff fe27 	bl	8008354 <xTimerGenericCommand>
 8008706:	0003      	movs	r3, r0
 8008708:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d140      	bne.n	8008792 <prvProcessReceivedCommands+0x162>
 8008710:	b672      	cpsid	i
 8008712:	e7fe      	b.n	8008712 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	2224      	movs	r2, #36	; 0x24
 8008718:	5c9b      	ldrb	r3, [r3, r2]
 800871a:	2201      	movs	r2, #1
 800871c:	4393      	bics	r3, r2
 800871e:	b2d9      	uxtb	r1, r3
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	2224      	movs	r2, #36	; 0x24
 8008724:	5499      	strb	r1, [r3, r2]
					break;
 8008726:	e034      	b.n	8008792 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	2224      	movs	r2, #36	; 0x24
 800872c:	5c9b      	ldrb	r3, [r3, r2]
 800872e:	2201      	movs	r2, #1
 8008730:	4313      	orrs	r3, r2
 8008732:	b2d9      	uxtb	r1, r3
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	2224      	movs	r2, #36	; 0x24
 8008738:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800873a:	2308      	movs	r3, #8
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <prvProcessReceivedCommands+0x120>
 800874c:	b672      	cpsid	i
 800874e:	e7fe      	b.n	800874e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	18d1      	adds	r1, r2, r3
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	6a38      	ldr	r0, [r7, #32]
 800875e:	f7ff ff25 	bl	80085ac <prvInsertTimerInActiveList>
					break;
 8008762:	e016      	b.n	8008792 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	2224      	movs	r2, #36	; 0x24
 8008768:	5c9b      	ldrb	r3, [r3, r2]
 800876a:	001a      	movs	r2, r3
 800876c:	2302      	movs	r3, #2
 800876e:	4013      	ands	r3, r2
 8008770:	d104      	bne.n	800877c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	0018      	movs	r0, r3
 8008776:	f000 fa99 	bl	8008cac <vPortFree>
 800877a:	e00a      	b.n	8008792 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	2224      	movs	r2, #36	; 0x24
 8008780:	5c9b      	ldrb	r3, [r3, r2]
 8008782:	2201      	movs	r2, #1
 8008784:	4393      	bics	r3, r2
 8008786:	b2d9      	uxtb	r1, r3
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	2224      	movs	r2, #36	; 0x24
 800878c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800878e:	e000      	b.n	8008792 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008790:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008792:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <prvProcessReceivedCommands+0x188>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2208      	movs	r2, #8
 8008798:	18b9      	adds	r1, r7, r2
 800879a:	2200      	movs	r2, #0
 800879c:	0018      	movs	r0, r3
 800879e:	f7fe fc52 	bl	8007046 <xQueueReceive>
 80087a2:	1e03      	subs	r3, r0, #0
 80087a4:	d000      	beq.n	80087a8 <prvProcessReceivedCommands+0x178>
 80087a6:	e747      	b.n	8008638 <prvProcessReceivedCommands+0x8>
	}
}
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	46bd      	mov	sp, r7
 80087ae:	b00b      	add	sp, #44	; 0x2c
 80087b0:	bd90      	pop	{r4, r7, pc}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	0800a278 	.word	0x0800a278
 80087b8:	20000768 	.word	0x20000768

080087bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087c2:	e041      	b.n	8008848 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087c4:	4b2a      	ldr	r3, [pc, #168]	; (8008870 <prvSwitchTimerLists+0xb4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ce:	4b28      	ldr	r3, [pc, #160]	; (8008870 <prvSwitchTimerLists+0xb4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3304      	adds	r3, #4
 80087dc:	0018      	movs	r0, r3
 80087de:	f7fe fa2e 	bl	8006c3e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	0010      	movs	r0, r2
 80087ea:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2224      	movs	r2, #36	; 0x24
 80087f0:	5c9b      	ldrb	r3, [r3, r2]
 80087f2:	001a      	movs	r2, r3
 80087f4:	2304      	movs	r3, #4
 80087f6:	4013      	ands	r3, r2
 80087f8:	d026      	beq.n	8008848 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	18d3      	adds	r3, r2, r3
 8008802:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	429a      	cmp	r2, r3
 800880a:	d90e      	bls.n	800882a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008818:	4b15      	ldr	r3, [pc, #84]	; (8008870 <prvSwitchTimerLists+0xb4>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3304      	adds	r3, #4
 8008820:	0019      	movs	r1, r3
 8008822:	0010      	movs	r0, r2
 8008824:	f7fe f9d5 	bl	8006bd2 <vListInsert>
 8008828:	e00e      	b.n	8008848 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	2300      	movs	r3, #0
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	2300      	movs	r3, #0
 8008834:	2100      	movs	r1, #0
 8008836:	f7ff fd8d 	bl	8008354 <xTimerGenericCommand>
 800883a:	0003      	movs	r3, r0
 800883c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <prvSwitchTimerLists+0x8c>
 8008844:	b672      	cpsid	i
 8008846:	e7fe      	b.n	8008846 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <prvSwitchTimerLists+0xb4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1b8      	bne.n	80087c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <prvSwitchTimerLists+0xb4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008858:	4b06      	ldr	r3, [pc, #24]	; (8008874 <prvSwitchTimerLists+0xb8>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <prvSwitchTimerLists+0xb4>)
 800885e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <prvSwitchTimerLists+0xb8>)
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	601a      	str	r2, [r3, #0]
}
 8008866:	46c0      	nop			; (mov r8, r8)
 8008868:	46bd      	mov	sp, r7
 800886a:	b006      	add	sp, #24
 800886c:	bd80      	pop	{r7, pc}
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	20000760 	.word	0x20000760
 8008874:	20000764 	.word	0x20000764

08008878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800887c:	f000 f8d0 	bl	8008a20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <prvCheckForValidListAndQueue+0x5c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d120      	bne.n	80088ca <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 8008888:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <prvCheckForValidListAndQueue+0x60>)
 800888a:	0018      	movs	r0, r3
 800888c:	f7fe f956 	bl	8006b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <prvCheckForValidListAndQueue+0x64>)
 8008892:	0018      	movs	r0, r3
 8008894:	f7fe f952 	bl	8006b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <prvCheckForValidListAndQueue+0x68>)
 800889a:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <prvCheckForValidListAndQueue+0x60>)
 800889c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <prvCheckForValidListAndQueue+0x6c>)
 80088a0:	4a0e      	ldr	r2, [pc, #56]	; (80088dc <prvCheckForValidListAndQueue+0x64>)
 80088a2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80088a4:	2200      	movs	r2, #0
 80088a6:	2110      	movs	r1, #16
 80088a8:	200a      	movs	r0, #10
 80088aa:	f7fe fa44 	bl	8006d36 <xQueueGenericCreate>
 80088ae:	0002      	movs	r2, r0
 80088b0:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <prvCheckForValidListAndQueue+0x5c>)
 80088b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <prvCheckForValidListAndQueue+0x5c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <prvCheckForValidListAndQueue+0x5c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a09      	ldr	r2, [pc, #36]	; (80088e8 <prvCheckForValidListAndQueue+0x70>)
 80088c2:	0011      	movs	r1, r2
 80088c4:	0018      	movs	r0, r3
 80088c6:	f7fe fd81 	bl	80073cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088ca:	f000 f8bb 	bl	8008a44 <vPortExitCritical>
}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000768 	.word	0x20000768
 80088d8:	20000738 	.word	0x20000738
 80088dc:	2000074c 	.word	0x2000074c
 80088e0:	20000760 	.word	0x20000760
 80088e4:	20000764 	.word	0x20000764
 80088e8:	0800a1f8 	.word	0x0800a1f8

080088ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3b04      	subs	r3, #4
 80088fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2280      	movs	r2, #128	; 0x80
 8008902:	0452      	lsls	r2, r2, #17
 8008904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3b04      	subs	r3, #4
 800890a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3b04      	subs	r3, #4
 8008916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008918:	4a08      	ldr	r2, [pc, #32]	; (800893c <pxPortInitialiseStack+0x50>)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3b14      	subs	r3, #20
 8008922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3b20      	subs	r3, #32
 800892e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008930:	68fb      	ldr	r3, [r7, #12]
}
 8008932:	0018      	movs	r0, r3
 8008934:	46bd      	mov	sp, r7
 8008936:	b004      	add	sp, #16
 8008938:	bd80      	pop	{r7, pc}
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	08008941 	.word	0x08008941

08008940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800894a:	4b08      	ldr	r3, [pc, #32]	; (800896c <prvTaskExitError+0x2c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	d001      	beq.n	8008956 <prvTaskExitError+0x16>
 8008952:	b672      	cpsid	i
 8008954:	e7fe      	b.n	8008954 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008956:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008958:	46c0      	nop			; (mov r8, r8)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0fc      	beq.n	800895a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	46bd      	mov	sp, r7
 8008966:	b002      	add	sp, #8
 8008968:	bd80      	pop	{r7, pc}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	200003c8 	.word	0x200003c8

08008970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008974:	46c0      	nop			; (mov r8, r8)
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	0000      	movs	r0, r0
 800897c:	0000      	movs	r0, r0
	...

08008980 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008980:	4a0b      	ldr	r2, [pc, #44]	; (80089b0 <pxCurrentTCBConst2>)
 8008982:	6813      	ldr	r3, [r2, #0]
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	3020      	adds	r0, #32
 8008988:	f380 8809 	msr	PSP, r0
 800898c:	2002      	movs	r0, #2
 800898e:	f380 8814 	msr	CONTROL, r0
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008998:	46ae      	mov	lr, r5
 800899a:	bc08      	pop	{r3}
 800899c:	bc04      	pop	{r2}
 800899e:	b662      	cpsie	i
 80089a0:	4718      	bx	r3
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	46c0      	nop			; (mov r8, r8)
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	46c0      	nop			; (mov r8, r8)
 80089aa:	46c0      	nop			; (mov r8, r8)
 80089ac:	46c0      	nop			; (mov r8, r8)
 80089ae:	46c0      	nop			; (mov r8, r8)

080089b0 <pxCurrentTCBConst2>:
 80089b0:	2000056c 	.word	0x2000056c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80089b4:	46c0      	nop			; (mov r8, r8)
 80089b6:	46c0      	nop			; (mov r8, r8)

080089b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089bc:	4b0e      	ldr	r3, [pc, #56]	; (80089f8 <xPortStartScheduler+0x40>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <xPortStartScheduler+0x40>)
 80089c2:	21ff      	movs	r1, #255	; 0xff
 80089c4:	0409      	lsls	r1, r1, #16
 80089c6:	430a      	orrs	r2, r1
 80089c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089ca:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <xPortStartScheduler+0x40>)
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <xPortStartScheduler+0x40>)
 80089d0:	21ff      	movs	r1, #255	; 0xff
 80089d2:	0609      	lsls	r1, r1, #24
 80089d4:	430a      	orrs	r2, r1
 80089d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089d8:	f000 f898 	bl	8008b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089dc:	4b07      	ldr	r3, [pc, #28]	; (80089fc <xPortStartScheduler+0x44>)
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80089e2:	f7ff ffcd 	bl	8008980 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089e6:	f7ff f9dd 	bl	8007da4 <vTaskSwitchContext>
	prvTaskExitError();
 80089ea:	f7ff ffa9 	bl	8008940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	0018      	movs	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	e000ed20 	.word	0xe000ed20
 80089fc:	200003c8 	.word	0x200003c8

08008a00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <vPortYield+0x1c>)
 8008a06:	2280      	movs	r2, #128	; 0x80
 8008a08:	0552      	lsls	r2, r2, #21
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008a0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008a10:	f3bf 8f6f 	isb	sy
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8008a24:	b672      	cpsid	i
	uxCriticalNesting++;
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <vPortEnterCritical+0x20>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <vPortEnterCritical+0x20>)
 8008a2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008a30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008a34:	f3bf 8f6f 	isb	sy
}
 8008a38:	46c0      	nop			; (mov r8, r8)
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	46c0      	nop			; (mov r8, r8)
 8008a40:	200003c8 	.word	0x200003c8

08008a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a48:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <vPortExitCritical+0x2c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <vPortExitCritical+0x10>
 8008a50:	b672      	cpsid	i
 8008a52:	e7fe      	b.n	8008a52 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <vPortExitCritical+0x2c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	1e5a      	subs	r2, r3, #1
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <vPortExitCritical+0x2c>)
 8008a5c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008a5e:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <vPortExitCritical+0x2c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d100      	bne.n	8008a68 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8008a66:	b662      	cpsie	i
	}
}
 8008a68:	46c0      	nop			; (mov r8, r8)
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	200003c8 	.word	0x200003c8

08008a74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008a74:	f3ef 8010 	mrs	r0, PRIMASK
 8008a78:	b672      	cpsid	i
 8008a7a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008a7c:	46c0      	nop			; (mov r8, r8)
 8008a7e:	0018      	movs	r0, r3

08008a80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008a80:	f380 8810 	msr	PRIMASK, r0
 8008a84:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008a86:	46c0      	nop			; (mov r8, r8)
	...

08008a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a90:	f3ef 8009 	mrs	r0, PSP
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <pxCurrentTCBConst>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	3820      	subs	r0, #32
 8008a9a:	6010      	str	r0, [r2, #0]
 8008a9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008a9e:	4644      	mov	r4, r8
 8008aa0:	464d      	mov	r5, r9
 8008aa2:	4656      	mov	r6, sl
 8008aa4:	465f      	mov	r7, fp
 8008aa6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008aa8:	b508      	push	{r3, lr}
 8008aaa:	b672      	cpsid	i
 8008aac:	f7ff f97a 	bl	8007da4 <vTaskSwitchContext>
 8008ab0:	b662      	cpsie	i
 8008ab2:	bc0c      	pop	{r2, r3}
 8008ab4:	6811      	ldr	r1, [r2, #0]
 8008ab6:	6808      	ldr	r0, [r1, #0]
 8008ab8:	3010      	adds	r0, #16
 8008aba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008abc:	46a0      	mov	r8, r4
 8008abe:	46a9      	mov	r9, r5
 8008ac0:	46b2      	mov	sl, r6
 8008ac2:	46bb      	mov	fp, r7
 8008ac4:	f380 8809 	msr	PSP, r0
 8008ac8:	3820      	subs	r0, #32
 8008aca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008acc:	4718      	bx	r3
 8008ace:	46c0      	nop			; (mov r8, r8)

08008ad0 <pxCurrentTCBConst>:
 8008ad0:	2000056c 	.word	0x2000056c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008ad4:	46c0      	nop			; (mov r8, r8)
 8008ad6:	46c0      	nop			; (mov r8, r8)

08008ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ade:	f7ff ffc9 	bl	8008a74 <ulSetInterruptMaskFromISR>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ae6:	f7ff f89d 	bl	8007c24 <xTaskIncrementTick>
 8008aea:	1e03      	subs	r3, r0, #0
 8008aec:	d003      	beq.n	8008af6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aee:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <xPortSysTickHandler+0x30>)
 8008af0:	2280      	movs	r2, #128	; 0x80
 8008af2:	0552      	lsls	r2, r2, #21
 8008af4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff ffc1 	bl	8008a80 <vClearInterruptMaskFromISR>
}
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	46bd      	mov	sp, r7
 8008b02:	b002      	add	sp, #8
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vPortSetupTimerInterrupt+0x34>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b16:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <vPortSetupTimerInterrupt+0x38>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <vPortSetupTimerInterrupt+0x3c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	490a      	ldr	r1, [pc, #40]	; (8008b4c <vPortSetupTimerInterrupt+0x40>)
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7f7 fafa 	bl	800011c <__udivsi3>
 8008b28:	0003      	movs	r3, r0
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <vPortSetupTimerInterrupt+0x44>)
 8008b2e:	3a01      	subs	r2, #1
 8008b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008b32:	4b03      	ldr	r3, [pc, #12]	; (8008b40 <vPortSetupTimerInterrupt+0x34>)
 8008b34:	2207      	movs	r2, #7
 8008b36:	601a      	str	r2, [r3, #0]
}
 8008b38:	46c0      	nop			; (mov r8, r8)
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	e000e010 	.word	0xe000e010
 8008b44:	e000e018 	.word	0xe000e018
 8008b48:	200003bc 	.word	0x200003bc
 8008b4c:	00002710 	.word	0x00002710
 8008b50:	e000e014 	.word	0xe000e014

08008b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008b60:	f7fe ffa8 	bl	8007ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b64:	4b4b      	ldr	r3, [pc, #300]	; (8008c94 <pvPortMalloc+0x140>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b6c:	f000 f8ec 	bl	8008d48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b70:	4b49      	ldr	r3, [pc, #292]	; (8008c98 <pvPortMalloc+0x144>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4013      	ands	r3, r2
 8008b78:	d000      	beq.n	8008b7c <pvPortMalloc+0x28>
 8008b7a:	e07e      	b.n	8008c7a <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d012      	beq.n	8008ba8 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008b82:	2208      	movs	r2, #8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	4013      	ands	r3, r2
 8008b90:	d00a      	beq.n	8008ba8 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2207      	movs	r2, #7
 8008b96:	4393      	bics	r3, r2
 8008b98:	3308      	adds	r3, #8
 8008b9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2207      	movs	r2, #7
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	d001      	beq.n	8008ba8 <pvPortMalloc+0x54>
 8008ba4:	b672      	cpsid	i
 8008ba6:	e7fe      	b.n	8008ba6 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d065      	beq.n	8008c7a <pvPortMalloc+0x126>
 8008bae:	4b3b      	ldr	r3, [pc, #236]	; (8008c9c <pvPortMalloc+0x148>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d860      	bhi.n	8008c7a <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bb8:	4b39      	ldr	r3, [pc, #228]	; (8008ca0 <pvPortMalloc+0x14c>)
 8008bba:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008bbc:	4b38      	ldr	r3, [pc, #224]	; (8008ca0 <pvPortMalloc+0x14c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc2:	e004      	b.n	8008bce <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <pvPortMalloc+0x8c>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1f1      	bne.n	8008bc4 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008be0:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <pvPortMalloc+0x140>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d047      	beq.n	8008c7a <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2208      	movs	r2, #8
 8008bf0:	189b      	adds	r3, r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	2308      	movs	r3, #8
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d916      	bls.n	8008c3a <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2207      	movs	r2, #7
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d001      	beq.n	8008c20 <pvPortMalloc+0xcc>
 8008c1c:	b672      	cpsid	i
 8008c1e:	e7fe      	b.n	8008c1e <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	1ad2      	subs	r2, r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 f8e7 	bl	8008e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c3a:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <pvPortMalloc+0x148>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	1ad2      	subs	r2, r2, r3
 8008c44:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <pvPortMalloc+0x148>)
 8008c46:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c48:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <pvPortMalloc+0x148>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <pvPortMalloc+0x150>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d203      	bcs.n	8008c5c <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c54:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <pvPortMalloc+0x148>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <pvPortMalloc+0x150>)
 8008c5a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	4b0d      	ldr	r3, [pc, #52]	; (8008c98 <pvPortMalloc+0x144>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	431a      	orrs	r2, r3
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <pvPortMalloc+0x154>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <pvPortMalloc+0x154>)
 8008c78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c7a:	f7fe ff27 	bl	8007acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2207      	movs	r2, #7
 8008c82:	4013      	ands	r3, r2
 8008c84:	d001      	beq.n	8008c8a <pvPortMalloc+0x136>
 8008c86:	b672      	cpsid	i
 8008c88:	e7fe      	b.n	8008c88 <pvPortMalloc+0x134>
	return pvReturn;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
}
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	b006      	add	sp, #24
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	2000847c 	.word	0x2000847c
 8008c98:	20008490 	.word	0x20008490
 8008c9c:	20008480 	.word	0x20008480
 8008ca0:	20008474 	.word	0x20008474
 8008ca4:	20008484 	.word	0x20008484
 8008ca8:	20008488 	.word	0x20008488

08008cac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d03a      	beq.n	8008d34 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	425b      	negs	r3, r3
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	18d3      	adds	r3, r2, r3
 8008cc6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <vPortFree+0x90>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d101      	bne.n	8008cdc <vPortFree+0x30>
 8008cd8:	b672      	cpsid	i
 8008cda:	e7fe      	b.n	8008cda <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <vPortFree+0x3c>
 8008ce4:	b672      	cpsid	i
 8008ce6:	e7fe      	b.n	8008ce6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <vPortFree+0x90>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	d01f      	beq.n	8008d34 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d11b      	bne.n	8008d34 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	4b0e      	ldr	r3, [pc, #56]	; (8008d3c <vPortFree+0x90>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	43db      	mvns	r3, r3
 8008d06:	401a      	ands	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d0c:	f7fe fed2 	bl	8007ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <vPortFree+0x94>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	18d2      	adds	r2, r2, r3
 8008d1a:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <vPortFree+0x94>)
 8008d1c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	0018      	movs	r0, r3
 8008d22:	f000 f871 	bl	8008e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d26:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <vPortFree+0x98>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <vPortFree+0x98>)
 8008d2e:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8008d30:	f7fe fecc 	bl	8007acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d34:	46c0      	nop			; (mov r8, r8)
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b004      	add	sp, #16
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20008490 	.word	0x20008490
 8008d40:	20008480 	.word	0x20008480
 8008d44:	2000848c 	.word	0x2000848c

08008d48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d4e:	23fa      	movs	r3, #250	; 0xfa
 8008d50:	01db      	lsls	r3, r3, #7
 8008d52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d54:	4b26      	ldr	r3, [pc, #152]	; (8008df0 <prvHeapInit+0xa8>)
 8008d56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2207      	movs	r2, #7
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	d00c      	beq.n	8008d7a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3307      	adds	r3, #7
 8008d64:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2207      	movs	r2, #7
 8008d6a:	4393      	bics	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <prvHeapInit+0xa8>)
 8008d76:	18d3      	adds	r3, r2, r3
 8008d78:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	; (8008df4 <prvHeapInit+0xac>)
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d84:	4b1b      	ldr	r3, [pc, #108]	; (8008df4 <prvHeapInit+0xac>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	18d3      	adds	r3, r2, r3
 8008d90:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d92:	2208      	movs	r2, #8
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	1a9b      	subs	r3, r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2207      	movs	r2, #7
 8008d9e:	4393      	bics	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <prvHeapInit+0xb0>)
 8008da6:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008da8:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <prvHeapInit+0xb0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <prvHeapInit+0xb0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	1ad2      	subs	r2, r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvHeapInit+0xb0>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <prvHeapInit+0xb4>)
 8008dd4:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <prvHeapInit+0xb8>)
 8008ddc:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <prvHeapInit+0xbc>)
 8008de0:	2280      	movs	r2, #128	; 0x80
 8008de2:	0612      	lsls	r2, r2, #24
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	46bd      	mov	sp, r7
 8008dea:	b004      	add	sp, #16
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	46c0      	nop			; (mov r8, r8)
 8008df0:	20000774 	.word	0x20000774
 8008df4:	20008474 	.word	0x20008474
 8008df8:	2000847c 	.word	0x2000847c
 8008dfc:	20008484 	.word	0x20008484
 8008e00:	20008480 	.word	0x20008480
 8008e04:	20008490 	.word	0x20008490

08008e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e10:	4b27      	ldr	r3, [pc, #156]	; (8008eb0 <prvInsertBlockIntoFreeList+0xa8>)
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e002      	b.n	8008e1c <prvInsertBlockIntoFreeList+0x14>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d8f7      	bhi.n	8008e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	18d3      	adds	r3, r2, r3
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d108      	bne.n	8008e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	18d2      	adds	r2, r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	18d2      	adds	r2, r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d118      	bne.n	8008e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <prvInsertBlockIntoFreeList+0xac>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d00d      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	18d2      	adds	r2, r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e008      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <prvInsertBlockIntoFreeList+0xac>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e003      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d002      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	b004      	add	sp, #16
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	46c0      	nop			; (mov r8, r8)
 8008eb0:	20008474 	.word	0x20008474
 8008eb4:	2000847c 	.word	0x2000847c

08008eb8 <__errno>:
 8008eb8:	4b01      	ldr	r3, [pc, #4]	; (8008ec0 <__errno+0x8>)
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	4770      	bx	lr
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	200003cc 	.word	0x200003cc

08008ec4 <__libc_init_array>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	2600      	movs	r6, #0
 8008ec8:	4d0c      	ldr	r5, [pc, #48]	; (8008efc <__libc_init_array+0x38>)
 8008eca:	4c0d      	ldr	r4, [pc, #52]	; (8008f00 <__libc_init_array+0x3c>)
 8008ecc:	1b64      	subs	r4, r4, r5
 8008ece:	10a4      	asrs	r4, r4, #2
 8008ed0:	42a6      	cmp	r6, r4
 8008ed2:	d109      	bne.n	8008ee8 <__libc_init_array+0x24>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	f001 f845 	bl	8009f64 <_init>
 8008eda:	4d0a      	ldr	r5, [pc, #40]	; (8008f04 <__libc_init_array+0x40>)
 8008edc:	4c0a      	ldr	r4, [pc, #40]	; (8008f08 <__libc_init_array+0x44>)
 8008ede:	1b64      	subs	r4, r4, r5
 8008ee0:	10a4      	asrs	r4, r4, #2
 8008ee2:	42a6      	cmp	r6, r4
 8008ee4:	d105      	bne.n	8008ef2 <__libc_init_array+0x2e>
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	00b3      	lsls	r3, r6, #2
 8008eea:	58eb      	ldr	r3, [r5, r3]
 8008eec:	4798      	blx	r3
 8008eee:	3601      	adds	r6, #1
 8008ef0:	e7ee      	b.n	8008ed0 <__libc_init_array+0xc>
 8008ef2:	00b3      	lsls	r3, r6, #2
 8008ef4:	58eb      	ldr	r3, [r5, r3]
 8008ef6:	4798      	blx	r3
 8008ef8:	3601      	adds	r6, #1
 8008efa:	e7f2      	b.n	8008ee2 <__libc_init_array+0x1e>
 8008efc:	0800a338 	.word	0x0800a338
 8008f00:	0800a338 	.word	0x0800a338
 8008f04:	0800a338 	.word	0x0800a338
 8008f08:	0800a33c 	.word	0x0800a33c

08008f0c <memcpy>:
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d100      	bne.n	8008f16 <memcpy+0xa>
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	5ccc      	ldrb	r4, [r1, r3]
 8008f18:	54c4      	strb	r4, [r0, r3]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	e7f8      	b.n	8008f10 <memcpy+0x4>

08008f1e <memset>:
 8008f1e:	0003      	movs	r3, r0
 8008f20:	1882      	adds	r2, r0, r2
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d100      	bne.n	8008f28 <memset+0xa>
 8008f26:	4770      	bx	lr
 8008f28:	7019      	strb	r1, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	e7f9      	b.n	8008f22 <memset+0x4>
	...

08008f30 <iprintf>:
 8008f30:	b40f      	push	{r0, r1, r2, r3}
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <iprintf+0x30>)
 8008f34:	b513      	push	{r0, r1, r4, lr}
 8008f36:	681c      	ldr	r4, [r3, #0]
 8008f38:	2c00      	cmp	r4, #0
 8008f3a:	d005      	beq.n	8008f48 <iprintf+0x18>
 8008f3c:	69a3      	ldr	r3, [r4, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <iprintf+0x18>
 8008f42:	0020      	movs	r0, r4
 8008f44:	f000 fa86 	bl	8009454 <__sinit>
 8008f48:	ab05      	add	r3, sp, #20
 8008f4a:	0020      	movs	r0, r4
 8008f4c:	9a04      	ldr	r2, [sp, #16]
 8008f4e:	68a1      	ldr	r1, [r4, #8]
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	f000 fc5f 	bl	8009814 <_vfiprintf_r>
 8008f56:	bc16      	pop	{r1, r2, r4}
 8008f58:	bc08      	pop	{r3}
 8008f5a:	b004      	add	sp, #16
 8008f5c:	4718      	bx	r3
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	200003cc 	.word	0x200003cc

08008f64 <_puts_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	0005      	movs	r5, r0
 8008f68:	000e      	movs	r6, r1
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d004      	beq.n	8008f78 <_puts_r+0x14>
 8008f6e:	6983      	ldr	r3, [r0, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <_puts_r+0x14>
 8008f74:	f000 fa6e 	bl	8009454 <__sinit>
 8008f78:	69ab      	ldr	r3, [r5, #24]
 8008f7a:	68ac      	ldr	r4, [r5, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <_puts_r+0x22>
 8008f80:	0028      	movs	r0, r5
 8008f82:	f000 fa67 	bl	8009454 <__sinit>
 8008f86:	4b2d      	ldr	r3, [pc, #180]	; (800903c <_puts_r+0xd8>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d122      	bne.n	8008fd2 <_puts_r+0x6e>
 8008f8c:	686c      	ldr	r4, [r5, #4]
 8008f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f90:	07db      	lsls	r3, r3, #31
 8008f92:	d405      	bmi.n	8008fa0 <_puts_r+0x3c>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	059b      	lsls	r3, r3, #22
 8008f98:	d402      	bmi.n	8008fa0 <_puts_r+0x3c>
 8008f9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9c:	f000 fafb 	bl	8009596 <__retarget_lock_acquire_recursive>
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	071b      	lsls	r3, r3, #28
 8008fa4:	d502      	bpl.n	8008fac <_puts_r+0x48>
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d129      	bne.n	8009000 <_puts_r+0x9c>
 8008fac:	0021      	movs	r1, r4
 8008fae:	0028      	movs	r0, r5
 8008fb0:	f000 f8aa 	bl	8009108 <__swsetup_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d023      	beq.n	8009000 <_puts_r+0x9c>
 8008fb8:	2501      	movs	r5, #1
 8008fba:	426d      	negs	r5, r5
 8008fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fbe:	07db      	lsls	r3, r3, #31
 8008fc0:	d405      	bmi.n	8008fce <_puts_r+0x6a>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	059b      	lsls	r3, r3, #22
 8008fc6:	d402      	bmi.n	8008fce <_puts_r+0x6a>
 8008fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fca:	f000 fae5 	bl	8009598 <__retarget_lock_release_recursive>
 8008fce:	0028      	movs	r0, r5
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <_puts_r+0xdc>)
 8008fd4:	429c      	cmp	r4, r3
 8008fd6:	d101      	bne.n	8008fdc <_puts_r+0x78>
 8008fd8:	68ac      	ldr	r4, [r5, #8]
 8008fda:	e7d8      	b.n	8008f8e <_puts_r+0x2a>
 8008fdc:	4b19      	ldr	r3, [pc, #100]	; (8009044 <_puts_r+0xe0>)
 8008fde:	429c      	cmp	r4, r3
 8008fe0:	d1d5      	bne.n	8008f8e <_puts_r+0x2a>
 8008fe2:	68ec      	ldr	r4, [r5, #12]
 8008fe4:	e7d3      	b.n	8008f8e <_puts_r+0x2a>
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	60a3      	str	r3, [r4, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	da04      	bge.n	8008ff8 <_puts_r+0x94>
 8008fee:	69a2      	ldr	r2, [r4, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	dc16      	bgt.n	8009022 <_puts_r+0xbe>
 8008ff4:	290a      	cmp	r1, #10
 8008ff6:	d014      	beq.n	8009022 <_puts_r+0xbe>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	6022      	str	r2, [r4, #0]
 8008ffe:	7019      	strb	r1, [r3, #0]
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	7831      	ldrb	r1, [r6, #0]
 8009004:	3b01      	subs	r3, #1
 8009006:	2900      	cmp	r1, #0
 8009008:	d1ed      	bne.n	8008fe6 <_puts_r+0x82>
 800900a:	60a3      	str	r3, [r4, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	da0f      	bge.n	8009030 <_puts_r+0xcc>
 8009010:	0028      	movs	r0, r5
 8009012:	0022      	movs	r2, r4
 8009014:	310a      	adds	r1, #10
 8009016:	f000 f821 	bl	800905c <__swbuf_r>
 800901a:	250a      	movs	r5, #10
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d1cd      	bne.n	8008fbc <_puts_r+0x58>
 8009020:	e7ca      	b.n	8008fb8 <_puts_r+0x54>
 8009022:	0022      	movs	r2, r4
 8009024:	0028      	movs	r0, r5
 8009026:	f000 f819 	bl	800905c <__swbuf_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d1e8      	bne.n	8009000 <_puts_r+0x9c>
 800902e:	e7c3      	b.n	8008fb8 <_puts_r+0x54>
 8009030:	250a      	movs	r5, #10
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	6022      	str	r2, [r4, #0]
 8009038:	701d      	strb	r5, [r3, #0]
 800903a:	e7bf      	b.n	8008fbc <_puts_r+0x58>
 800903c:	0800a2c4 	.word	0x0800a2c4
 8009040:	0800a2e4 	.word	0x0800a2e4
 8009044:	0800a2a4 	.word	0x0800a2a4

08009048 <puts>:
 8009048:	b510      	push	{r4, lr}
 800904a:	4b03      	ldr	r3, [pc, #12]	; (8009058 <puts+0x10>)
 800904c:	0001      	movs	r1, r0
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	f7ff ff88 	bl	8008f64 <_puts_r>
 8009054:	bd10      	pop	{r4, pc}
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	200003cc 	.word	0x200003cc

0800905c <__swbuf_r>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	0005      	movs	r5, r0
 8009060:	000e      	movs	r6, r1
 8009062:	0014      	movs	r4, r2
 8009064:	2800      	cmp	r0, #0
 8009066:	d004      	beq.n	8009072 <__swbuf_r+0x16>
 8009068:	6983      	ldr	r3, [r0, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <__swbuf_r+0x16>
 800906e:	f000 f9f1 	bl	8009454 <__sinit>
 8009072:	4b22      	ldr	r3, [pc, #136]	; (80090fc <__swbuf_r+0xa0>)
 8009074:	429c      	cmp	r4, r3
 8009076:	d12e      	bne.n	80090d6 <__swbuf_r+0x7a>
 8009078:	686c      	ldr	r4, [r5, #4]
 800907a:	69a3      	ldr	r3, [r4, #24]
 800907c:	60a3      	str	r3, [r4, #8]
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	071b      	lsls	r3, r3, #28
 8009082:	d532      	bpl.n	80090ea <__swbuf_r+0x8e>
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d02f      	beq.n	80090ea <__swbuf_r+0x8e>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	6922      	ldr	r2, [r4, #16]
 800908e:	b2f7      	uxtb	r7, r6
 8009090:	1a98      	subs	r0, r3, r2
 8009092:	6963      	ldr	r3, [r4, #20]
 8009094:	b2f6      	uxtb	r6, r6
 8009096:	4283      	cmp	r3, r0
 8009098:	dc05      	bgt.n	80090a6 <__swbuf_r+0x4a>
 800909a:	0021      	movs	r1, r4
 800909c:	0028      	movs	r0, r5
 800909e:	f000 f937 	bl	8009310 <_fflush_r>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d127      	bne.n	80090f6 <__swbuf_r+0x9a>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	3001      	adds	r0, #1
 80090aa:	3b01      	subs	r3, #1
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	6022      	str	r2, [r4, #0]
 80090b4:	701f      	strb	r7, [r3, #0]
 80090b6:	6963      	ldr	r3, [r4, #20]
 80090b8:	4283      	cmp	r3, r0
 80090ba:	d004      	beq.n	80090c6 <__swbuf_r+0x6a>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	07db      	lsls	r3, r3, #31
 80090c0:	d507      	bpl.n	80090d2 <__swbuf_r+0x76>
 80090c2:	2e0a      	cmp	r6, #10
 80090c4:	d105      	bne.n	80090d2 <__swbuf_r+0x76>
 80090c6:	0021      	movs	r1, r4
 80090c8:	0028      	movs	r0, r5
 80090ca:	f000 f921 	bl	8009310 <_fflush_r>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d111      	bne.n	80090f6 <__swbuf_r+0x9a>
 80090d2:	0030      	movs	r0, r6
 80090d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d6:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <__swbuf_r+0xa4>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	d101      	bne.n	80090e0 <__swbuf_r+0x84>
 80090dc:	68ac      	ldr	r4, [r5, #8]
 80090de:	e7cc      	b.n	800907a <__swbuf_r+0x1e>
 80090e0:	4b08      	ldr	r3, [pc, #32]	; (8009104 <__swbuf_r+0xa8>)
 80090e2:	429c      	cmp	r4, r3
 80090e4:	d1c9      	bne.n	800907a <__swbuf_r+0x1e>
 80090e6:	68ec      	ldr	r4, [r5, #12]
 80090e8:	e7c7      	b.n	800907a <__swbuf_r+0x1e>
 80090ea:	0021      	movs	r1, r4
 80090ec:	0028      	movs	r0, r5
 80090ee:	f000 f80b 	bl	8009108 <__swsetup_r>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d0c9      	beq.n	800908a <__swbuf_r+0x2e>
 80090f6:	2601      	movs	r6, #1
 80090f8:	4276      	negs	r6, r6
 80090fa:	e7ea      	b.n	80090d2 <__swbuf_r+0x76>
 80090fc:	0800a2c4 	.word	0x0800a2c4
 8009100:	0800a2e4 	.word	0x0800a2e4
 8009104:	0800a2a4 	.word	0x0800a2a4

08009108 <__swsetup_r>:
 8009108:	4b37      	ldr	r3, [pc, #220]	; (80091e8 <__swsetup_r+0xe0>)
 800910a:	b570      	push	{r4, r5, r6, lr}
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	0006      	movs	r6, r0
 8009110:	000c      	movs	r4, r1
 8009112:	2d00      	cmp	r5, #0
 8009114:	d005      	beq.n	8009122 <__swsetup_r+0x1a>
 8009116:	69ab      	ldr	r3, [r5, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <__swsetup_r+0x1a>
 800911c:	0028      	movs	r0, r5
 800911e:	f000 f999 	bl	8009454 <__sinit>
 8009122:	4b32      	ldr	r3, [pc, #200]	; (80091ec <__swsetup_r+0xe4>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d10f      	bne.n	8009148 <__swsetup_r+0x40>
 8009128:	686c      	ldr	r4, [r5, #4]
 800912a:	230c      	movs	r3, #12
 800912c:	5ee2      	ldrsh	r2, [r4, r3]
 800912e:	b293      	uxth	r3, r2
 8009130:	0711      	lsls	r1, r2, #28
 8009132:	d42d      	bmi.n	8009190 <__swsetup_r+0x88>
 8009134:	06d9      	lsls	r1, r3, #27
 8009136:	d411      	bmi.n	800915c <__swsetup_r+0x54>
 8009138:	2309      	movs	r3, #9
 800913a:	2001      	movs	r0, #1
 800913c:	6033      	str	r3, [r6, #0]
 800913e:	3337      	adds	r3, #55	; 0x37
 8009140:	4313      	orrs	r3, r2
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	4240      	negs	r0, r0
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	4b29      	ldr	r3, [pc, #164]	; (80091f0 <__swsetup_r+0xe8>)
 800914a:	429c      	cmp	r4, r3
 800914c:	d101      	bne.n	8009152 <__swsetup_r+0x4a>
 800914e:	68ac      	ldr	r4, [r5, #8]
 8009150:	e7eb      	b.n	800912a <__swsetup_r+0x22>
 8009152:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <__swsetup_r+0xec>)
 8009154:	429c      	cmp	r4, r3
 8009156:	d1e8      	bne.n	800912a <__swsetup_r+0x22>
 8009158:	68ec      	ldr	r4, [r5, #12]
 800915a:	e7e6      	b.n	800912a <__swsetup_r+0x22>
 800915c:	075b      	lsls	r3, r3, #29
 800915e:	d513      	bpl.n	8009188 <__swsetup_r+0x80>
 8009160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009162:	2900      	cmp	r1, #0
 8009164:	d008      	beq.n	8009178 <__swsetup_r+0x70>
 8009166:	0023      	movs	r3, r4
 8009168:	3344      	adds	r3, #68	; 0x44
 800916a:	4299      	cmp	r1, r3
 800916c:	d002      	beq.n	8009174 <__swsetup_r+0x6c>
 800916e:	0030      	movs	r0, r6
 8009170:	f000 fa80 	bl	8009674 <_free_r>
 8009174:	2300      	movs	r3, #0
 8009176:	6363      	str	r3, [r4, #52]	; 0x34
 8009178:	2224      	movs	r2, #36	; 0x24
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	4393      	bics	r3, r2
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	2300      	movs	r3, #0
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	2308      	movs	r3, #8
 800918a:	89a2      	ldrh	r2, [r4, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	6923      	ldr	r3, [r4, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <__swsetup_r+0xa6>
 8009196:	21a0      	movs	r1, #160	; 0xa0
 8009198:	2280      	movs	r2, #128	; 0x80
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	0089      	lsls	r1, r1, #2
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	400b      	ands	r3, r1
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d003      	beq.n	80091ae <__swsetup_r+0xa6>
 80091a6:	0021      	movs	r1, r4
 80091a8:	0030      	movs	r0, r6
 80091aa:	f000 fa1f 	bl	80095ec <__smakebuf_r>
 80091ae:	220c      	movs	r2, #12
 80091b0:	5ea3      	ldrsh	r3, [r4, r2]
 80091b2:	2001      	movs	r0, #1
 80091b4:	001a      	movs	r2, r3
 80091b6:	b299      	uxth	r1, r3
 80091b8:	4002      	ands	r2, r0
 80091ba:	4203      	tst	r3, r0
 80091bc:	d00f      	beq.n	80091de <__swsetup_r+0xd6>
 80091be:	2200      	movs	r2, #0
 80091c0:	60a2      	str	r2, [r4, #8]
 80091c2:	6962      	ldr	r2, [r4, #20]
 80091c4:	4252      	negs	r2, r2
 80091c6:	61a2      	str	r2, [r4, #24]
 80091c8:	2000      	movs	r0, #0
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	4282      	cmp	r2, r0
 80091ce:	d1ba      	bne.n	8009146 <__swsetup_r+0x3e>
 80091d0:	060a      	lsls	r2, r1, #24
 80091d2:	d5b8      	bpl.n	8009146 <__swsetup_r+0x3e>
 80091d4:	2240      	movs	r2, #64	; 0x40
 80091d6:	4313      	orrs	r3, r2
 80091d8:	81a3      	strh	r3, [r4, #12]
 80091da:	3801      	subs	r0, #1
 80091dc:	e7b3      	b.n	8009146 <__swsetup_r+0x3e>
 80091de:	0788      	lsls	r0, r1, #30
 80091e0:	d400      	bmi.n	80091e4 <__swsetup_r+0xdc>
 80091e2:	6962      	ldr	r2, [r4, #20]
 80091e4:	60a2      	str	r2, [r4, #8]
 80091e6:	e7ef      	b.n	80091c8 <__swsetup_r+0xc0>
 80091e8:	200003cc 	.word	0x200003cc
 80091ec:	0800a2c4 	.word	0x0800a2c4
 80091f0:	0800a2e4 	.word	0x0800a2e4
 80091f4:	0800a2a4 	.word	0x0800a2a4

080091f8 <__sflush_r>:
 80091f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091fa:	898b      	ldrh	r3, [r1, #12]
 80091fc:	0005      	movs	r5, r0
 80091fe:	000c      	movs	r4, r1
 8009200:	071a      	lsls	r2, r3, #28
 8009202:	d45f      	bmi.n	80092c4 <__sflush_r+0xcc>
 8009204:	684a      	ldr	r2, [r1, #4]
 8009206:	2a00      	cmp	r2, #0
 8009208:	dc04      	bgt.n	8009214 <__sflush_r+0x1c>
 800920a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800920c:	2a00      	cmp	r2, #0
 800920e:	dc01      	bgt.n	8009214 <__sflush_r+0x1c>
 8009210:	2000      	movs	r0, #0
 8009212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009214:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009216:	2f00      	cmp	r7, #0
 8009218:	d0fa      	beq.n	8009210 <__sflush_r+0x18>
 800921a:	2200      	movs	r2, #0
 800921c:	2180      	movs	r1, #128	; 0x80
 800921e:	682e      	ldr	r6, [r5, #0]
 8009220:	602a      	str	r2, [r5, #0]
 8009222:	001a      	movs	r2, r3
 8009224:	0149      	lsls	r1, r1, #5
 8009226:	400a      	ands	r2, r1
 8009228:	420b      	tst	r3, r1
 800922a:	d034      	beq.n	8009296 <__sflush_r+0x9e>
 800922c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	075b      	lsls	r3, r3, #29
 8009232:	d506      	bpl.n	8009242 <__sflush_r+0x4a>
 8009234:	6863      	ldr	r3, [r4, #4]
 8009236:	1ac0      	subs	r0, r0, r3
 8009238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <__sflush_r+0x4a>
 800923e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009240:	1ac0      	subs	r0, r0, r3
 8009242:	0002      	movs	r2, r0
 8009244:	6a21      	ldr	r1, [r4, #32]
 8009246:	2300      	movs	r3, #0
 8009248:	0028      	movs	r0, r5
 800924a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800924c:	47b8      	blx	r7
 800924e:	89a1      	ldrh	r1, [r4, #12]
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d106      	bne.n	8009262 <__sflush_r+0x6a>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	2b1d      	cmp	r3, #29
 8009258:	d831      	bhi.n	80092be <__sflush_r+0xc6>
 800925a:	4a2c      	ldr	r2, [pc, #176]	; (800930c <__sflush_r+0x114>)
 800925c:	40da      	lsrs	r2, r3
 800925e:	07d3      	lsls	r3, r2, #31
 8009260:	d52d      	bpl.n	80092be <__sflush_r+0xc6>
 8009262:	2300      	movs	r3, #0
 8009264:	6063      	str	r3, [r4, #4]
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	04cb      	lsls	r3, r1, #19
 800926c:	d505      	bpl.n	800927a <__sflush_r+0x82>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d102      	bne.n	8009278 <__sflush_r+0x80>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d100      	bne.n	800927a <__sflush_r+0x82>
 8009278:	6560      	str	r0, [r4, #84]	; 0x54
 800927a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927c:	602e      	str	r6, [r5, #0]
 800927e:	2900      	cmp	r1, #0
 8009280:	d0c6      	beq.n	8009210 <__sflush_r+0x18>
 8009282:	0023      	movs	r3, r4
 8009284:	3344      	adds	r3, #68	; 0x44
 8009286:	4299      	cmp	r1, r3
 8009288:	d002      	beq.n	8009290 <__sflush_r+0x98>
 800928a:	0028      	movs	r0, r5
 800928c:	f000 f9f2 	bl	8009674 <_free_r>
 8009290:	2000      	movs	r0, #0
 8009292:	6360      	str	r0, [r4, #52]	; 0x34
 8009294:	e7bd      	b.n	8009212 <__sflush_r+0x1a>
 8009296:	2301      	movs	r3, #1
 8009298:	0028      	movs	r0, r5
 800929a:	6a21      	ldr	r1, [r4, #32]
 800929c:	47b8      	blx	r7
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d1c5      	bne.n	800922e <__sflush_r+0x36>
 80092a2:	682b      	ldr	r3, [r5, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d0c2      	beq.n	800922e <__sflush_r+0x36>
 80092a8:	2b1d      	cmp	r3, #29
 80092aa:	d001      	beq.n	80092b0 <__sflush_r+0xb8>
 80092ac:	2b16      	cmp	r3, #22
 80092ae:	d101      	bne.n	80092b4 <__sflush_r+0xbc>
 80092b0:	602e      	str	r6, [r5, #0]
 80092b2:	e7ad      	b.n	8009210 <__sflush_r+0x18>
 80092b4:	2340      	movs	r3, #64	; 0x40
 80092b6:	89a2      	ldrh	r2, [r4, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	e7a9      	b.n	8009212 <__sflush_r+0x1a>
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	430b      	orrs	r3, r1
 80092c2:	e7fa      	b.n	80092ba <__sflush_r+0xc2>
 80092c4:	690f      	ldr	r7, [r1, #16]
 80092c6:	2f00      	cmp	r7, #0
 80092c8:	d0a2      	beq.n	8009210 <__sflush_r+0x18>
 80092ca:	680a      	ldr	r2, [r1, #0]
 80092cc:	600f      	str	r7, [r1, #0]
 80092ce:	1bd2      	subs	r2, r2, r7
 80092d0:	9201      	str	r2, [sp, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	079b      	lsls	r3, r3, #30
 80092d6:	d100      	bne.n	80092da <__sflush_r+0xe2>
 80092d8:	694a      	ldr	r2, [r1, #20]
 80092da:	60a2      	str	r2, [r4, #8]
 80092dc:	9b01      	ldr	r3, [sp, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dc00      	bgt.n	80092e4 <__sflush_r+0xec>
 80092e2:	e795      	b.n	8009210 <__sflush_r+0x18>
 80092e4:	003a      	movs	r2, r7
 80092e6:	0028      	movs	r0, r5
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	6a21      	ldr	r1, [r4, #32]
 80092ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092ee:	47b0      	blx	r6
 80092f0:	2800      	cmp	r0, #0
 80092f2:	dc06      	bgt.n	8009302 <__sflush_r+0x10a>
 80092f4:	2340      	movs	r3, #64	; 0x40
 80092f6:	2001      	movs	r0, #1
 80092f8:	89a2      	ldrh	r2, [r4, #12]
 80092fa:	4240      	negs	r0, r0
 80092fc:	4313      	orrs	r3, r2
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	e787      	b.n	8009212 <__sflush_r+0x1a>
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	183f      	adds	r7, r7, r0
 8009306:	1a1b      	subs	r3, r3, r0
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	e7e7      	b.n	80092dc <__sflush_r+0xe4>
 800930c:	20400001 	.word	0x20400001

08009310 <_fflush_r>:
 8009310:	690b      	ldr	r3, [r1, #16]
 8009312:	b570      	push	{r4, r5, r6, lr}
 8009314:	0005      	movs	r5, r0
 8009316:	000c      	movs	r4, r1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <_fflush_r+0x12>
 800931c:	2500      	movs	r5, #0
 800931e:	0028      	movs	r0, r5
 8009320:	bd70      	pop	{r4, r5, r6, pc}
 8009322:	2800      	cmp	r0, #0
 8009324:	d004      	beq.n	8009330 <_fflush_r+0x20>
 8009326:	6983      	ldr	r3, [r0, #24]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <_fflush_r+0x20>
 800932c:	f000 f892 	bl	8009454 <__sinit>
 8009330:	4b14      	ldr	r3, [pc, #80]	; (8009384 <_fflush_r+0x74>)
 8009332:	429c      	cmp	r4, r3
 8009334:	d11b      	bne.n	800936e <_fflush_r+0x5e>
 8009336:	686c      	ldr	r4, [r5, #4]
 8009338:	220c      	movs	r2, #12
 800933a:	5ea3      	ldrsh	r3, [r4, r2]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0ed      	beq.n	800931c <_fflush_r+0xc>
 8009340:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009342:	07d2      	lsls	r2, r2, #31
 8009344:	d404      	bmi.n	8009350 <_fflush_r+0x40>
 8009346:	059b      	lsls	r3, r3, #22
 8009348:	d402      	bmi.n	8009350 <_fflush_r+0x40>
 800934a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934c:	f000 f923 	bl	8009596 <__retarget_lock_acquire_recursive>
 8009350:	0028      	movs	r0, r5
 8009352:	0021      	movs	r1, r4
 8009354:	f7ff ff50 	bl	80091f8 <__sflush_r>
 8009358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800935a:	0005      	movs	r5, r0
 800935c:	07db      	lsls	r3, r3, #31
 800935e:	d4de      	bmi.n	800931e <_fflush_r+0xe>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	059b      	lsls	r3, r3, #22
 8009364:	d4db      	bmi.n	800931e <_fflush_r+0xe>
 8009366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009368:	f000 f916 	bl	8009598 <__retarget_lock_release_recursive>
 800936c:	e7d7      	b.n	800931e <_fflush_r+0xe>
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <_fflush_r+0x78>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d101      	bne.n	8009378 <_fflush_r+0x68>
 8009374:	68ac      	ldr	r4, [r5, #8]
 8009376:	e7df      	b.n	8009338 <_fflush_r+0x28>
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <_fflush_r+0x7c>)
 800937a:	429c      	cmp	r4, r3
 800937c:	d1dc      	bne.n	8009338 <_fflush_r+0x28>
 800937e:	68ec      	ldr	r4, [r5, #12]
 8009380:	e7da      	b.n	8009338 <_fflush_r+0x28>
 8009382:	46c0      	nop			; (mov r8, r8)
 8009384:	0800a2c4 	.word	0x0800a2c4
 8009388:	0800a2e4 	.word	0x0800a2e4
 800938c:	0800a2a4 	.word	0x0800a2a4

08009390 <std>:
 8009390:	2300      	movs	r3, #0
 8009392:	b510      	push	{r4, lr}
 8009394:	0004      	movs	r4, r0
 8009396:	6003      	str	r3, [r0, #0]
 8009398:	6043      	str	r3, [r0, #4]
 800939a:	6083      	str	r3, [r0, #8]
 800939c:	8181      	strh	r1, [r0, #12]
 800939e:	6643      	str	r3, [r0, #100]	; 0x64
 80093a0:	0019      	movs	r1, r3
 80093a2:	81c2      	strh	r2, [r0, #14]
 80093a4:	6103      	str	r3, [r0, #16]
 80093a6:	6143      	str	r3, [r0, #20]
 80093a8:	6183      	str	r3, [r0, #24]
 80093aa:	2208      	movs	r2, #8
 80093ac:	305c      	adds	r0, #92	; 0x5c
 80093ae:	f7ff fdb6 	bl	8008f1e <memset>
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <std+0x38>)
 80093b4:	6263      	str	r3, [r4, #36]	; 0x24
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <std+0x3c>)
 80093b8:	6224      	str	r4, [r4, #32]
 80093ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80093bc:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <std+0x40>)
 80093be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <std+0x44>)
 80093c2:	6323      	str	r3, [r4, #48]	; 0x30
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	08009db1 	.word	0x08009db1
 80093cc:	08009dd9 	.word	0x08009dd9
 80093d0:	08009e11 	.word	0x08009e11
 80093d4:	08009e3d 	.word	0x08009e3d

080093d8 <_cleanup_r>:
 80093d8:	b510      	push	{r4, lr}
 80093da:	4902      	ldr	r1, [pc, #8]	; (80093e4 <_cleanup_r+0xc>)
 80093dc:	f000 f8ba 	bl	8009554 <_fwalk_reent>
 80093e0:	bd10      	pop	{r4, pc}
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	08009311 	.word	0x08009311

080093e8 <__sfmoreglue>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	2568      	movs	r5, #104	; 0x68
 80093ec:	1e4a      	subs	r2, r1, #1
 80093ee:	4355      	muls	r5, r2
 80093f0:	000e      	movs	r6, r1
 80093f2:	0029      	movs	r1, r5
 80093f4:	3174      	adds	r1, #116	; 0x74
 80093f6:	f000 f987 	bl	8009708 <_malloc_r>
 80093fa:	1e04      	subs	r4, r0, #0
 80093fc:	d008      	beq.n	8009410 <__sfmoreglue+0x28>
 80093fe:	2100      	movs	r1, #0
 8009400:	002a      	movs	r2, r5
 8009402:	6001      	str	r1, [r0, #0]
 8009404:	6046      	str	r6, [r0, #4]
 8009406:	300c      	adds	r0, #12
 8009408:	60a0      	str	r0, [r4, #8]
 800940a:	3268      	adds	r2, #104	; 0x68
 800940c:	f7ff fd87 	bl	8008f1e <memset>
 8009410:	0020      	movs	r0, r4
 8009412:	bd70      	pop	{r4, r5, r6, pc}

08009414 <__sfp_lock_acquire>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4802      	ldr	r0, [pc, #8]	; (8009420 <__sfp_lock_acquire+0xc>)
 8009418:	f000 f8bd 	bl	8009596 <__retarget_lock_acquire_recursive>
 800941c:	bd10      	pop	{r4, pc}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	2000896c 	.word	0x2000896c

08009424 <__sfp_lock_release>:
 8009424:	b510      	push	{r4, lr}
 8009426:	4802      	ldr	r0, [pc, #8]	; (8009430 <__sfp_lock_release+0xc>)
 8009428:	f000 f8b6 	bl	8009598 <__retarget_lock_release_recursive>
 800942c:	bd10      	pop	{r4, pc}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	2000896c 	.word	0x2000896c

08009434 <__sinit_lock_acquire>:
 8009434:	b510      	push	{r4, lr}
 8009436:	4802      	ldr	r0, [pc, #8]	; (8009440 <__sinit_lock_acquire+0xc>)
 8009438:	f000 f8ad 	bl	8009596 <__retarget_lock_acquire_recursive>
 800943c:	bd10      	pop	{r4, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	20008967 	.word	0x20008967

08009444 <__sinit_lock_release>:
 8009444:	b510      	push	{r4, lr}
 8009446:	4802      	ldr	r0, [pc, #8]	; (8009450 <__sinit_lock_release+0xc>)
 8009448:	f000 f8a6 	bl	8009598 <__retarget_lock_release_recursive>
 800944c:	bd10      	pop	{r4, pc}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	20008967 	.word	0x20008967

08009454 <__sinit>:
 8009454:	b513      	push	{r0, r1, r4, lr}
 8009456:	0004      	movs	r4, r0
 8009458:	f7ff ffec 	bl	8009434 <__sinit_lock_acquire>
 800945c:	69a3      	ldr	r3, [r4, #24]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <__sinit+0x14>
 8009462:	f7ff ffef 	bl	8009444 <__sinit_lock_release>
 8009466:	bd13      	pop	{r0, r1, r4, pc}
 8009468:	64a3      	str	r3, [r4, #72]	; 0x48
 800946a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800946c:	6523      	str	r3, [r4, #80]	; 0x50
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <__sinit+0x68>)
 8009470:	4a13      	ldr	r2, [pc, #76]	; (80094c0 <__sinit+0x6c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	62a2      	str	r2, [r4, #40]	; 0x28
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	42a3      	cmp	r3, r4
 800947a:	d101      	bne.n	8009480 <__sinit+0x2c>
 800947c:	2301      	movs	r3, #1
 800947e:	61a3      	str	r3, [r4, #24]
 8009480:	0020      	movs	r0, r4
 8009482:	f000 f81f 	bl	80094c4 <__sfp>
 8009486:	6060      	str	r0, [r4, #4]
 8009488:	0020      	movs	r0, r4
 800948a:	f000 f81b 	bl	80094c4 <__sfp>
 800948e:	60a0      	str	r0, [r4, #8]
 8009490:	0020      	movs	r0, r4
 8009492:	f000 f817 	bl	80094c4 <__sfp>
 8009496:	2200      	movs	r2, #0
 8009498:	2104      	movs	r1, #4
 800949a:	60e0      	str	r0, [r4, #12]
 800949c:	6860      	ldr	r0, [r4, #4]
 800949e:	f7ff ff77 	bl	8009390 <std>
 80094a2:	2201      	movs	r2, #1
 80094a4:	2109      	movs	r1, #9
 80094a6:	68a0      	ldr	r0, [r4, #8]
 80094a8:	f7ff ff72 	bl	8009390 <std>
 80094ac:	2202      	movs	r2, #2
 80094ae:	2112      	movs	r1, #18
 80094b0:	68e0      	ldr	r0, [r4, #12]
 80094b2:	f7ff ff6d 	bl	8009390 <std>
 80094b6:	2301      	movs	r3, #1
 80094b8:	61a3      	str	r3, [r4, #24]
 80094ba:	e7d2      	b.n	8009462 <__sinit+0xe>
 80094bc:	0800a2a0 	.word	0x0800a2a0
 80094c0:	080093d9 	.word	0x080093d9

080094c4 <__sfp>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	0007      	movs	r7, r0
 80094c8:	f7ff ffa4 	bl	8009414 <__sfp_lock_acquire>
 80094cc:	4b1f      	ldr	r3, [pc, #124]	; (800954c <__sfp+0x88>)
 80094ce:	681e      	ldr	r6, [r3, #0]
 80094d0:	69b3      	ldr	r3, [r6, #24]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <__sfp+0x18>
 80094d6:	0030      	movs	r0, r6
 80094d8:	f7ff ffbc 	bl	8009454 <__sinit>
 80094dc:	3648      	adds	r6, #72	; 0x48
 80094de:	68b4      	ldr	r4, [r6, #8]
 80094e0:	6873      	ldr	r3, [r6, #4]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	d504      	bpl.n	80094f0 <__sfp+0x2c>
 80094e6:	6833      	ldr	r3, [r6, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d022      	beq.n	8009532 <__sfp+0x6e>
 80094ec:	6836      	ldr	r6, [r6, #0]
 80094ee:	e7f6      	b.n	80094de <__sfp+0x1a>
 80094f0:	220c      	movs	r2, #12
 80094f2:	5ea5      	ldrsh	r5, [r4, r2]
 80094f4:	2d00      	cmp	r5, #0
 80094f6:	d11a      	bne.n	800952e <__sfp+0x6a>
 80094f8:	0020      	movs	r0, r4
 80094fa:	4b15      	ldr	r3, [pc, #84]	; (8009550 <__sfp+0x8c>)
 80094fc:	3058      	adds	r0, #88	; 0x58
 80094fe:	60e3      	str	r3, [r4, #12]
 8009500:	6665      	str	r5, [r4, #100]	; 0x64
 8009502:	f000 f847 	bl	8009594 <__retarget_lock_init_recursive>
 8009506:	f7ff ff8d 	bl	8009424 <__sfp_lock_release>
 800950a:	0020      	movs	r0, r4
 800950c:	2208      	movs	r2, #8
 800950e:	0029      	movs	r1, r5
 8009510:	6025      	str	r5, [r4, #0]
 8009512:	60a5      	str	r5, [r4, #8]
 8009514:	6065      	str	r5, [r4, #4]
 8009516:	6125      	str	r5, [r4, #16]
 8009518:	6165      	str	r5, [r4, #20]
 800951a:	61a5      	str	r5, [r4, #24]
 800951c:	305c      	adds	r0, #92	; 0x5c
 800951e:	f7ff fcfe 	bl	8008f1e <memset>
 8009522:	6365      	str	r5, [r4, #52]	; 0x34
 8009524:	63a5      	str	r5, [r4, #56]	; 0x38
 8009526:	64a5      	str	r5, [r4, #72]	; 0x48
 8009528:	64e5      	str	r5, [r4, #76]	; 0x4c
 800952a:	0020      	movs	r0, r4
 800952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952e:	3468      	adds	r4, #104	; 0x68
 8009530:	e7d7      	b.n	80094e2 <__sfp+0x1e>
 8009532:	2104      	movs	r1, #4
 8009534:	0038      	movs	r0, r7
 8009536:	f7ff ff57 	bl	80093e8 <__sfmoreglue>
 800953a:	1e04      	subs	r4, r0, #0
 800953c:	6030      	str	r0, [r6, #0]
 800953e:	d1d5      	bne.n	80094ec <__sfp+0x28>
 8009540:	f7ff ff70 	bl	8009424 <__sfp_lock_release>
 8009544:	230c      	movs	r3, #12
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	e7ef      	b.n	800952a <__sfp+0x66>
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	0800a2a0 	.word	0x0800a2a0
 8009550:	ffff0001 	.word	0xffff0001

08009554 <_fwalk_reent>:
 8009554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009556:	0004      	movs	r4, r0
 8009558:	0006      	movs	r6, r0
 800955a:	2700      	movs	r7, #0
 800955c:	9101      	str	r1, [sp, #4]
 800955e:	3448      	adds	r4, #72	; 0x48
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	68a5      	ldr	r5, [r4, #8]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	3b01      	subs	r3, #1
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	d504      	bpl.n	8009578 <_fwalk_reent+0x24>
 800956e:	6824      	ldr	r4, [r4, #0]
 8009570:	2c00      	cmp	r4, #0
 8009572:	d1f5      	bne.n	8009560 <_fwalk_reent+0xc>
 8009574:	0038      	movs	r0, r7
 8009576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009578:	89ab      	ldrh	r3, [r5, #12]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d908      	bls.n	8009590 <_fwalk_reent+0x3c>
 800957e:	220e      	movs	r2, #14
 8009580:	5eab      	ldrsh	r3, [r5, r2]
 8009582:	3301      	adds	r3, #1
 8009584:	d004      	beq.n	8009590 <_fwalk_reent+0x3c>
 8009586:	0029      	movs	r1, r5
 8009588:	0030      	movs	r0, r6
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	4798      	blx	r3
 800958e:	4307      	orrs	r7, r0
 8009590:	3568      	adds	r5, #104	; 0x68
 8009592:	e7e8      	b.n	8009566 <_fwalk_reent+0x12>

08009594 <__retarget_lock_init_recursive>:
 8009594:	4770      	bx	lr

08009596 <__retarget_lock_acquire_recursive>:
 8009596:	4770      	bx	lr

08009598 <__retarget_lock_release_recursive>:
 8009598:	4770      	bx	lr
	...

0800959c <__swhatbuf_r>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	000e      	movs	r6, r1
 80095a0:	001d      	movs	r5, r3
 80095a2:	230e      	movs	r3, #14
 80095a4:	5ec9      	ldrsh	r1, [r1, r3]
 80095a6:	0014      	movs	r4, r2
 80095a8:	b096      	sub	sp, #88	; 0x58
 80095aa:	2900      	cmp	r1, #0
 80095ac:	da07      	bge.n	80095be <__swhatbuf_r+0x22>
 80095ae:	2300      	movs	r3, #0
 80095b0:	602b      	str	r3, [r5, #0]
 80095b2:	89b3      	ldrh	r3, [r6, #12]
 80095b4:	061b      	lsls	r3, r3, #24
 80095b6:	d411      	bmi.n	80095dc <__swhatbuf_r+0x40>
 80095b8:	2380      	movs	r3, #128	; 0x80
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	e00f      	b.n	80095de <__swhatbuf_r+0x42>
 80095be:	466a      	mov	r2, sp
 80095c0:	f000 fc68 	bl	8009e94 <_fstat_r>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	dbf2      	blt.n	80095ae <__swhatbuf_r+0x12>
 80095c8:	23f0      	movs	r3, #240	; 0xf0
 80095ca:	9901      	ldr	r1, [sp, #4]
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	4019      	ands	r1, r3
 80095d0:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <__swhatbuf_r+0x4c>)
 80095d2:	18c9      	adds	r1, r1, r3
 80095d4:	424b      	negs	r3, r1
 80095d6:	4159      	adcs	r1, r3
 80095d8:	6029      	str	r1, [r5, #0]
 80095da:	e7ed      	b.n	80095b8 <__swhatbuf_r+0x1c>
 80095dc:	2340      	movs	r3, #64	; 0x40
 80095de:	2000      	movs	r0, #0
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	b016      	add	sp, #88	; 0x58
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	ffffe000 	.word	0xffffe000

080095ec <__smakebuf_r>:
 80095ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ee:	2602      	movs	r6, #2
 80095f0:	898b      	ldrh	r3, [r1, #12]
 80095f2:	0005      	movs	r5, r0
 80095f4:	000c      	movs	r4, r1
 80095f6:	4233      	tst	r3, r6
 80095f8:	d006      	beq.n	8009608 <__smakebuf_r+0x1c>
 80095fa:	0023      	movs	r3, r4
 80095fc:	3347      	adds	r3, #71	; 0x47
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	2301      	movs	r3, #1
 8009604:	6163      	str	r3, [r4, #20]
 8009606:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009608:	466a      	mov	r2, sp
 800960a:	ab01      	add	r3, sp, #4
 800960c:	f7ff ffc6 	bl	800959c <__swhatbuf_r>
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	0007      	movs	r7, r0
 8009614:	0028      	movs	r0, r5
 8009616:	f000 f877 	bl	8009708 <_malloc_r>
 800961a:	2800      	cmp	r0, #0
 800961c:	d108      	bne.n	8009630 <__smakebuf_r+0x44>
 800961e:	220c      	movs	r2, #12
 8009620:	5ea3      	ldrsh	r3, [r4, r2]
 8009622:	059a      	lsls	r2, r3, #22
 8009624:	d4ef      	bmi.n	8009606 <__smakebuf_r+0x1a>
 8009626:	2203      	movs	r2, #3
 8009628:	4393      	bics	r3, r2
 800962a:	431e      	orrs	r6, r3
 800962c:	81a6      	strh	r6, [r4, #12]
 800962e:	e7e4      	b.n	80095fa <__smakebuf_r+0xe>
 8009630:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <__smakebuf_r+0x84>)
 8009632:	62ab      	str	r3, [r5, #40]	; 0x28
 8009634:	2380      	movs	r3, #128	; 0x80
 8009636:	89a2      	ldrh	r2, [r4, #12]
 8009638:	6020      	str	r0, [r4, #0]
 800963a:	4313      	orrs	r3, r2
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	9b00      	ldr	r3, [sp, #0]
 8009640:	6120      	str	r0, [r4, #16]
 8009642:	6163      	str	r3, [r4, #20]
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00d      	beq.n	8009666 <__smakebuf_r+0x7a>
 800964a:	0028      	movs	r0, r5
 800964c:	230e      	movs	r3, #14
 800964e:	5ee1      	ldrsh	r1, [r4, r3]
 8009650:	f000 fc32 	bl	8009eb8 <_isatty_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	d006      	beq.n	8009666 <__smakebuf_r+0x7a>
 8009658:	2203      	movs	r2, #3
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	4393      	bics	r3, r2
 800965e:	001a      	movs	r2, r3
 8009660:	2301      	movs	r3, #1
 8009662:	4313      	orrs	r3, r2
 8009664:	81a3      	strh	r3, [r4, #12]
 8009666:	89a0      	ldrh	r0, [r4, #12]
 8009668:	4307      	orrs	r7, r0
 800966a:	81a7      	strh	r7, [r4, #12]
 800966c:	e7cb      	b.n	8009606 <__smakebuf_r+0x1a>
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	080093d9 	.word	0x080093d9

08009674 <_free_r>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	0005      	movs	r5, r0
 8009678:	2900      	cmp	r1, #0
 800967a:	d010      	beq.n	800969e <_free_r+0x2a>
 800967c:	1f0c      	subs	r4, r1, #4
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da00      	bge.n	8009686 <_free_r+0x12>
 8009684:	18e4      	adds	r4, r4, r3
 8009686:	0028      	movs	r0, r5
 8009688:	f000 fc48 	bl	8009f1c <__malloc_lock>
 800968c:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <_free_r+0x90>)
 800968e:	6813      	ldr	r3, [r2, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d105      	bne.n	80096a0 <_free_r+0x2c>
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	6014      	str	r4, [r2, #0]
 8009698:	0028      	movs	r0, r5
 800969a:	f000 fc47 	bl	8009f2c <__malloc_unlock>
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d908      	bls.n	80096b6 <_free_r+0x42>
 80096a4:	6821      	ldr	r1, [r4, #0]
 80096a6:	1860      	adds	r0, r4, r1
 80096a8:	4283      	cmp	r3, r0
 80096aa:	d1f3      	bne.n	8009694 <_free_r+0x20>
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	1841      	adds	r1, r0, r1
 80096b2:	6021      	str	r1, [r4, #0]
 80096b4:	e7ee      	b.n	8009694 <_free_r+0x20>
 80096b6:	001a      	movs	r2, r3
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <_free_r+0x4e>
 80096be:	42a3      	cmp	r3, r4
 80096c0:	d9f9      	bls.n	80096b6 <_free_r+0x42>
 80096c2:	6811      	ldr	r1, [r2, #0]
 80096c4:	1850      	adds	r0, r2, r1
 80096c6:	42a0      	cmp	r0, r4
 80096c8:	d10b      	bne.n	80096e2 <_free_r+0x6e>
 80096ca:	6820      	ldr	r0, [r4, #0]
 80096cc:	1809      	adds	r1, r1, r0
 80096ce:	1850      	adds	r0, r2, r1
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	4283      	cmp	r3, r0
 80096d4:	d1e0      	bne.n	8009698 <_free_r+0x24>
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	1841      	adds	r1, r0, r1
 80096dc:	6011      	str	r1, [r2, #0]
 80096de:	6053      	str	r3, [r2, #4]
 80096e0:	e7da      	b.n	8009698 <_free_r+0x24>
 80096e2:	42a0      	cmp	r0, r4
 80096e4:	d902      	bls.n	80096ec <_free_r+0x78>
 80096e6:	230c      	movs	r3, #12
 80096e8:	602b      	str	r3, [r5, #0]
 80096ea:	e7d5      	b.n	8009698 <_free_r+0x24>
 80096ec:	6821      	ldr	r1, [r4, #0]
 80096ee:	1860      	adds	r0, r4, r1
 80096f0:	4283      	cmp	r3, r0
 80096f2:	d103      	bne.n	80096fc <_free_r+0x88>
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	1841      	adds	r1, r0, r1
 80096fa:	6021      	str	r1, [r4, #0]
 80096fc:	6063      	str	r3, [r4, #4]
 80096fe:	6054      	str	r4, [r2, #4]
 8009700:	e7ca      	b.n	8009698 <_free_r+0x24>
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	20008494 	.word	0x20008494

08009708 <_malloc_r>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	2303      	movs	r3, #3
 800970c:	1ccd      	adds	r5, r1, #3
 800970e:	439d      	bics	r5, r3
 8009710:	3508      	adds	r5, #8
 8009712:	0006      	movs	r6, r0
 8009714:	2d0c      	cmp	r5, #12
 8009716:	d21f      	bcs.n	8009758 <_malloc_r+0x50>
 8009718:	250c      	movs	r5, #12
 800971a:	42a9      	cmp	r1, r5
 800971c:	d81e      	bhi.n	800975c <_malloc_r+0x54>
 800971e:	0030      	movs	r0, r6
 8009720:	f000 fbfc 	bl	8009f1c <__malloc_lock>
 8009724:	4925      	ldr	r1, [pc, #148]	; (80097bc <_malloc_r+0xb4>)
 8009726:	680a      	ldr	r2, [r1, #0]
 8009728:	0014      	movs	r4, r2
 800972a:	2c00      	cmp	r4, #0
 800972c:	d11a      	bne.n	8009764 <_malloc_r+0x5c>
 800972e:	4f24      	ldr	r7, [pc, #144]	; (80097c0 <_malloc_r+0xb8>)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <_malloc_r+0x38>
 8009736:	0021      	movs	r1, r4
 8009738:	0030      	movs	r0, r6
 800973a:	f000 fb27 	bl	8009d8c <_sbrk_r>
 800973e:	6038      	str	r0, [r7, #0]
 8009740:	0029      	movs	r1, r5
 8009742:	0030      	movs	r0, r6
 8009744:	f000 fb22 	bl	8009d8c <_sbrk_r>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d12b      	bne.n	80097a4 <_malloc_r+0x9c>
 800974c:	230c      	movs	r3, #12
 800974e:	0030      	movs	r0, r6
 8009750:	6033      	str	r3, [r6, #0]
 8009752:	f000 fbeb 	bl	8009f2c <__malloc_unlock>
 8009756:	e003      	b.n	8009760 <_malloc_r+0x58>
 8009758:	2d00      	cmp	r5, #0
 800975a:	dade      	bge.n	800971a <_malloc_r+0x12>
 800975c:	230c      	movs	r3, #12
 800975e:	6033      	str	r3, [r6, #0]
 8009760:	2000      	movs	r0, #0
 8009762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	1b5b      	subs	r3, r3, r5
 8009768:	d419      	bmi.n	800979e <_malloc_r+0x96>
 800976a:	2b0b      	cmp	r3, #11
 800976c:	d903      	bls.n	8009776 <_malloc_r+0x6e>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	18e4      	adds	r4, r4, r3
 8009772:	6025      	str	r5, [r4, #0]
 8009774:	e003      	b.n	800977e <_malloc_r+0x76>
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	42a2      	cmp	r2, r4
 800977a:	d10e      	bne.n	800979a <_malloc_r+0x92>
 800977c:	600b      	str	r3, [r1, #0]
 800977e:	0030      	movs	r0, r6
 8009780:	f000 fbd4 	bl	8009f2c <__malloc_unlock>
 8009784:	0020      	movs	r0, r4
 8009786:	2207      	movs	r2, #7
 8009788:	300b      	adds	r0, #11
 800978a:	1d23      	adds	r3, r4, #4
 800978c:	4390      	bics	r0, r2
 800978e:	1ac2      	subs	r2, r0, r3
 8009790:	4298      	cmp	r0, r3
 8009792:	d0e6      	beq.n	8009762 <_malloc_r+0x5a>
 8009794:	1a1b      	subs	r3, r3, r0
 8009796:	50a3      	str	r3, [r4, r2]
 8009798:	e7e3      	b.n	8009762 <_malloc_r+0x5a>
 800979a:	6053      	str	r3, [r2, #4]
 800979c:	e7ef      	b.n	800977e <_malloc_r+0x76>
 800979e:	0022      	movs	r2, r4
 80097a0:	6864      	ldr	r4, [r4, #4]
 80097a2:	e7c2      	b.n	800972a <_malloc_r+0x22>
 80097a4:	2303      	movs	r3, #3
 80097a6:	1cc4      	adds	r4, r0, #3
 80097a8:	439c      	bics	r4, r3
 80097aa:	42a0      	cmp	r0, r4
 80097ac:	d0e1      	beq.n	8009772 <_malloc_r+0x6a>
 80097ae:	1a21      	subs	r1, r4, r0
 80097b0:	0030      	movs	r0, r6
 80097b2:	f000 faeb 	bl	8009d8c <_sbrk_r>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d1db      	bne.n	8009772 <_malloc_r+0x6a>
 80097ba:	e7c7      	b.n	800974c <_malloc_r+0x44>
 80097bc:	20008494 	.word	0x20008494
 80097c0:	20008498 	.word	0x20008498

080097c4 <__sfputc_r>:
 80097c4:	6893      	ldr	r3, [r2, #8]
 80097c6:	b510      	push	{r4, lr}
 80097c8:	3b01      	subs	r3, #1
 80097ca:	6093      	str	r3, [r2, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	da04      	bge.n	80097da <__sfputc_r+0x16>
 80097d0:	6994      	ldr	r4, [r2, #24]
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	db07      	blt.n	80097e6 <__sfputc_r+0x22>
 80097d6:	290a      	cmp	r1, #10
 80097d8:	d005      	beq.n	80097e6 <__sfputc_r+0x22>
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	1c58      	adds	r0, r3, #1
 80097de:	6010      	str	r0, [r2, #0]
 80097e0:	7019      	strb	r1, [r3, #0]
 80097e2:	0008      	movs	r0, r1
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	f7ff fc39 	bl	800905c <__swbuf_r>
 80097ea:	0001      	movs	r1, r0
 80097ec:	e7f9      	b.n	80097e2 <__sfputc_r+0x1e>

080097ee <__sfputs_r>:
 80097ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f0:	0006      	movs	r6, r0
 80097f2:	000f      	movs	r7, r1
 80097f4:	0014      	movs	r4, r2
 80097f6:	18d5      	adds	r5, r2, r3
 80097f8:	42ac      	cmp	r4, r5
 80097fa:	d101      	bne.n	8009800 <__sfputs_r+0x12>
 80097fc:	2000      	movs	r0, #0
 80097fe:	e007      	b.n	8009810 <__sfputs_r+0x22>
 8009800:	7821      	ldrb	r1, [r4, #0]
 8009802:	003a      	movs	r2, r7
 8009804:	0030      	movs	r0, r6
 8009806:	f7ff ffdd 	bl	80097c4 <__sfputc_r>
 800980a:	3401      	adds	r4, #1
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d1f3      	bne.n	80097f8 <__sfputs_r+0xa>
 8009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009814 <_vfiprintf_r>:
 8009814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009816:	b0a1      	sub	sp, #132	; 0x84
 8009818:	0006      	movs	r6, r0
 800981a:	000c      	movs	r4, r1
 800981c:	001f      	movs	r7, r3
 800981e:	9203      	str	r2, [sp, #12]
 8009820:	2800      	cmp	r0, #0
 8009822:	d004      	beq.n	800982e <_vfiprintf_r+0x1a>
 8009824:	6983      	ldr	r3, [r0, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <_vfiprintf_r+0x1a>
 800982a:	f7ff fe13 	bl	8009454 <__sinit>
 800982e:	4b8e      	ldr	r3, [pc, #568]	; (8009a68 <_vfiprintf_r+0x254>)
 8009830:	429c      	cmp	r4, r3
 8009832:	d11c      	bne.n	800986e <_vfiprintf_r+0x5a>
 8009834:	6874      	ldr	r4, [r6, #4]
 8009836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009838:	07db      	lsls	r3, r3, #31
 800983a:	d405      	bmi.n	8009848 <_vfiprintf_r+0x34>
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	059b      	lsls	r3, r3, #22
 8009840:	d402      	bmi.n	8009848 <_vfiprintf_r+0x34>
 8009842:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009844:	f7ff fea7 	bl	8009596 <__retarget_lock_acquire_recursive>
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	071b      	lsls	r3, r3, #28
 800984c:	d502      	bpl.n	8009854 <_vfiprintf_r+0x40>
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d11d      	bne.n	8009890 <_vfiprintf_r+0x7c>
 8009854:	0021      	movs	r1, r4
 8009856:	0030      	movs	r0, r6
 8009858:	f7ff fc56 	bl	8009108 <__swsetup_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d017      	beq.n	8009890 <_vfiprintf_r+0x7c>
 8009860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009862:	07db      	lsls	r3, r3, #31
 8009864:	d50d      	bpl.n	8009882 <_vfiprintf_r+0x6e>
 8009866:	2001      	movs	r0, #1
 8009868:	4240      	negs	r0, r0
 800986a:	b021      	add	sp, #132	; 0x84
 800986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986e:	4b7f      	ldr	r3, [pc, #508]	; (8009a6c <_vfiprintf_r+0x258>)
 8009870:	429c      	cmp	r4, r3
 8009872:	d101      	bne.n	8009878 <_vfiprintf_r+0x64>
 8009874:	68b4      	ldr	r4, [r6, #8]
 8009876:	e7de      	b.n	8009836 <_vfiprintf_r+0x22>
 8009878:	4b7d      	ldr	r3, [pc, #500]	; (8009a70 <_vfiprintf_r+0x25c>)
 800987a:	429c      	cmp	r4, r3
 800987c:	d1db      	bne.n	8009836 <_vfiprintf_r+0x22>
 800987e:	68f4      	ldr	r4, [r6, #12]
 8009880:	e7d9      	b.n	8009836 <_vfiprintf_r+0x22>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	059b      	lsls	r3, r3, #22
 8009886:	d4ee      	bmi.n	8009866 <_vfiprintf_r+0x52>
 8009888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800988a:	f7ff fe85 	bl	8009598 <__retarget_lock_release_recursive>
 800988e:	e7ea      	b.n	8009866 <_vfiprintf_r+0x52>
 8009890:	2300      	movs	r3, #0
 8009892:	ad08      	add	r5, sp, #32
 8009894:	616b      	str	r3, [r5, #20]
 8009896:	3320      	adds	r3, #32
 8009898:	766b      	strb	r3, [r5, #25]
 800989a:	3310      	adds	r3, #16
 800989c:	76ab      	strb	r3, [r5, #26]
 800989e:	9707      	str	r7, [sp, #28]
 80098a0:	9f03      	ldr	r7, [sp, #12]
 80098a2:	783b      	ldrb	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <_vfiprintf_r+0x98>
 80098a8:	2b25      	cmp	r3, #37	; 0x25
 80098aa:	d14e      	bne.n	800994a <_vfiprintf_r+0x136>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	1afb      	subs	r3, r7, r3
 80098b0:	9305      	str	r3, [sp, #20]
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	429f      	cmp	r7, r3
 80098b6:	d00d      	beq.n	80098d4 <_vfiprintf_r+0xc0>
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	0021      	movs	r1, r4
 80098bc:	0030      	movs	r0, r6
 80098be:	9a03      	ldr	r2, [sp, #12]
 80098c0:	f7ff ff95 	bl	80097ee <__sfputs_r>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d100      	bne.n	80098ca <_vfiprintf_r+0xb6>
 80098c8:	e0b5      	b.n	8009a36 <_vfiprintf_r+0x222>
 80098ca:	696a      	ldr	r2, [r5, #20]
 80098cc:	9b05      	ldr	r3, [sp, #20]
 80098ce:	4694      	mov	ip, r2
 80098d0:	4463      	add	r3, ip
 80098d2:	616b      	str	r3, [r5, #20]
 80098d4:	783b      	ldrb	r3, [r7, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d100      	bne.n	80098dc <_vfiprintf_r+0xc8>
 80098da:	e0ac      	b.n	8009a36 <_vfiprintf_r+0x222>
 80098dc:	2201      	movs	r2, #1
 80098de:	1c7b      	adds	r3, r7, #1
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	2300      	movs	r3, #0
 80098e4:	4252      	negs	r2, r2
 80098e6:	606a      	str	r2, [r5, #4]
 80098e8:	a904      	add	r1, sp, #16
 80098ea:	3254      	adds	r2, #84	; 0x54
 80098ec:	1852      	adds	r2, r2, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	60eb      	str	r3, [r5, #12]
 80098f2:	60ab      	str	r3, [r5, #8]
 80098f4:	7013      	strb	r3, [r2, #0]
 80098f6:	65ab      	str	r3, [r5, #88]	; 0x58
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	2205      	movs	r2, #5
 80098fc:	7819      	ldrb	r1, [r3, #0]
 80098fe:	485d      	ldr	r0, [pc, #372]	; (8009a74 <_vfiprintf_r+0x260>)
 8009900:	f000 fb00 	bl	8009f04 <memchr>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	1c5f      	adds	r7, r3, #1
 8009908:	2800      	cmp	r0, #0
 800990a:	d120      	bne.n	800994e <_vfiprintf_r+0x13a>
 800990c:	682a      	ldr	r2, [r5, #0]
 800990e:	06d3      	lsls	r3, r2, #27
 8009910:	d504      	bpl.n	800991c <_vfiprintf_r+0x108>
 8009912:	2353      	movs	r3, #83	; 0x53
 8009914:	a904      	add	r1, sp, #16
 8009916:	185b      	adds	r3, r3, r1
 8009918:	2120      	movs	r1, #32
 800991a:	7019      	strb	r1, [r3, #0]
 800991c:	0713      	lsls	r3, r2, #28
 800991e:	d504      	bpl.n	800992a <_vfiprintf_r+0x116>
 8009920:	2353      	movs	r3, #83	; 0x53
 8009922:	a904      	add	r1, sp, #16
 8009924:	185b      	adds	r3, r3, r1
 8009926:	212b      	movs	r1, #43	; 0x2b
 8009928:	7019      	strb	r1, [r3, #0]
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b2a      	cmp	r3, #42	; 0x2a
 8009930:	d016      	beq.n	8009960 <_vfiprintf_r+0x14c>
 8009932:	2100      	movs	r1, #0
 8009934:	68eb      	ldr	r3, [r5, #12]
 8009936:	9f03      	ldr	r7, [sp, #12]
 8009938:	783a      	ldrb	r2, [r7, #0]
 800993a:	1c78      	adds	r0, r7, #1
 800993c:	3a30      	subs	r2, #48	; 0x30
 800993e:	4684      	mov	ip, r0
 8009940:	2a09      	cmp	r2, #9
 8009942:	d94f      	bls.n	80099e4 <_vfiprintf_r+0x1d0>
 8009944:	2900      	cmp	r1, #0
 8009946:	d111      	bne.n	800996c <_vfiprintf_r+0x158>
 8009948:	e017      	b.n	800997a <_vfiprintf_r+0x166>
 800994a:	3701      	adds	r7, #1
 800994c:	e7a9      	b.n	80098a2 <_vfiprintf_r+0x8e>
 800994e:	4b49      	ldr	r3, [pc, #292]	; (8009a74 <_vfiprintf_r+0x260>)
 8009950:	682a      	ldr	r2, [r5, #0]
 8009952:	1ac0      	subs	r0, r0, r3
 8009954:	2301      	movs	r3, #1
 8009956:	4083      	lsls	r3, r0
 8009958:	4313      	orrs	r3, r2
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	9703      	str	r7, [sp, #12]
 800995e:	e7cb      	b.n	80098f8 <_vfiprintf_r+0xe4>
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	1d19      	adds	r1, r3, #4
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	9107      	str	r1, [sp, #28]
 8009968:	2b00      	cmp	r3, #0
 800996a:	db01      	blt.n	8009970 <_vfiprintf_r+0x15c>
 800996c:	930b      	str	r3, [sp, #44]	; 0x2c
 800996e:	e004      	b.n	800997a <_vfiprintf_r+0x166>
 8009970:	425b      	negs	r3, r3
 8009972:	60eb      	str	r3, [r5, #12]
 8009974:	2302      	movs	r3, #2
 8009976:	4313      	orrs	r3, r2
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	783b      	ldrb	r3, [r7, #0]
 800997c:	2b2e      	cmp	r3, #46	; 0x2e
 800997e:	d10a      	bne.n	8009996 <_vfiprintf_r+0x182>
 8009980:	787b      	ldrb	r3, [r7, #1]
 8009982:	2b2a      	cmp	r3, #42	; 0x2a
 8009984:	d137      	bne.n	80099f6 <_vfiprintf_r+0x1e2>
 8009986:	9b07      	ldr	r3, [sp, #28]
 8009988:	3702      	adds	r7, #2
 800998a:	1d1a      	adds	r2, r3, #4
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	9207      	str	r2, [sp, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	db2d      	blt.n	80099f0 <_vfiprintf_r+0x1dc>
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	2203      	movs	r2, #3
 8009998:	7839      	ldrb	r1, [r7, #0]
 800999a:	4837      	ldr	r0, [pc, #220]	; (8009a78 <_vfiprintf_r+0x264>)
 800999c:	f000 fab2 	bl	8009f04 <memchr>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d007      	beq.n	80099b4 <_vfiprintf_r+0x1a0>
 80099a4:	4b34      	ldr	r3, [pc, #208]	; (8009a78 <_vfiprintf_r+0x264>)
 80099a6:	682a      	ldr	r2, [r5, #0]
 80099a8:	1ac0      	subs	r0, r0, r3
 80099aa:	2340      	movs	r3, #64	; 0x40
 80099ac:	4083      	lsls	r3, r0
 80099ae:	4313      	orrs	r3, r2
 80099b0:	3701      	adds	r7, #1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	7839      	ldrb	r1, [r7, #0]
 80099b6:	1c7b      	adds	r3, r7, #1
 80099b8:	2206      	movs	r2, #6
 80099ba:	4830      	ldr	r0, [pc, #192]	; (8009a7c <_vfiprintf_r+0x268>)
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	7629      	strb	r1, [r5, #24]
 80099c0:	f000 faa0 	bl	8009f04 <memchr>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d045      	beq.n	8009a54 <_vfiprintf_r+0x240>
 80099c8:	4b2d      	ldr	r3, [pc, #180]	; (8009a80 <_vfiprintf_r+0x26c>)
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d127      	bne.n	8009a1e <_vfiprintf_r+0x20a>
 80099ce:	2207      	movs	r2, #7
 80099d0:	9b07      	ldr	r3, [sp, #28]
 80099d2:	3307      	adds	r3, #7
 80099d4:	4393      	bics	r3, r2
 80099d6:	3308      	adds	r3, #8
 80099d8:	9307      	str	r3, [sp, #28]
 80099da:	696b      	ldr	r3, [r5, #20]
 80099dc:	9a04      	ldr	r2, [sp, #16]
 80099de:	189b      	adds	r3, r3, r2
 80099e0:	616b      	str	r3, [r5, #20]
 80099e2:	e75d      	b.n	80098a0 <_vfiprintf_r+0x8c>
 80099e4:	210a      	movs	r1, #10
 80099e6:	434b      	muls	r3, r1
 80099e8:	4667      	mov	r7, ip
 80099ea:	189b      	adds	r3, r3, r2
 80099ec:	3909      	subs	r1, #9
 80099ee:	e7a3      	b.n	8009938 <_vfiprintf_r+0x124>
 80099f0:	2301      	movs	r3, #1
 80099f2:	425b      	negs	r3, r3
 80099f4:	e7ce      	b.n	8009994 <_vfiprintf_r+0x180>
 80099f6:	2300      	movs	r3, #0
 80099f8:	001a      	movs	r2, r3
 80099fa:	3701      	adds	r7, #1
 80099fc:	606b      	str	r3, [r5, #4]
 80099fe:	7839      	ldrb	r1, [r7, #0]
 8009a00:	1c78      	adds	r0, r7, #1
 8009a02:	3930      	subs	r1, #48	; 0x30
 8009a04:	4684      	mov	ip, r0
 8009a06:	2909      	cmp	r1, #9
 8009a08:	d903      	bls.n	8009a12 <_vfiprintf_r+0x1fe>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0c3      	beq.n	8009996 <_vfiprintf_r+0x182>
 8009a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a10:	e7c1      	b.n	8009996 <_vfiprintf_r+0x182>
 8009a12:	230a      	movs	r3, #10
 8009a14:	435a      	muls	r2, r3
 8009a16:	4667      	mov	r7, ip
 8009a18:	1852      	adds	r2, r2, r1
 8009a1a:	3b09      	subs	r3, #9
 8009a1c:	e7ef      	b.n	80099fe <_vfiprintf_r+0x1ea>
 8009a1e:	ab07      	add	r3, sp, #28
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	0022      	movs	r2, r4
 8009a24:	0029      	movs	r1, r5
 8009a26:	0030      	movs	r0, r6
 8009a28:	4b16      	ldr	r3, [pc, #88]	; (8009a84 <_vfiprintf_r+0x270>)
 8009a2a:	e000      	b.n	8009a2e <_vfiprintf_r+0x21a>
 8009a2c:	bf00      	nop
 8009a2e:	9004      	str	r0, [sp, #16]
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	3301      	adds	r3, #1
 8009a34:	d1d1      	bne.n	80099da <_vfiprintf_r+0x1c6>
 8009a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a38:	07db      	lsls	r3, r3, #31
 8009a3a:	d405      	bmi.n	8009a48 <_vfiprintf_r+0x234>
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	059b      	lsls	r3, r3, #22
 8009a40:	d402      	bmi.n	8009a48 <_vfiprintf_r+0x234>
 8009a42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a44:	f7ff fda8 	bl	8009598 <__retarget_lock_release_recursive>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	065b      	lsls	r3, r3, #25
 8009a4c:	d500      	bpl.n	8009a50 <_vfiprintf_r+0x23c>
 8009a4e:	e70a      	b.n	8009866 <_vfiprintf_r+0x52>
 8009a50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a52:	e70a      	b.n	800986a <_vfiprintf_r+0x56>
 8009a54:	ab07      	add	r3, sp, #28
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	0022      	movs	r2, r4
 8009a5a:	0029      	movs	r1, r5
 8009a5c:	0030      	movs	r0, r6
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <_vfiprintf_r+0x270>)
 8009a60:	f000 f882 	bl	8009b68 <_printf_i>
 8009a64:	e7e3      	b.n	8009a2e <_vfiprintf_r+0x21a>
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	0800a2c4 	.word	0x0800a2c4
 8009a6c:	0800a2e4 	.word	0x0800a2e4
 8009a70:	0800a2a4 	.word	0x0800a2a4
 8009a74:	0800a304 	.word	0x0800a304
 8009a78:	0800a30a 	.word	0x0800a30a
 8009a7c:	0800a30e 	.word	0x0800a30e
 8009a80:	00000000 	.word	0x00000000
 8009a84:	080097ef 	.word	0x080097ef

08009a88 <_printf_common>:
 8009a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8a:	0015      	movs	r5, r2
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	688a      	ldr	r2, [r1, #8]
 8009a90:	690b      	ldr	r3, [r1, #16]
 8009a92:	000c      	movs	r4, r1
 8009a94:	9000      	str	r0, [sp, #0]
 8009a96:	4293      	cmp	r3, r2
 8009a98:	da00      	bge.n	8009a9c <_printf_common+0x14>
 8009a9a:	0013      	movs	r3, r2
 8009a9c:	0022      	movs	r2, r4
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	3243      	adds	r2, #67	; 0x43
 8009aa2:	7812      	ldrb	r2, [r2, #0]
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	d001      	beq.n	8009aac <_printf_common+0x24>
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	069b      	lsls	r3, r3, #26
 8009ab0:	d502      	bpl.n	8009ab8 <_printf_common+0x30>
 8009ab2:	682b      	ldr	r3, [r5, #0]
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	2306      	movs	r3, #6
 8009abc:	0017      	movs	r7, r2
 8009abe:	401f      	ands	r7, r3
 8009ac0:	421a      	tst	r2, r3
 8009ac2:	d027      	beq.n	8009b14 <_printf_common+0x8c>
 8009ac4:	0023      	movs	r3, r4
 8009ac6:	3343      	adds	r3, #67	; 0x43
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	1e5a      	subs	r2, r3, #1
 8009acc:	4193      	sbcs	r3, r2
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	0692      	lsls	r2, r2, #26
 8009ad2:	d430      	bmi.n	8009b36 <_printf_common+0xae>
 8009ad4:	0022      	movs	r2, r4
 8009ad6:	9901      	ldr	r1, [sp, #4]
 8009ad8:	9800      	ldr	r0, [sp, #0]
 8009ada:	9e08      	ldr	r6, [sp, #32]
 8009adc:	3243      	adds	r2, #67	; 0x43
 8009ade:	47b0      	blx	r6
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d025      	beq.n	8009b30 <_printf_common+0xa8>
 8009ae4:	2306      	movs	r3, #6
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	682a      	ldr	r2, [r5, #0]
 8009aea:	68e1      	ldr	r1, [r4, #12]
 8009aec:	2500      	movs	r5, #0
 8009aee:	4003      	ands	r3, r0
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d103      	bne.n	8009afc <_printf_common+0x74>
 8009af4:	1a8d      	subs	r5, r1, r2
 8009af6:	43eb      	mvns	r3, r5
 8009af8:	17db      	asrs	r3, r3, #31
 8009afa:	401d      	ands	r5, r3
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	dd01      	ble.n	8009b08 <_printf_common+0x80>
 8009b04:	1a9b      	subs	r3, r3, r2
 8009b06:	18ed      	adds	r5, r5, r3
 8009b08:	2700      	movs	r7, #0
 8009b0a:	42bd      	cmp	r5, r7
 8009b0c:	d120      	bne.n	8009b50 <_printf_common+0xc8>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e010      	b.n	8009b34 <_printf_common+0xac>
 8009b12:	3701      	adds	r7, #1
 8009b14:	68e3      	ldr	r3, [r4, #12]
 8009b16:	682a      	ldr	r2, [r5, #0]
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	42bb      	cmp	r3, r7
 8009b1c:	ddd2      	ble.n	8009ac4 <_printf_common+0x3c>
 8009b1e:	0022      	movs	r2, r4
 8009b20:	2301      	movs	r3, #1
 8009b22:	9901      	ldr	r1, [sp, #4]
 8009b24:	9800      	ldr	r0, [sp, #0]
 8009b26:	9e08      	ldr	r6, [sp, #32]
 8009b28:	3219      	adds	r2, #25
 8009b2a:	47b0      	blx	r6
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d1f0      	bne.n	8009b12 <_printf_common+0x8a>
 8009b30:	2001      	movs	r0, #1
 8009b32:	4240      	negs	r0, r0
 8009b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b36:	2030      	movs	r0, #48	; 0x30
 8009b38:	18e1      	adds	r1, r4, r3
 8009b3a:	3143      	adds	r1, #67	; 0x43
 8009b3c:	7008      	strb	r0, [r1, #0]
 8009b3e:	0021      	movs	r1, r4
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	3145      	adds	r1, #69	; 0x45
 8009b44:	7809      	ldrb	r1, [r1, #0]
 8009b46:	18a2      	adds	r2, r4, r2
 8009b48:	3243      	adds	r2, #67	; 0x43
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	7011      	strb	r1, [r2, #0]
 8009b4e:	e7c1      	b.n	8009ad4 <_printf_common+0x4c>
 8009b50:	0022      	movs	r2, r4
 8009b52:	2301      	movs	r3, #1
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	9800      	ldr	r0, [sp, #0]
 8009b58:	9e08      	ldr	r6, [sp, #32]
 8009b5a:	321a      	adds	r2, #26
 8009b5c:	47b0      	blx	r6
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d0e6      	beq.n	8009b30 <_printf_common+0xa8>
 8009b62:	3701      	adds	r7, #1
 8009b64:	e7d1      	b.n	8009b0a <_printf_common+0x82>
	...

08009b68 <_printf_i>:
 8009b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6a:	b08b      	sub	sp, #44	; 0x2c
 8009b6c:	9206      	str	r2, [sp, #24]
 8009b6e:	000a      	movs	r2, r1
 8009b70:	3243      	adds	r2, #67	; 0x43
 8009b72:	9307      	str	r3, [sp, #28]
 8009b74:	9005      	str	r0, [sp, #20]
 8009b76:	9204      	str	r2, [sp, #16]
 8009b78:	7e0a      	ldrb	r2, [r1, #24]
 8009b7a:	000c      	movs	r4, r1
 8009b7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b7e:	2a78      	cmp	r2, #120	; 0x78
 8009b80:	d806      	bhi.n	8009b90 <_printf_i+0x28>
 8009b82:	2a62      	cmp	r2, #98	; 0x62
 8009b84:	d808      	bhi.n	8009b98 <_printf_i+0x30>
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	d100      	bne.n	8009b8c <_printf_i+0x24>
 8009b8a:	e0c0      	b.n	8009d0e <_printf_i+0x1a6>
 8009b8c:	2a58      	cmp	r2, #88	; 0x58
 8009b8e:	d052      	beq.n	8009c36 <_printf_i+0xce>
 8009b90:	0026      	movs	r6, r4
 8009b92:	3642      	adds	r6, #66	; 0x42
 8009b94:	7032      	strb	r2, [r6, #0]
 8009b96:	e022      	b.n	8009bde <_printf_i+0x76>
 8009b98:	0010      	movs	r0, r2
 8009b9a:	3863      	subs	r0, #99	; 0x63
 8009b9c:	2815      	cmp	r0, #21
 8009b9e:	d8f7      	bhi.n	8009b90 <_printf_i+0x28>
 8009ba0:	f7f6 fab2 	bl	8000108 <__gnu_thumb1_case_shi>
 8009ba4:	001f0016 	.word	0x001f0016
 8009ba8:	fff6fff6 	.word	0xfff6fff6
 8009bac:	fff6fff6 	.word	0xfff6fff6
 8009bb0:	fff6001f 	.word	0xfff6001f
 8009bb4:	fff6fff6 	.word	0xfff6fff6
 8009bb8:	00a8fff6 	.word	0x00a8fff6
 8009bbc:	009a0036 	.word	0x009a0036
 8009bc0:	fff6fff6 	.word	0xfff6fff6
 8009bc4:	fff600b9 	.word	0xfff600b9
 8009bc8:	fff60036 	.word	0xfff60036
 8009bcc:	009efff6 	.word	0x009efff6
 8009bd0:	0026      	movs	r6, r4
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	3642      	adds	r6, #66	; 0x42
 8009bd6:	1d11      	adds	r1, r2, #4
 8009bd8:	6019      	str	r1, [r3, #0]
 8009bda:	6813      	ldr	r3, [r2, #0]
 8009bdc:	7033      	strb	r3, [r6, #0]
 8009bde:	2301      	movs	r3, #1
 8009be0:	e0a7      	b.n	8009d32 <_printf_i+0x1ca>
 8009be2:	6808      	ldr	r0, [r1, #0]
 8009be4:	6819      	ldr	r1, [r3, #0]
 8009be6:	1d0a      	adds	r2, r1, #4
 8009be8:	0605      	lsls	r5, r0, #24
 8009bea:	d50b      	bpl.n	8009c04 <_printf_i+0x9c>
 8009bec:	680d      	ldr	r5, [r1, #0]
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	da03      	bge.n	8009bfc <_printf_i+0x94>
 8009bf4:	232d      	movs	r3, #45	; 0x2d
 8009bf6:	9a04      	ldr	r2, [sp, #16]
 8009bf8:	426d      	negs	r5, r5
 8009bfa:	7013      	strb	r3, [r2, #0]
 8009bfc:	4b61      	ldr	r3, [pc, #388]	; (8009d84 <_printf_i+0x21c>)
 8009bfe:	270a      	movs	r7, #10
 8009c00:	9303      	str	r3, [sp, #12]
 8009c02:	e032      	b.n	8009c6a <_printf_i+0x102>
 8009c04:	680d      	ldr	r5, [r1, #0]
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	0641      	lsls	r1, r0, #25
 8009c0a:	d5f1      	bpl.n	8009bf0 <_printf_i+0x88>
 8009c0c:	b22d      	sxth	r5, r5
 8009c0e:	e7ef      	b.n	8009bf0 <_printf_i+0x88>
 8009c10:	680d      	ldr	r5, [r1, #0]
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	1d08      	adds	r0, r1, #4
 8009c16:	6018      	str	r0, [r3, #0]
 8009c18:	062e      	lsls	r6, r5, #24
 8009c1a:	d501      	bpl.n	8009c20 <_printf_i+0xb8>
 8009c1c:	680d      	ldr	r5, [r1, #0]
 8009c1e:	e003      	b.n	8009c28 <_printf_i+0xc0>
 8009c20:	066d      	lsls	r5, r5, #25
 8009c22:	d5fb      	bpl.n	8009c1c <_printf_i+0xb4>
 8009c24:	680d      	ldr	r5, [r1, #0]
 8009c26:	b2ad      	uxth	r5, r5
 8009c28:	4b56      	ldr	r3, [pc, #344]	; (8009d84 <_printf_i+0x21c>)
 8009c2a:	270a      	movs	r7, #10
 8009c2c:	9303      	str	r3, [sp, #12]
 8009c2e:	2a6f      	cmp	r2, #111	; 0x6f
 8009c30:	d117      	bne.n	8009c62 <_printf_i+0xfa>
 8009c32:	2708      	movs	r7, #8
 8009c34:	e015      	b.n	8009c62 <_printf_i+0xfa>
 8009c36:	3145      	adds	r1, #69	; 0x45
 8009c38:	700a      	strb	r2, [r1, #0]
 8009c3a:	4a52      	ldr	r2, [pc, #328]	; (8009d84 <_printf_i+0x21c>)
 8009c3c:	9203      	str	r2, [sp, #12]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	6821      	ldr	r1, [r4, #0]
 8009c42:	ca20      	ldmia	r2!, {r5}
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	0608      	lsls	r0, r1, #24
 8009c48:	d550      	bpl.n	8009cec <_printf_i+0x184>
 8009c4a:	07cb      	lsls	r3, r1, #31
 8009c4c:	d502      	bpl.n	8009c54 <_printf_i+0xec>
 8009c4e:	2320      	movs	r3, #32
 8009c50:	4319      	orrs	r1, r3
 8009c52:	6021      	str	r1, [r4, #0]
 8009c54:	2710      	movs	r7, #16
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	d103      	bne.n	8009c62 <_printf_i+0xfa>
 8009c5a:	2320      	movs	r3, #32
 8009c5c:	6822      	ldr	r2, [r4, #0]
 8009c5e:	439a      	bics	r2, r3
 8009c60:	6022      	str	r2, [r4, #0]
 8009c62:	0023      	movs	r3, r4
 8009c64:	2200      	movs	r2, #0
 8009c66:	3343      	adds	r3, #67	; 0x43
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	6863      	ldr	r3, [r4, #4]
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	db03      	blt.n	8009c7a <_printf_i+0x112>
 8009c72:	2204      	movs	r2, #4
 8009c74:	6821      	ldr	r1, [r4, #0]
 8009c76:	4391      	bics	r1, r2
 8009c78:	6021      	str	r1, [r4, #0]
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	d102      	bne.n	8009c84 <_printf_i+0x11c>
 8009c7e:	9e04      	ldr	r6, [sp, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00c      	beq.n	8009c9e <_printf_i+0x136>
 8009c84:	9e04      	ldr	r6, [sp, #16]
 8009c86:	0028      	movs	r0, r5
 8009c88:	0039      	movs	r1, r7
 8009c8a:	f7f6 facd 	bl	8000228 <__aeabi_uidivmod>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	3e01      	subs	r6, #1
 8009c92:	5c5b      	ldrb	r3, [r3, r1]
 8009c94:	7033      	strb	r3, [r6, #0]
 8009c96:	002b      	movs	r3, r5
 8009c98:	0005      	movs	r5, r0
 8009c9a:	429f      	cmp	r7, r3
 8009c9c:	d9f3      	bls.n	8009c86 <_printf_i+0x11e>
 8009c9e:	2f08      	cmp	r7, #8
 8009ca0:	d109      	bne.n	8009cb6 <_printf_i+0x14e>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	07db      	lsls	r3, r3, #31
 8009ca6:	d506      	bpl.n	8009cb6 <_printf_i+0x14e>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	6922      	ldr	r2, [r4, #16]
 8009cac:	4293      	cmp	r3, r2
 8009cae:	dc02      	bgt.n	8009cb6 <_printf_i+0x14e>
 8009cb0:	2330      	movs	r3, #48	; 0x30
 8009cb2:	3e01      	subs	r6, #1
 8009cb4:	7033      	strb	r3, [r6, #0]
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	1b9b      	subs	r3, r3, r6
 8009cba:	6123      	str	r3, [r4, #16]
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	0021      	movs	r1, r4
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	9b06      	ldr	r3, [sp, #24]
 8009cc6:	aa09      	add	r2, sp, #36	; 0x24
 8009cc8:	f7ff fede 	bl	8009a88 <_printf_common>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d135      	bne.n	8009d3c <_printf_i+0x1d4>
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	4240      	negs	r0, r0
 8009cd4:	b00b      	add	sp, #44	; 0x2c
 8009cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd8:	2220      	movs	r2, #32
 8009cda:	6809      	ldr	r1, [r1, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	6022      	str	r2, [r4, #0]
 8009ce0:	0022      	movs	r2, r4
 8009ce2:	2178      	movs	r1, #120	; 0x78
 8009ce4:	3245      	adds	r2, #69	; 0x45
 8009ce6:	7011      	strb	r1, [r2, #0]
 8009ce8:	4a27      	ldr	r2, [pc, #156]	; (8009d88 <_printf_i+0x220>)
 8009cea:	e7a7      	b.n	8009c3c <_printf_i+0xd4>
 8009cec:	0648      	lsls	r0, r1, #25
 8009cee:	d5ac      	bpl.n	8009c4a <_printf_i+0xe2>
 8009cf0:	b2ad      	uxth	r5, r5
 8009cf2:	e7aa      	b.n	8009c4a <_printf_i+0xe2>
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	680d      	ldr	r5, [r1, #0]
 8009cf8:	1d10      	adds	r0, r2, #4
 8009cfa:	6949      	ldr	r1, [r1, #20]
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	062e      	lsls	r6, r5, #24
 8009d02:	d501      	bpl.n	8009d08 <_printf_i+0x1a0>
 8009d04:	6019      	str	r1, [r3, #0]
 8009d06:	e002      	b.n	8009d0e <_printf_i+0x1a6>
 8009d08:	066d      	lsls	r5, r5, #25
 8009d0a:	d5fb      	bpl.n	8009d04 <_printf_i+0x19c>
 8009d0c:	8019      	strh	r1, [r3, #0]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9e04      	ldr	r6, [sp, #16]
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	e7d2      	b.n	8009cbc <_printf_i+0x154>
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	1d11      	adds	r1, r2, #4
 8009d1a:	6019      	str	r1, [r3, #0]
 8009d1c:	6816      	ldr	r6, [r2, #0]
 8009d1e:	2100      	movs	r1, #0
 8009d20:	0030      	movs	r0, r6
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	f000 f8ee 	bl	8009f04 <memchr>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d001      	beq.n	8009d30 <_printf_i+0x1c8>
 8009d2c:	1b80      	subs	r0, r0, r6
 8009d2e:	6060      	str	r0, [r4, #4]
 8009d30:	6863      	ldr	r3, [r4, #4]
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	7013      	strb	r3, [r2, #0]
 8009d3a:	e7bf      	b.n	8009cbc <_printf_i+0x154>
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	0032      	movs	r2, r6
 8009d40:	9906      	ldr	r1, [sp, #24]
 8009d42:	9805      	ldr	r0, [sp, #20]
 8009d44:	9d07      	ldr	r5, [sp, #28]
 8009d46:	47a8      	blx	r5
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d0c1      	beq.n	8009cd0 <_printf_i+0x168>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	079b      	lsls	r3, r3, #30
 8009d50:	d415      	bmi.n	8009d7e <_printf_i+0x216>
 8009d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d54:	68e0      	ldr	r0, [r4, #12]
 8009d56:	4298      	cmp	r0, r3
 8009d58:	dabc      	bge.n	8009cd4 <_printf_i+0x16c>
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	e7ba      	b.n	8009cd4 <_printf_i+0x16c>
 8009d5e:	0022      	movs	r2, r4
 8009d60:	2301      	movs	r3, #1
 8009d62:	9906      	ldr	r1, [sp, #24]
 8009d64:	9805      	ldr	r0, [sp, #20]
 8009d66:	9e07      	ldr	r6, [sp, #28]
 8009d68:	3219      	adds	r2, #25
 8009d6a:	47b0      	blx	r6
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d0af      	beq.n	8009cd0 <_printf_i+0x168>
 8009d70:	3501      	adds	r5, #1
 8009d72:	68e3      	ldr	r3, [r4, #12]
 8009d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	42ab      	cmp	r3, r5
 8009d7a:	dcf0      	bgt.n	8009d5e <_printf_i+0x1f6>
 8009d7c:	e7e9      	b.n	8009d52 <_printf_i+0x1ea>
 8009d7e:	2500      	movs	r5, #0
 8009d80:	e7f7      	b.n	8009d72 <_printf_i+0x20a>
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	0800a315 	.word	0x0800a315
 8009d88:	0800a326 	.word	0x0800a326

08009d8c <_sbrk_r>:
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	b570      	push	{r4, r5, r6, lr}
 8009d90:	4d06      	ldr	r5, [pc, #24]	; (8009dac <_sbrk_r+0x20>)
 8009d92:	0004      	movs	r4, r0
 8009d94:	0008      	movs	r0, r1
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f9 fcaa 	bl	80036f0 <_sbrk>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d103      	bne.n	8009da8 <_sbrk_r+0x1c>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d000      	beq.n	8009da8 <_sbrk_r+0x1c>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	20008970 	.word	0x20008970

08009db0 <__sread>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	000c      	movs	r4, r1
 8009db4:	250e      	movs	r5, #14
 8009db6:	5f49      	ldrsh	r1, [r1, r5]
 8009db8:	f000 f8c0 	bl	8009f3c <_read_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	db03      	blt.n	8009dc8 <__sread+0x18>
 8009dc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009dc2:	181b      	adds	r3, r3, r0
 8009dc4:	6563      	str	r3, [r4, #84]	; 0x54
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	4a02      	ldr	r2, [pc, #8]	; (8009dd4 <__sread+0x24>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	e7f9      	b.n	8009dc6 <__sread+0x16>
 8009dd2:	46c0      	nop			; (mov r8, r8)
 8009dd4:	ffffefff 	.word	0xffffefff

08009dd8 <__swrite>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	001f      	movs	r7, r3
 8009ddc:	898b      	ldrh	r3, [r1, #12]
 8009dde:	0005      	movs	r5, r0
 8009de0:	000c      	movs	r4, r1
 8009de2:	0016      	movs	r6, r2
 8009de4:	05db      	lsls	r3, r3, #23
 8009de6:	d505      	bpl.n	8009df4 <__swrite+0x1c>
 8009de8:	230e      	movs	r3, #14
 8009dea:	5ec9      	ldrsh	r1, [r1, r3]
 8009dec:	2200      	movs	r2, #0
 8009dee:	2302      	movs	r3, #2
 8009df0:	f000 f874 	bl	8009edc <_lseek_r>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	4a05      	ldr	r2, [pc, #20]	; (8009e0c <__swrite+0x34>)
 8009df8:	0028      	movs	r0, r5
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	0032      	movs	r2, r6
 8009e00:	230e      	movs	r3, #14
 8009e02:	5ee1      	ldrsh	r1, [r4, r3]
 8009e04:	003b      	movs	r3, r7
 8009e06:	f000 f81f 	bl	8009e48 <_write_r>
 8009e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e0c:	ffffefff 	.word	0xffffefff

08009e10 <__sseek>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	000c      	movs	r4, r1
 8009e14:	250e      	movs	r5, #14
 8009e16:	5f49      	ldrsh	r1, [r1, r5]
 8009e18:	f000 f860 	bl	8009edc <_lseek_r>
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	1c42      	adds	r2, r0, #1
 8009e20:	d103      	bne.n	8009e2a <__sseek+0x1a>
 8009e22:	4a05      	ldr	r2, [pc, #20]	; (8009e38 <__sseek+0x28>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	81a3      	strh	r3, [r4, #12]
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
 8009e2a:	2280      	movs	r2, #128	; 0x80
 8009e2c:	0152      	lsls	r2, r2, #5
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	6560      	str	r0, [r4, #84]	; 0x54
 8009e34:	e7f8      	b.n	8009e28 <__sseek+0x18>
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	ffffefff 	.word	0xffffefff

08009e3c <__sclose>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	230e      	movs	r3, #14
 8009e40:	5ec9      	ldrsh	r1, [r1, r3]
 8009e42:	f000 f815 	bl	8009e70 <_close_r>
 8009e46:	bd10      	pop	{r4, pc}

08009e48 <_write_r>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	0004      	movs	r4, r0
 8009e4c:	0008      	movs	r0, r1
 8009e4e:	0011      	movs	r1, r2
 8009e50:	001a      	movs	r2, r3
 8009e52:	2300      	movs	r3, #0
 8009e54:	4d05      	ldr	r5, [pc, #20]	; (8009e6c <_write_r+0x24>)
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	f7f9 fc01 	bl	800365e <_write>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d103      	bne.n	8009e68 <_write_r+0x20>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d000      	beq.n	8009e68 <_write_r+0x20>
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	46c0      	nop			; (mov r8, r8)
 8009e6c:	20008970 	.word	0x20008970

08009e70 <_close_r>:
 8009e70:	2300      	movs	r3, #0
 8009e72:	b570      	push	{r4, r5, r6, lr}
 8009e74:	4d06      	ldr	r5, [pc, #24]	; (8009e90 <_close_r+0x20>)
 8009e76:	0004      	movs	r4, r0
 8009e78:	0008      	movs	r0, r1
 8009e7a:	602b      	str	r3, [r5, #0]
 8009e7c:	f7f9 fc0b 	bl	8003696 <_close>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d103      	bne.n	8009e8c <_close_r+0x1c>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d000      	beq.n	8009e8c <_close_r+0x1c>
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
 8009e8e:	46c0      	nop			; (mov r8, r8)
 8009e90:	20008970 	.word	0x20008970

08009e94 <_fstat_r>:
 8009e94:	2300      	movs	r3, #0
 8009e96:	b570      	push	{r4, r5, r6, lr}
 8009e98:	4d06      	ldr	r5, [pc, #24]	; (8009eb4 <_fstat_r+0x20>)
 8009e9a:	0004      	movs	r4, r0
 8009e9c:	0008      	movs	r0, r1
 8009e9e:	0011      	movs	r1, r2
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	f7f9 fc02 	bl	80036aa <_fstat>
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	d103      	bne.n	8009eb2 <_fstat_r+0x1e>
 8009eaa:	682b      	ldr	r3, [r5, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d000      	beq.n	8009eb2 <_fstat_r+0x1e>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	20008970 	.word	0x20008970

08009eb8 <_isatty_r>:
 8009eb8:	2300      	movs	r3, #0
 8009eba:	b570      	push	{r4, r5, r6, lr}
 8009ebc:	4d06      	ldr	r5, [pc, #24]	; (8009ed8 <_isatty_r+0x20>)
 8009ebe:	0004      	movs	r4, r0
 8009ec0:	0008      	movs	r0, r1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	f7f9 fbff 	bl	80036c6 <_isatty>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d103      	bne.n	8009ed4 <_isatty_r+0x1c>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d000      	beq.n	8009ed4 <_isatty_r+0x1c>
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	20008970 	.word	0x20008970

08009edc <_lseek_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	0004      	movs	r4, r0
 8009ee0:	0008      	movs	r0, r1
 8009ee2:	0011      	movs	r1, r2
 8009ee4:	001a      	movs	r2, r3
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	4d05      	ldr	r5, [pc, #20]	; (8009f00 <_lseek_r+0x24>)
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	f7f9 fbf4 	bl	80036d8 <_lseek>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d103      	bne.n	8009efc <_lseek_r+0x20>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d000      	beq.n	8009efc <_lseek_r+0x20>
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	bd70      	pop	{r4, r5, r6, pc}
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	20008970 	.word	0x20008970

08009f04 <memchr>:
 8009f04:	b2c9      	uxtb	r1, r1
 8009f06:	1882      	adds	r2, r0, r2
 8009f08:	4290      	cmp	r0, r2
 8009f0a:	d101      	bne.n	8009f10 <memchr+0xc>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	4770      	bx	lr
 8009f10:	7803      	ldrb	r3, [r0, #0]
 8009f12:	428b      	cmp	r3, r1
 8009f14:	d0fb      	beq.n	8009f0e <memchr+0xa>
 8009f16:	3001      	adds	r0, #1
 8009f18:	e7f6      	b.n	8009f08 <memchr+0x4>
	...

08009f1c <__malloc_lock>:
 8009f1c:	b510      	push	{r4, lr}
 8009f1e:	4802      	ldr	r0, [pc, #8]	; (8009f28 <__malloc_lock+0xc>)
 8009f20:	f7ff fb39 	bl	8009596 <__retarget_lock_acquire_recursive>
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	20008968 	.word	0x20008968

08009f2c <__malloc_unlock>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	4802      	ldr	r0, [pc, #8]	; (8009f38 <__malloc_unlock+0xc>)
 8009f30:	f7ff fb32 	bl	8009598 <__retarget_lock_release_recursive>
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	46c0      	nop			; (mov r8, r8)
 8009f38:	20008968 	.word	0x20008968

08009f3c <_read_r>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	0004      	movs	r4, r0
 8009f40:	0008      	movs	r0, r1
 8009f42:	0011      	movs	r1, r2
 8009f44:	001a      	movs	r2, r3
 8009f46:	2300      	movs	r3, #0
 8009f48:	4d05      	ldr	r5, [pc, #20]	; (8009f60 <_read_r+0x24>)
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f9 fb6a 	bl	8003624 <_read>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d103      	bne.n	8009f5c <_read_r+0x20>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d000      	beq.n	8009f5c <_read_r+0x20>
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	46c0      	nop			; (mov r8, r8)
 8009f60:	20008970 	.word	0x20008970

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr
